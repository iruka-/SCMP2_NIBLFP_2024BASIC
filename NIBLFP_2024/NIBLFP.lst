 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 1 - 2024年05月30日 19時01分01秒


    1/   0 :                            ;
    2/   0 :                            ; NATIONAL INDUSTRIAL BASIC LANGUAGE, EXTENDED, WITH FLOATING POINT
    3/   0 :                            ;
    4/   0 :                            ; Originally written by Erich Küster during the late 1970s.
    5/   0 :                            ; Revived from old hex-dump listings in 2023. Many of the original
    6/   0 :                            ; intentions were lost, but slowly they are being reverse-engineered
    7/   0 :                            ; and documented.
    8/   0 :                            ;
    9/   0 :                            ; This code, as does all code that uses Interpretative Language,
   10/   0 :                            ; relies heavily on the use of macros, and, more to the point, on
   11/   0 :                            ; macros that support variable arguments. Currently, the assembler
   12/   0 :                            ; chosen to re-develop the project is ASL, written by Alfred Arnold,
   13/   0 :                            ; which can be found at https://john.ccac.rwth-aachen.de:8000/as/
   14/   0 :                            ;
   15/   0 :                            ; Started in May 8, 2023 by Erich, later that year increased effort
   16/   0 :                            ; put by Fred N. van Kempen to demystify the code, and to attempt to
   17/   0 :                            ; get a more or less cleaned up version ready for inclusion with his
   18/   0 :                            ; own VARCem projects. Many of the changes were developed with Erich,
   19/   0 :                            ; and many changes will find their way back into the "official"
   20/   0 :                            ; repository of this code, which, incidentally, can be found at:
   21/   0 :                            ;
   22/   0 :                            ;  https://github.com/ekuester/SCMP-INS8060-NIBL-FloatingPoint-TinyBASIC-Interpreter
   23/   0 :                            ;
   24/   0 :                            ; PLEASE NOTE that this code was rewritten to be more clear (and less
   25/   0 :                            ; dangerous) than the original, which used a number of smart tricks to
   26/   0 :                            ; save space, but which were also very dangerous for structure. So, at
   27/   0 :                            ; the expense of making the code a few bytes bigger, it is not as scary
   28/   0 :                            ; anymore!  That said.. amazing how Erich was able to write this WITHOUT
   29/   0 :                            ; the assistance of an assembler!!  His original (but updated) code will
   30/   0 :                            ; show you where these "danger zones" were, how they worked, and why
   31/   0 :                            ; they were there to begin with.
   32/   0 :                            ;
   33/   0 :                            ; AUTHORS:	National Semiconductor, NIBL, 1975
   34/   0 :                            ;		Erich Küster (ekuester), rewrite and FP, late 1970's-2024
   35/   0 :                            ;		Fred N. van Kempen (waltje), cleanup-rewrite, 2023,2024
   36/   0 :                            ;		
   37/   0 :                            ;		Redistribution and  use  in source  and binary forms, with
   38/   0 :                            ;		or  without modification, are permitted  provided that the
   39/   0 :                            ;		following conditions are met:
   40/   0 :                            ;	
   41/   0 :                            ;		1. Redistributions of  source  code must retain the entire
   42/   0 :                            ;		   above notice, this list of conditions and the following
   43/   0 :                            ;		   disclaimer.
   44/   0 :                            ;	
   45/   0 :                            ;		2. Redistributions in binary form must reproduce the above
   46/   0 :                            ;		   copyright  notice,  this list  of  conditions  and  the
   47/   0 :                            ;		   following disclaimer in  the documentation and/or other
   48/   0 :                            ;		   materials provided with the distribution.
   49/   0 :                            ;	
   50/   0 :                            ;		3. Neither the  name of the copyright holder nor the names
   51/   0 :                            ;		   of  its  contributors may be used to endorse or promote
   52/   0 :                            ;		   products  derived from  this  software without specific
   53/   0 :                            ;		   prior written permission.
   54/   0 :                            ;	
   55/   0 :                            ; THIS SOFTWARE  IS  PROVIDED BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
   56/   0 :                            ; "AS IS" AND  ANY EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING, BUT  NOT
   57/   0 :                            ; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
   58/   0 :                            ; PARTICULAR PURPOSE  ARE  DISCLAIMED. IN  NO  EVENT  SHALL THE COPYRIGHT
   59/   0 :                            ; HOLDER OR  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   60/   0 :                            ; SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 2 - 2024年05月30日 19時01分01秒


   61/   0 :                            ; LIMITED TO, PROCUREMENT OF SUBSTITUTE  GOODS OR SERVICES;  LOSS OF USE,
   62/   0 :                            ; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON  ANY
   63/   0 :                            ; THEORY OF  LIABILITY, WHETHER IN  CONTRACT, STRICT  LIABILITY, OR  TORT
   64/   0 :                            ; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  IN ANY  WAY OUT OF THE USE
   65/   0 :                            ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   66/   0 :                            ;
   67/   0 :                            ; last update:	2024/04/15
   68/   0 :                            ;
   69/   0 :                            ; >>>>>>>>>>>>>>>>>>>           WORK IN PROGRESS           <<<<<<<<<<<<<<<<<
   70/   0 :                            ;
   71/   0 :                            ; TODO: 	Correct severe issue from those days (nowadays detected):
   72/   0 :                            ;		 PR -64/-16 gives SNTX ERROR, PR -64/(-16) gives correct result.
   73/   0 :                            ;		 In general plus or minus sign after an operator gives error.
   74/   0 :                            ;		Implement the dynamic RAM scan at startup, to get rid of
   75/   0 :                            ;		 the static RAMBASE definition.
   76/   0 :                            ;		Complete editing commands in GETLIN.
   77/   0 :                            ;		Implement key BACKSPACE = 0x7f in GETLIN.
   78/   0 :                            ;		Merge STREXP and REXP in I.L. table into a single "EXPR"
   79/   0 :                            ;		 function.
   80/   0 :                            ;		For CLOAD, detect if no cassette present and print error.
   81/   0 :                            ;
   82/   0 :                            ;
   83/   0 :                            ;******************************************************
   84/   0 :                            ;*     WE ARE TIED DOWN TO A LANGUAGE WHICH           *
   85/   0 :                            ;*     MAKES UP IN OBSCURITY WHAT IT LACKS            *
   86/   0 :                            ;*     IN STYLE.                                      *
   87/   0 :                            ;*                      - TOM STOPPARD                *
   88/   0 :                            ;*     CONFIRMED                                      *
   89/   0 :                            ;*                      - ERICH KUESTER               *
   90/   0 :                            ;*     NO KIDDING!                                    *
   91/   0 :                            ;*                      - FRED VAN KEMPEN             *
   92/   0 :                            ;******************************************************
   93/   0 :                            
   94/   0 :                            ; Functions.
   95/   0 :                            L FUNCTION VAL16, (VAL16 & 0xFF)
   96/   0 :                            H FUNCTION VAL16, ((VAL16 >> 8) & 0xFF)
   97/   0 :                            
   98/   0 :                            ; Do we want the cassette I/O routines?
   99/   0 : =>UNDEFINED                	IFNDEF USE_CASS
  100/   0 : =0x2                       USE_CASS = 2				; 1=normal,2=full,0=disabled
  101/   0 : [99]                       	ENDIF
  102/   0 :                            
  103/   0 :                            ; Opcodes used for I/O emulation.
  104/   0 : =>DEFINED                  	IFDEF EMULA
  105/   0 : =0x20                      WRCHAR	= 0x20				; write char to TTY
  106/   0 : =0x21                      RDCHAR	= 0x21				; read char from TTY
Will generate emulation code.
  107/   0 :                            	MESSAGE	"Will generate emulation code."
  108/   0 : [104]                      	ENDIF
  109/   0 :                            
  110/   0 :                            ; Define KBPLUS to use system calls to KBPLUS monitor.
  111/   0 : =>UNDEFINED                        IFDEF KBPLUS
  112/   0 :                            GETC	= 0x00DE			; KBPLUS system call
  113/   0 :                            PUTC	= 0x01C5			; KBPLUS system call
  114/   0 :                            PUTS	= 0x0052			; KBPLUS system call
  115/   0 :                            CASLD	= 0x0200			; KBPLUS system call
  116/   0 :                            CASSV	= 0x0280			; KBPLUS system call
  117/   0 :                            	MESSAGE	"Will generate for KBPLUS integration."
  118/   0 : [111]                      	ENDIF
  119/   0 :                            
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 3 - 2024年05月30日 19時01分01秒


  120/   0 :                            ; Set desired load address (3x4096 bytes.)
  121/   0 : =>UNDEFINED                	IFNDEF BASE
  122/   0 : =0xD000                    BASE	= 0xD000
  123/   0 : [121]                      	ENDIF
  124/   0 :                            
  125/   0 :                            ; Set desired ram base address.
  126/   0 :                            ; Contiguous memory is assumed from 0x1000 through RAMBASE+0x0FFF.
  127/   0 : =>UNDEFINED                	IFNDEF RAMBASE
  128/   0 : =0x7000                    RAMBASE	= 0x7000			; set page of RAM to use for scratch
  129/   0 : [127]                      	ENDIF
  130/   0 : =0xC00                     STKTOP	= 0x0C00			; offset into page (1K below top)
  131/   0 : =0x7C00                    STKBASE	= RAMBASE+STKTOP		; this is the base of our scratch RAM
  132/   0 : =0x80                      STKMID	= 0x0080			; center of RAM stack (for P2 offset)
  133/   0 : =0x3B6                     STKIBUF	= 0x03B6			; input buffer offset from STKBASE
  134/   0 : =0x100                     VARSBUF	= 0x0100			; start of vars (offset from STKBASE)
  135/   0 :                            
  136/   0 : =0xF6                      RAMSTK	= 0x00F6			; offset for syscalls stack
  137/   0 :                            
  138/   0 :                            ; NOTE:	following are six internal stack offsets relative to STKBASE
  139/   0 : =0x1E                      SUBSTK	= 0x001E			; offset for CALL/RTRN stack
  140/   0 : =0x60                      AEXSTK	= 0x0060			; offset for arithmetic expression stack
  141/   0 : =0xF0                      SBRSTK	= 0x00F0			; offset for GOSUB/RETURN stack
  142/   0 :                            ; FIXME: SBRSTK was 0xFD, changed for RAMSTK
  143/   0 : =0xE0                      DOSTAK	= SBRSTK-16			; offset for DO/UNTIL stack
  144/   0 : =0xD4                      FORSTK	= DOSTAK-12			; offset for FOR/NEXT stack
  145/   0 : =0xA4                      ILCSTK	= FORSTK-48			; offset for ILCALL/ILRTRN stack
  146/   0 :                            
  147/   0 :                            ; NOTE: Input buffer for GETLIN begins at STKBASE+STKIBUF,
  148/   0 :                            ;	ends at STKBASE+STKIBUF+72 ( holds maximum 72 chars )
  149/   0 :                            
  150/   0 :                            ; RAM usage constants relative to P2 (work in progress.)
  151/   0 :                            ; Shown offsets are with P2 assumed to be at STKBASE+STKMID.
  152/   0 :                            ; -127	PUTASC:char			; temp storage for character
  153/   0 : =0xFFFFFFFFFFFFFF82        MSGOFF	= -126				; relative offset (E) in MESG
  154/   0 : =0xFFFFFFFFFFFFFF83        RAMBAS	= -125				; base address of RAM, high byte
  155/   0 : =0xFFFFFFFFFFFFFF84        PAGES	= -124				; number of valid pages for program
  156/   0 : =0xFFFFFFFFFFFFFF85        PGTOPH	= -123				; top of storage in page (H) / memory size (H)
  157/   0 : =0xFFFFFFFFFFFFFF86        PGTOPL	= -122				; top of storage in page (L) / memory size (L)
  158/   0 :                            
  159/   0 :                            ; -100	SUBSTK:init.H			; grows downwards, contains SPRVSR P3.H,
  160/   0 :                            ; -99	SUBSTK:init.L	
  161/   0 :                            ; -98	SUBSTK:top.H			; set to zero byte
  162/   0 :                            ; -97	SUBSTK:top.L			; set to zero byte
  163/   0 :                            ; -96	CASS routines
  164/   0 :                            ; -95	CASS routines
  165/   0 :                            ; -94	CASS routines
  166/   0 :                            ; -32	AEXSTK:top			; STBASE+AEXSTK (grows downwards)
  167/   0 : =0xFFFFFFFFFFFFFFE1        UFRACS	= -31				; counter for '#'s behind ',' (USING routines)
  168/   0 : =0xFFFFFFFFFFFFFFE2        UTOTAL	= -30				; total counter for '#'s (USING routines)
  169/   0 :                            ; NOTE:	next used to store actual SUBSTACK.L
  170/   0 : =0xFFFFFFFFFFFFFFE3        SUBOFF	= -29				; P2 STACK (L), for CALL/RTRN, init STKBASE+SUBSTK (0x1E)
  171/   0 : =0xFFFFFFFFFFFFFFE4        RNDY	= -28
  172/   0 : =0xFFFFFFFFFFFFFFE5        RNDX	= -27				; seeds for random number
  173/   0 : =0xFFFFFFFFFFFFFFE6        RNDF	= -26
  174/   0 : =0xFFFFFFFFFFFFFFE7        CHRNUM	= -25				; char counter within line buffer, init 72 chars, also pointer.H
  175/   0 :                            ; -24	PUTASC:bitcount			; also pointer.L
  176/   0 :                            ; -23	PUTASC, ABSWP, ALGEXP, PSHSWP	; temporary counter
  177/   0 :                            ; -22	CASW, GETLIN, FADD		; temporary storage
  178/   0 : =0xFFFFFFFFFFFFFFEB        COUNTR	= -21				; CASS routines, GETASC, USING routines
  179/   0 :                            ; -20	unknown				; P1.H : begin of actual program line
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 4 - 2024年05月30日 19時01分01秒


  180/   0 :                            ; -19	unknown				; P1.L
  181/   0 :                            ; -18	unknown
  182/   0 :                            ; -17	unknown
  183/   0 : =0xFFFFFFFFFFFFFFF0        P1HIGH	= -16				; P1 SPACE (H); P3 CASW (H), CASR (H)
  184/   0 : =0xFFFFFFFFFFFFFFF1        P1LOW	= -15				; P1 SPACE (L) to save cursor
  185/   0 :                            ; -14					; save P1.H
  186/   0 :                            ; -13					; save P1.L
  187/   0 :                            ; -12	unknown
  188/   0 :                            ; -11	unknown
  189/   0 : =0xFFFFFFFFFFFFFFF6        CURPG	= -10				; current page number
  190/   0 : =0xFFFFFFFFFFFFFFF7        NUMHI	= -9				; 16-bit number (H)
  191/   0 : =0xFFFFFFFFFFFFFFF8        NUMLO	= -8				; 16-bit number (L)
  192/   0 : =0xFFFFFFFFFFFFFFF9        ILCOFF	= -7				; P2 STACK (L), for ILCALL/ILRTRN, init STKBASE+ILCSTK (was 0xB1)
  193/   0 : =0xFFFFFFFFFFFFFFFA        FOROFF	= -6				; P2 STACK (L), for FOR/NEXT/STEP STACK, init STKBASE+FORSTK (was 0xE1)
  194/   0 : =0xFFFFFFFFFFFFFFFB        DOUOFF	= -5				; P2 STACK (L), for DO/UNTIL STACK, init STKBASE+DOSTAK (was 0xED)
  195/   0 : =0xFFFFFFFFFFFFFFFC        SBROFF	= -4				; P2 STACK (L), for GOSUB/RETURN, init STKBASE+SBRSTK (was 0xFD)
  196/   0 : =0xFFFFFFFFFFFFFFFD        AEXOFF	= -3				; P2 STACK (L), for arithmetics, init STKBASE+AEXSTK (0x60)
  197/   0 :                            ; -2	known				; general temp storage (H), init ILTBL.H
  198/   0 :                            ; -1	known				; general temp storage (L), init ILTBL.L
  199/   0 :                            ; 0	known				; character limit in line buffer (72)
  200/   0 :                            ; 1	unknown
  201/   0 :                            ; 2	unknown
  202/   0 :                            ; 3	unknown
  203/   0 :                            ; 4	unknown
  204/   0 :                            ; 5	unknown
  205/   0 :                            ; 6	unknown
  206/   0 :                            ; 7	unknown
  207/   0 :                            ; 8	unknown
  208/   0 :                            ; 12	unknown
  209/   0 :                            ; 13	unknown
  210/   0 :                            ; 30	SUBSTK.top (from STKBASE on, not STKBASE+STKMID)
  211/   0 :                            ; 42	ILCSTK.top (grows downwards)
  212/   0 :                            ; 90	FORSTK.top (grows downwards)
  213/   0 :                            ; 102	DOSTAK.top (grows downwards)
  214/   0 :                            ; 118	SBRSTK.top (grows downwards)
  215/   0 :                            	; NOTE:	Downwards offset 119 begin six internal stacks, see above
  216/   0 :                            ; 119	STKP3.H	= 119			; KBPLUS
  217/   0 :                            ; 120	STKP3.L	= 120			; KBPLUS
  218/   0 :                            ; 121	STKP1.H	= 121			; KBPLUS
  219/   0 :                            ; 122	STKP1.L	= 122			; KBPLUS
  220/   0 :                            ; 123	STKP2.H	= 123			; KBPLUS
  221/   0 :                            ; 124	STKP2.L	= 124			; KBPLUS
  222/   0 : =0x7D                      ERRNUMH	= 125				; line number (H) for error message
  223/   0 : =0x7E                      ERRNUML = 126				; line number (L) for error message
  224/   0 : =0x7F                      BASMODE	= 127				; program/run mode INCMD with _QUMRK
  225/   0 :                            
  226/   0 :                            ; System constants.
  227/   0 : =0xFFFFFFFFFFFFFF80        EREG	= -128				; the extension register
  228/   0 :                            
  229/   0 :                            ; Misc constants.
  230/   0 : =0x3                       _CTLC	= 0x03				; ctrl-c (BREAK)
  231/   0 : =0x8                       _BS	= 0x08				; ctrl-h (backspace)
  232/   0 : =0x9                       _HTAB	= 0x09				; (hor.) TAB
  233/   0 : =0xA                       _LF	= 0x0A				; ctrl-j (line feed)
  234/   0 : =0xB                       _CTLK	= 0x0B				; ctrl-k (^Kill, rubout one char, also used as <vtab>)
  235/   0 : =0xC                       _CTLL	= 0x0C				; ctrl-l (one char to the ^Left, also used as <ff>)
  236/   0 : =0xC                       _FF	= 0x0C				; form feed (clear screen)
  237/   0 : =0xD                       _CR	= 0x0D				; ctrl-m (carriage return / enter)
  238/   0 : =0xF                       _CTLO	= 0x0F				; ctrl-o (m^Ove and insert character)
  239/   0 : =0x12                      _CTLR	= 0x12				; ctrl-r (one char to the ^Right)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 5 - 2024年05月30日 19時01分01秒


  240/   0 : =0x18                      _CTLX	= 0x18				; ctrl-x (e^Xit, cancel input and start anew)
  241/   0 : ='>'                       _PRMPT	= '>'				; the prompt
  242/   0 : ='?'                       _QMARK	= '?'				; question mark (for input)
  243/   0 : =0x80                      INCMD	= 0x80				; "in command mode" flag
  244/   0 :                            
  245/   0 : =>UNDEFINED                	IFDEF USETTY
  246/   0 :                            ; Select desired baud rate or 0 for original default.
  247/   0 :                            	IFNDEF BAUD
  248/   0 :                            BAUD	= 1200
  249/   0 : [247]                      	ENDIF
  250/   0 :                            	IF BAUD == 0
  251/   0 :                            TTY_B1	= 0xC2
  252/   0 :                            TTY_B2	= 0x00
  253/   0 :                            TTY_B3	= 0x76
  254/   0 :                            TTY_B4	= 0x01
  255/   0 :                            TTY_B5	= 0x01
  256/   0 :                            TTY_B6	= 0x30
  257/   0 :                            TTY_B7	= 0x03
  258/   0 :                            TTY_B8	= 0x5C
  259/   0 :                            TTY_B9	= 0x01
  260/   0 : [250]                      	ENDIF
  261/   0 :                            	IF BAUD == 110
  262/   0 :                            TTY_B1	= 0x57
  263/   0 :                            TTY_B2	= 0x04
  264/   0 :                            TTY_B3	= 0x7E
  265/   0 :                            TTY_B4	= 0x08
  266/   0 :                            TTY_B5	= 0x08
  267/   0 :                            TTY_B6	= 0xFF
  268/   0 :                            TTY_B7	= 0x17
  269/   0 :                            TTY_B8	= 0x8A
  270/   0 :                            TTY_B9	= 0x08
  271/   0 : [261]                      	ENDIF
  272/   0 :                            	IF BAUD == 300
  273/   0 :                            TTY_B1	= 0x76
  274/   0 :                            TTY_B2	= 0x01
  275/   0 :                            TTY_B3	= 0xE5
  276/   0 :                            TTY_B4	= 0x02
  277/   0 :                            TTY_B5	= 0x06
  278/   0 :                            TTY_B6	= 0x64
  279/   0 :                            TTY_B7	= 0x06
  280/   0 :                            TTY_B8	= 0xF0
  281/   0 :                            TTY_B9	= 0x02
  282/   0 : [272]                      	ENDIF
  283/   0 :                            	IF BAUD == 600
  284/   0 :                            TTY_B1	= 0xA7
  285/   0 :                            TTY_B2	= 0x00
  286/   0 :                            TTY_B3	= 0x45
  287/   0 :                            TTY_B4	= 0x01
  288/   0 :                            TTY_B5	= 0x04
  289/   0 :                            TTY_B6	= 0x25
  290/   0 :                            TTY_B7	= 0x03
  291/   0 :                            TTY_B8	= 0x50
  292/   0 :                            TTY_B9	= 0x01
  293/   0 : [283]                      	ENDIF
  294/   0 :                            	IF BAUD == 1200
  295/   0 :                            TTY_B1	= 0x3D
  296/   0 :                            TTY_B2	= 0x00
  297/   0 :                            TTY_B3	= 0x76
  298/   0 :                            TTY_B4	= 0x00
  299/   0 :                            TTY_B5	= 0x02
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 6 - 2024年05月30日 19時01分01秒


  300/   0 :                            TTY_B6	= 0x86
  301/   0 :                            TTY_B7	= 0x01
  302/   0 :                            TTY_B8	= 0x81
  303/   0 :                            TTY_B9	= 0x00
  304/   0 : [294]                      	ENDIF
  305/   0 :                            	IF BAUD == 2400
  306/   0 :                            TTY_B1	= 0xBB
  307/   0 :                            TTY_B2	= 0x00
  308/   0 :                            TTY_B3	= 0x34
  309/   0 :                            TTY_B4	= 0x01
  310/   0 :                            TTY_B5	= 0x01
  311/   0 :                            TTY_B6	= 0x99
  312/   0 :                            TTY_B7	= 0x01
  313/   0 :                            TTY_B8	= 0x44
  314/   0 :                            TTY_B9	= 0x01
  315/   0 : [305]                      	ENDIF
  316/   0 : [245]                      	ENDIF
  317/   0 :                            
  318/   0 :                            ; Important bits.
  319/   0 : =0x1                       S_FLAG0	= 0x01				; tty "txd" pin in SR
  320/   0 : =0x10                      S_SENSEA = 0x10				; intr pin in SR
  321/   0 : =0x20                      S_SENSEB = 0x20				; tty "rxd" pin in SR
  322/   0 :                            
  323/   0 :                            ; Supervisor jumps using P3 offsetting.
  324/   0 : =0xD400                    SV_BASE		= BASE+0x0400		; which block is Supervisor at?
  325/   0 : =0xFFFFFFFFFFFFFFA2        STKPHI		= (RESTRT -SPRVSR +1)	; storage for stackpointer high
  326/   0 : =0xFFFFFFFFFFFFFFA0        SV_RESTRT	= (RESTRT -SPRVSR -1)
  327/   0 : =0xFFFFFFFFFFFFFFB4        SV_MSGOUT	= (MSGOUT -SPRVSR -1)
  328/   0 : =0xFFFFFFFFFFFFFFD6        SV_SPLOAD	= (SPLOAD -SPRVSR -1)
  329/   0 : =0x25                      SV_RTNEST	= (RTNEST -SPRVSR -1)
  330/   0 : =0x27                      SV_RTERRN	= (RTERRN -SPRVSR -1)
  331/   0 : =0x30                      SV_LINE		= (SPLINE -SPRVSR -1)
  332/   0 : =0x38                      SV_RTRN		= (SPRTN -SPRVSR -1)
  333/   0 : =0x3C                      SV_RTRN1	= (SPRTN1 -SPRVSR -1)
  334/   0 : =0x5B                      SV_RTFUNC	= (RTFUNC -SPRVSR -1)
  335/   0 : =0x6B                      SV_VALERR	= (VALERR -SPRVSR -1)
  336/   0 :                            
  337/   0 :                            ; I.L. control bits for Supervisor.
  338/   0 : =0x80                      JMPBIT		= 0x80
  339/   0 : =0x8000                    JMPBITH		= JMPBIT*256
  340/   0 : =0x40                      TSTBIT		= 0x40
  341/   0 : =0x4000                    TSTBITH		= TSTBIT*256
  342/   0 : =0x20                      CALBIT		= 0x20
  343/   0 : =0x2000                    CALBITH		= CALBIT*256
  344/   0 :                            
  345/   0 :                            
  346/   0 :                            ; Macros.
  347/   0 :                            JS	MACRO P,VAL			; Jump to Subroutine
  348/   0 :                            	 LDI	H(VAL-1)
  349/   0 :                            	 XPAH	P
  350/   0 :                            	 LDI	L(VAL-1)
  351/   0 :                            	 XPAL	P
  352/   0 :                            	 XPPC	P
  353/   0 :                            	ENDM
  354/   0 :                            
  355/   0 :                            LDPI	MACRO P,VAL			; Load Pointer
  356/   0 :                            	 LDI	L(VAL)
  357/   0 :                            	 XPAL	P
  358/   0 :                            	 LDI	H(VAL)
  359/   0 :                            	 XPAH	P
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 7 - 2024年05月30日 19時01分01秒


  360/   0 :                            	ENDM
  361/   0 :                            
  362/   0 : =>UNDEFINED                	IFDEF	KBPLUS
  363/   0 :                            SYSCALL	MACRO NUM			; perform kbplus system call
  364/   0 :                            	 XPPC	P3
  365/   0 :                            	 DB	NUM
  366/   0 :                            	ENDM
  367/   0 : [362]                      	ENDIF
  368/   0 :                            
  369/   0 : =>DEFINED                  	IFDEF	INTERNAL
  370/   0 :                            SYSCALL	MACRO NUM			; perform internal system call
  371/   0 :                            	 XPPC	P3
  372/   0 :                            	 DB	NUM
  373/   0 :                            	ENDM
  374/   0 : [369]                      	ENDIF
  375/   0 :                            
  376/   0 :                            TSTSTR	MACRO FAIL,A			; I.L. macro
  377/   0 :                            	 DB	H(FAIL - TSTBITH)
  378/   0 :                            	 DB	L(FAIL)
  379/   0 :                            	 DB	A
  380/   0 :                            	ENDM
  381/   0 :                            
  382/   0 :                            TSTNUM	MACRO FAIL			; I.L. macro
  383/   0 :                            	 DB	H(FAIL)
  384/   0 :                            	 DB	L(FAIL)
  385/   0 :                            	ENDM
  386/   0 :                            
  387/   0 :                            TSTVAR	MACRO ADR			; I.L. macro
  388/   0 :                            	 DB	H(ADR - CALBITH)
  389/   0 :                            	 DB	L(ADR)
  390/   0 :                            	ENDM
  391/   0 :                            
  392/   0 :                            GOTO	MACRO ADR			; I.L. go to I.L. subroutine
  393/   0 :                            	 DB	H(ADR - JMPBITH)
  394/   0 :                            	 DB	L(ADR)
  395/   0 :                            	ENDM
  396/   0 :                            
  397/   0 :                            ILCALL	MACRO ADR			; I.L. call I.L. subroutine
  398/   0 :                            	 DB	H(ADR - (JMPBITH + TSTBITH))
  399/   0 :                            	 DB	L(ADR)
  400/   0 :                            	ENDM
  401/   0 :                            
  402/   0 :                            ILRTRN	MACRO				; I.L. return from I.L. subroutine
  403/   0 :                            	 DB	0
  404/   0 :                            	ENDM
  405/   0 :                            
  406/   0 :                            DO	MACRO ADR			; I.L. - execute machine code
  407/   0 :                            	 IFNB	ADR
  408/   0 :                            	  DB	H(ADR)
  409/   0 :                            	  DB	L(ADR)
  410/   0 :                            	  SHIFT
  411/   0 :                            	  DO	ALLARGS
  412/   0 :                            	 ENDIF
  413/   0 :                            	ENDM
  414/   0 :                            
  415/   0 :                            CALL	MACRO ADR			; I.L. - call subroutine
  416/   0 :                            	 XPPC	P3
  417/   0 :                            	 DB	H(ADR)
  418/   0 :                            	 DB	L(ADR)
  419/   0 :                            	ENDM
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 8 - 2024年05月30日 19時01分01秒


  420/   0 :                            
  421/   0 :                            RTRN	MACRO				; I.L. - return from subroutine
  422/   0 :                            	 XPPC	P3
  423/   0 :                            	 DB	0
  424/   0 :                            	ENDM
  425/   0 :                            
  426/   0 :                            MESG	MACRO A,B			; I.L. - create message string
  427/   0 :                            	 DB	A
  428/   0 :                            	 IFNB	B
  429/   0 :                            	  DB	B|0x80
  430/   0 :                            	 ENDIF
  431/   0 :                            	ENDM
  432/   0 :                            
  433/   0 :                            MESGCR	MACRO A				; message string terminated by <cr>
  434/   0 :                            	 DB	A
  435/   0 :                            	 DB	_CR
  436/   0 :                            	ENDM
  437/   0 :                            
  438/   0 :                            TOKEN	MACRO A,B,C			; I.L. - create token table entry
  439/   0 :                            	 IF A == 0x80|79
  440/   0 :                            	  ; Convert a T_STAR to the more common '^' symbol.
  441/   0 :                            	  ; NOTE: if a token is added or deleted, DO NOT forget to update this!
  442/   0 :                            	  DB	'^'
  443/   0 :                            	 ELSE
  444/   0 :                            	  DB	A
  445/   0 :                            	 ENDIF
  446/   0 :                            	 DB	B
  447/   0 :                            	 DB	C|0x80
  448/   0 :                            	ENDM
  449/   0 :                            
  450/   0 :                            
  451/   0 :                            ;**************************************
  452/   0 :                            ;*      NIBLFP - Initialization       *
  453/   0 :                            ;**************************************
  454/D000 :                            	ORG	BASE
  455/D000 : 08                         RESET:	NOP				; dummy byte
  456/D001 : 90 1F                      	JMP	ENTER
  457/D003 : 0D 4E 49 42 4C 46 50 20 56 VERMSG:	DB	_CR,"NIBLFP VERSION "
      D00C : 45 52 53 49 4F 4E 20      
  458/D013 : (MACRO)                    VERSTR:	MESGCR	"2024/04/06"		; version ID
  458/D013 : 32 30 32 34 2F 30 34 2F 30          DB     "2024/04/06"
      D01C : 36                        
  458/D01D : 0D                                  DB     _CR
  459/D01E :                            
  460/D01E : =>UNDEFINED                	IFDEF	KBPLUS
  461/D01E :                            ; Vectors for KBPLUS system calls
  462/D01E :                            	BIGENDIAN ON
  463/D01E :                            SCALLS:	DW	GETC			; call 1
  464/D01E :                            	DW	PUTC			; call 2
  465/D01E :                            	DW	PUTS			; call 3
  466/D01E :                            	DW	CASLD			; call 4
  467/D01E :                            	DW	CASSV			; call 5
  468/D01E : [460]                      	ENDIF
  469/D01E :                            
  470/D01E :                            ; Define input/output internally over lookup table
  471/D01E : =>DEFINED                  	IFDEF INTERNAL
  472/D01E :                            	BIGENDIAN ON
  473/D01E : D0 9B                      SCALLS:	DW	GETASC			; call 1
  474/D020 : D0 97                      	DW	PUTASC			; call 2
Will generate internal system calls.
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 9 - 2024年05月30日 19時01分01秒


  475/D022 :                            	MESSAGE	"Will generate internal system calls."
  476/D022 : [471]                              ENDIF
  477/D022 :                            
  478/D022 :                            	; On entry, we save the initial values of the P1, P2 and P3
  479/D022 :                            	; registers of any potential calling program, for example a
  480/D022 :                            	; system monitor.
  481/D022 :                            	;
  482/D022 : C4 7C                      ENTER:	LDI	H(STKBASE)		; set P1 to variables
  483/D024 : DC 01                      	ORI	H(VARSBUF)
  484/D026 : 35                         	XPAH	P1			; get high byte of monitor P1
  485/D027 : 01                         	XAE				; save prev P1.H in E
  486/D028 : C4 00                      	LDI	0
  487/D02A : 31                         	XPAL	P1			; get low byte of monitor P1
  488/D02B : C9 FA                      	ST	-6(P1)			; store byte at STKP1.L
  489/D02D : 40                         	LDE
  490/D02E : C9 F9                      	ST	-7(P1)			; store byte at STKP1.H
  491/D030 : C4 00                      	LDI	0
  492/D032 : C9 00                      	ST	(P1)			; clear first byte of variables' buffer
  493/D034 : C4 80                      	LDI	STKMID			; set P2 to STBASE+STKMID
  494/D036 : 32                         	XPAL	P2			; get low byte of monitor P2
  495/D037 : C9 FC                      	ST	-4(P1)			; store byte at STKP2.L
  496/D039 : C4 7C                      	LDI	H(STKBASE)
  497/D03B : 36                         	XPAH	P2			; get high byte of monitor P2
  498/D03C : C9 FB                      	ST	-5(P1)			; store byte at STKP2.H
  499/D03E : C4 80                      	LDI	L(SPRVSR)		; load P3 with supervisor
  500/D040 : 33                         	XPAL	P3			; get low of return address
  501/D041 : C9 F8                      	ST	-8(P1)			; store byte at STKP3.L
  502/D043 : C4 D4                      	LDI	H(SPRVSR)
  503/D045 : 37                         	XPAH	P3			; get high of return address
  504/D046 : C9 F7                      	ST	-9(P1)			; store byte at STKP3.H
  505/D048 : C5 01                      	LD	@1(P1)			; load zero value and advance P1 by one
  506/D04A : CA 9E                      	ST	-98(P2)			; clear two bytes at top of SUBSTACK
  507/D04C : CA 9F                      	ST	-97(P2)
  508/D04E : C4 1E                      	LDI	L(SUBSTK)
  509/D050 : CA E3                      	ST	SUBOFF(P2)		; store default top of CALL/RTRN stack
  510/D052 : C4 60                      	LDI	L(AEXSTK)		; initialize working stack
  511/D054 : CA FD                      	ST	AEXOFF(P2)		; store default offset to arithmetics stack
  512/D056 : C4 01                      	LDI	1
  513/D058 : CA F6                      	ST	CURPG(P2)		; set current page to first page
  514/D05A : C4 00                      	LDI	0
  515/D05C : CA 84                      	ST	PAGES(P2)		; set available pages to zero	
  516/D05E : C4 70                      	LDI	0x70			; set page 7
  517/D060 : CA 83                      	ST	RAMBAS(P2)		; store as first RAMBASE..
  518/D062 :                            	; NOTE:	P1 low was set to one above
  519/D062 : 35                         ENTR1:	XPAH	P1			; set P1.H with page value
  520/D063 : C4 0D                      	LDI	_CR			; set line terminator <cr>
  521/D065 : C9 00                      	ST	(P1)			; store in page
  522/D067 : C1 00                      	LD	(P1)			; re-load stored byte
  523/D069 : E4 0D                      	XRI	_CR			; is it <cr> ?
  524/D06B : 9C 1B                      	JNZ	ENTR4			; no ram, test next page
  525/D06D : C1 03                      	LD	3(P1)			; test for valid line counter
  526/D06F : 98 07                      	JZ	ENTR2			; certainly not
  527/D071 : 01                         	XAE
> > > NIBLFP.asm(528):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
  528/D072 : C1 80                      	LD	EREG(P1)		; load byte at end of line
  529/D074 : E4 0D                      	XRI	_CR			; is it <cr> ?
  530/D076 : 98 06                      	JZ	ENTR3			; valid line of existing program
  531/D078 : C4 FF                      ENTR2:	LDI	0xFF			; otherwise mark page as empty
  532/D07A : C9 01                      	ST	1(P1)			; store -1 as line number
  533/D07C : C9 02                      	ST	2(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 10 - 2024年05月30日 19時01分01秒


  534/D07E : AA 84                      ENTR3:	ILD	PAGES(P2)		; increase page counter
  535/D080 : 35                         	XPAH	P1
  536/D081 : 03                         	SCL
  537/D082 : FC 10                      	CAI	0x10			; corresponding value of one page
  538/D084 : 9C DC                      	JNZ	ENTR1
  539/D086 : 90 08                      	JMP	ENTR5			; page 0 reached
  540/D088 : 35                         ENTR4:	XPAH	P1
  541/D089 : 03                         	SCL
  542/D08A : FC 10                      	CAI	0x10			; corresponding value of one page
  543/D08C : CA 83                      	ST	RAMBAS(P2)		; store as new RAMBASE
  544/D08E : 9C D2                      	JNZ	ENTR1			; and test next page if not zero
  545/D090 : (MACRO)                    ENTR5:	JS	P1,RESTRT		; done with pre-init, start supervisor
  545/D090 : C4 D4                               LDI    H(RESTRT-1)
  545/D092 : 35                                  XPAH   P1
  545/D093 : C4 20                               LDI    L(RESTRT-1)
  545/D095 : 31                                  XPAL   P1
  545/D096 : 3D                                  XPPC   P1
  546/D097 :                            
  547/D097 :                            
  548/D097 : =>UNDEFINED                	IFNDEF KBPLUS
  549/D097 :                            ; NOTE:	Use internal routines for output/input.
  550/D097 :                            ;***************************
  551/D097 :                            ;*   PUT CHAR TO STDOUT    *
  552/D097 :                            ;***************************
  553/D097 :                            PUTASC:
  554/D097 : =>DEFINED                  	 IFDEF EMULA
  555/D097 : 20                         	  DB	WRCHAR
  556/D098 : =>DEFINED                  	  IFDEF	INTERNAL
  557/D098 : 3F                         	   XPPC	P3
  558/D099 : 90 FC                      	   JMP	PUTASC
  559/D09B : =>FALSE                    	  ELSE
  560/D09B :                            	   JMP	SV_RTRN(P3)
  561/D09B : [556]                      	  ENDIF
  562/D09B : [554]                      	 ENDIF
  563/D09B :                            
  564/D09B :                            ; FIXME: Former TTY routine, actually switched off
  565/D09B : =>FALSE                    	IF	0
  566/D09B :                            	 IFDEF	USETTY
  567/D09B :                            	  ANI	0x7F			; mask off parity bit
  568/D09B :                            	  XAE				; save in E
  569/D09B :                            	  ST	-127(P2)		; store old E in RAM
  570/D09B :                            	  LDI	TTY_B6			; set delay for start bit
  571/D09B :                            	  DLY	TTY_B7			;  (TTY_B6=30 and TTY_B7=03)
  572/D09B :                            	  CSA				; get status
  573/D09B :                            	  ORI	1			; set start bit (inverted logic)
  574/D09B :                            	  CAS				; set status
  575/D09B :                            	  LDI	9			; set bit count
  576/D09B :                            	  ST	-24(P2)			; store in RAM
  577/D09B :                            PUTAS1:	  LDI	TTY_B8			; set delay for 1 bit time
  578/D09B :                            	  DLY	TTY_B9			;  (TTY_B8=5C and TTY_B9=01)
  579/D09B :                            	  DLD	-24(P2)			; decrement bit count
  580/D09B :                            	  JZ	PUTAS2
  581/D09B :                            	  LDE				; prepare next bit
  582/D09B :                            	  ANI	1
  583/D09B :                            	  ST	-23(P2)
  584/D09B :                            	  XAE				; shift data right one bit
  585/D09B :                            	  RR
  586/D09B :                            	  XAE
  587/D09B :                            	  CSA				; set up output bit
  588/D09B :                            	  ORI	1
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 11 - 2024年05月30日 19時01分01秒


  589/D09B :                            	  XOR	-23(P2)
  590/D09B :                            	  CAS				; put bit to TTY
  591/D09B :                            	  JMP	PUTAS1
  592/D09B :                            PUTAS2:	  CSA				; set stop bit
  593/D09B :                            	  ANI	0xFE
  594/D09B :                            	  CAS
  595/D09B :                            	  LD	-127(P2)
  596/D09B :                            	  XAE
  597/D09B :                            	  IFDEF USE_SLOW
  598/D09B :                            	   XRI	_FF			; if this is not FormFeed
  599/D09B :                            	   JNZ	PUTAS3			; do short delay
  600/D09B :                            	   DLY	255			; else longer delay
  601/D09B :                            	   JMP	PUTAS4
  602/D09B :                            PUTAS3:	   ANI	0x60			; is it digit or letter ?
  603/D09B :                            	   JNZ	PUTAS4
  604/D09B :                            	   DLY	16
  605/D09B : [597]                      	  ENDIF
  606/D09B :                            PUTAS4:	  JMP	SV_RTRN(P3)
  607/D09B : [566]                      	 ENDIF
  608/D09B : [565]                      	ENDIF
  609/D09B :                            
  610/D09B : =>UNDEFINED                	IFDEF	USETTY
  611/D09B :                            ; NOTE:	Regular tty routine taken from kbplus
  612/D09B :                            	ST	-127(P2)		; save byte
  613/D09B :                            	XAE
  614/D09B :                            	LDI	TTY_B6
  615/D09B :                            	DLY	TTY_B7
  616/D09B :                            	CSA				; set output bit to logic 0
  617/D09B :                            	ORI	S_FLAG0			;  for start bit (note inversion)
  618/D09B :                            	CAS
  619/D09B :                            	LDI	9			; initialize bit count
  620/D09B :                            	ST	-24(P2)
  621/D09B :                            putc1:	LDI	TTY_B8			; delay 1 bit time
  622/D09B :                            	DLY	TTY_B9
  623/D09B :                            	DLD	-24(P2)			; decrement bit count
  624/D09B :                            	JZ	putc2
  625/D09B :                            	LDE				; prepare next bit
  626/D09B :                            	ANI	S_FLAG0			; mask FLAG0 bit
  627/D09B :                            	ST	-23(P2)
  628/D09B :                            	XAE				; shift data right 1 bit
  629/D09B :                            	SR
  630/D09B :                            	XAE
  631/D09B :                            	CSA				; set up output bit
  632/D09B :                            	ORI	S_FLAG0
  633/D09B :                            	XOR	-23(P2)
  634/D09B :                            	CAS				; put bit to TTY
  635/D09B :                            	JMP	putc1
  636/D09B :                            putc2:	CSA				; set stop bit
  637/D09B :                            	ANI	~S_FLAG0		; clear FLAG0 bit
  638/D09B :                            	CAS
  639/D09B :                            	ANI	S_SENSEB		; check for keyboard input
  640/D09B :                            	JNZ	putc3			; (note that input is not inverted)
  641/D09B :                            	LDI	(M_BRK-M_BASE)		; 'BREAK'
  642/D09B :                            	JMP	SV_MSGOUT(P3)
  643/D09B :                            putc3:	LD	-127(P2)		; restore saved byte
  644/D09B :                            	RTRN
  645/D09B : [610]                      	ENDIF
  646/D09B :                            
  647/D09B :                            ;***************************
  648/D09B :                            ;*   GET CHAR FROM STDIN   *
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 12 - 2024年05月30日 19時01分01秒


  649/D09B :                            ;***************************
  650/D09B :                            GETASC:
  651/D09B : =>DEFINED                  	 IFDEF EMULA
  652/D09B : 21                         	  DB	RDCHAR
  653/D09C : =>DEFINED                  	  IFDEF	INTERNAL
  654/D09C : 40                         	   LDE
  655/D09D : 3F                         	   XPPC	P3			; return
  656/D09E : 90 F7                      	   JMP	PUTASC
  657/D0A0 : =>FALSE                    	  ELSE
  658/D0A0 :                            	   XRI	_CTLC			; test for CONTROL-C
  659/D0A0 :                            	   JNZ	SV_RTRN(P3)
  660/D0A0 :                            	   LDI	(M_BRK-M_BASE)		; 'BREAK'
  661/D0A0 :                            	   JMP	SV_MSGOUT(P3)
  662/D0A0 : [653]                      	  ENDIF
  663/D0A0 : [651]                      	 ENDIF
  664/D0A0 :                            
  665/D0A0 :                            ; FIXME: Former TTY routine, actually switched off
  666/D0A0 : =>UNDEFINED                	 IFDEF	USETTY
  667/D0A0 :                            	  IF	0
  668/D0A0 :                            	  LDI	8			; set bit count
  669/D0A0 :                            	  ST	COUNTR(P2)
  670/D0A0 :                            GETAS1:	  CSA				; wait for start bit
  671/D0A0 :                            	  ANI	0x20
  672/D0A0 :                            	  JNZ	GETAS1
  673/D0A0 :                            	  LDI	TTY_B1			; delay 1/2 bit time
  674/D0A0 :                            	  DLY	TTY_B2			;  (TTY_B1=C2 and TTY_B2=00)
  675/D0A0 :                            	  CSA				; is start bit still there?
  676/D0A0 :                            	  ANI	S_SENSEB
  677/D0A0 :                            	  JNZ	GETAS1			; no
  678/D0A0 :                            GETAS2:	  LDI	TTY_B3			; delay bit time
  679/D0A0 :                            	  DLY	TTY_B4			;  (TTY_B3=76 and TTY_B4=01)
  680/D0A0 :                            	  CSA				; get bit (SENSEB)
  681/D0A0 :                            	  ANI	S_SENSEB
  682/D0A0 :                            	  JZ	GETAS3
  683/D0A0 :                            	  LDI	1
  684/D0A0 :                            GETAS3:	  RRL				; rotate into link
  685/D0A0 :                            	  XAE
  686/D0A0 :                            	  SRL				; shift into character
  687/D0A0 :                            	  XAE				; return char to E
  688/D0A0 :                            	  DLD	COUNTR(P2)		; decrement bit count
  689/D0A0 :                            	  JNZ	GETAS2			; loop until 0
  690/D0A0 :                            	  DLY	TTY_B5			; set delay (TTY_B5=01)
  691/D0A0 :                            	  LDE				; load character from E
  692/D0A0 :                            	  ANI	0x7F			; mask parity bit
  693/D0A0 :                            	  XAE
  694/D0A0 :                            	  LDE
  695/D0A0 :                            	  ANI	0x40			; test for uppercase
  696/D0A0 :                            	  JZ	GETAS4
  697/D0A0 :                            	  LDE
  698/D0A0 :                            	  ANI	0x5F			; convert to uppercase
  699/D0A0 :                            	  XAE
  700/D0A0 :                            GETAS4:	  LDE
  701/D0A0 :                            	  XRI	_CTLC			; test for CONTROL-C
  702/D0A0 :                            	  JNZ	GETAS5
  703/D0A0 :                            	  LDI	(M_BRK-M_BASE)		; 'BREAK'
  704/D0A0 :                            	  JMP	SV_MSGOUT(P3)
  705/D0A0 :                            GETAS5:   JMP	SV_RTRN(P3)
  706/D0A0 : [667]                      	  ENDIF
  707/D0A0 :                            
  708/D0A0 :                            ; NOTE:	Regular tty routine taken from kbplus
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 13 - 2024年05月30日 19時01分01秒


  709/D0A0 :                            	LDI	8			; set bit count
  710/D0A0 :                            	ST	COUNTR(P2)
  711/D0A0 :                            getc1:	CSA				; get status (wait for start bit)
  712/D0A0 :                            	ANI	S_SENSEB		; mask SENSEB bit
  713/D0A0 :                            	JNZ	getc1			; not set
  714/D0A0 :                            	LDI	TTY_B1			; delay 1/2 bit time
  715/D0A0 :                            	DLY	TTY_B2
  716/D0A0 :                            	CSA				; is start bit still there?
  717/D0A0 :                            	ANI	S_SENSEB		; mask SENSEB bit
  718/D0A0 :                            	JNZ	getc1			; no
  719/D0A0 :                            getc2:	LDI	TTY_B3			; delay bit time
  720/D0A0 :                            	DLY	TTY_B4
  721/D0A0 :                            	CSA				; get status
  722/D0A0 :                            	ANI	S_SENSEB		; mask SENSEB bit
  723/D0A0 :                            	JZ	getc3
  724/D0A0 :                            	LDI	1			; set "1" bit
  725/D0A0 :                            getc3:	RRL				; rotate \0 or \1 into link
  726/D0A0 :                            	XAE
  727/D0A0 :                            	SRL				; shift into character
  728/D0A0 :                            	XAE				; return char to E
  729/D0A0 :                            	DLD	COUNTR(P2)		; decrement bit count
  730/D0A0 :                            	JNZ	getc2			; loop until 0
  731/D0A0 :                            	DLY	TTY_B5
  732/D0A0 :                            	LDE				; AC has input character
  733/D0A0 :                            	ANI	0x7F			; strip parity bit
  734/D0A0 :                            	XAE
  735/D0A0 :                            	LDE
  736/D0A0 :                            	RTRN
  737/D0A0 : [666]                      	 ENDIF
  738/D0A0 : [548]                      	ENDIF
  739/D0A0 :                            
  740/D0A0 : =>TRUE                     	IF USE_CASS == 2
  741/D0A0 :                            ;**************************************
  742/D0A0 :                            ;*	Cassette I/O routines.        *
  743/D0A0 :                            ;**************************************
  744/D0A0 :                            ; NOTE: these will be moved to KBPLUS.
  745/D0A0 :                            ;
  746/D0A0 : =0x17                      CSPEED_A	= 0x17			; 1200 baud, 2MHz
  747/D0A0 : =0x1                       CSPEED_B	= 0x01
  748/D0A0 : =0x78                      CSPEED_C	= 0x78
  749/D0A0 : =0x0                       CSPEED_D	= 0x00
  750/D0A0 : =0x24                      CSPEED_E	= 0x24
  751/D0A0 : =0x1                       CSPEED_F	= 0x01
  752/D0A0 :                            
  753/D0A0 :                            ;****************************
  754/D0A0 :                            ;*  WRITE ONE BYTE TO TAPE  *
  755/D0A0 :                            ;****************************
  756/D0A0 :                            ;
  757/D0A0 : CA A0                      CASWR:	ST	-96(P2)			; store byte
  758/D0A2 : C4 0A                      	LDI	10			; set bit counter (data,2xstop)
  759/D0A4 : CA EB                      	ST	COUNTR(P2)		; store counter
  760/D0A6 : C4 00                      	LDI	0			; write 0 bit (start)
  761/D0A8 : 01                         	XAE
  762/D0A9 : 19                         	SIO
  763/D0AA : 01                         	XAE
  764/D0AB : BA A1                      	DLD	-95(P2)
  765/D0AD : C2 A0                      	LD	-96(P2)			; re-load byte
  766/D0AF : 01                         	XAE				; store in E
  767/D0B0 : C4 17                      CASWR1:	LDI	CSPEED_A		; delay one bit time
  768/D0B2 : 8F 01                      	DLY	CSPEED_B
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 14 - 2024年05月30日 19時01分01秒


  769/D0B4 : C2 A2                      	LD	-94(P2)			; get user-spec delay value
  770/D0B6 : CA A1                      	ST	-95(P2)			; store it
  771/D0B8 : BA A1                      CASWR2:	DLD	-95(P2)			; decrease until zero
  772/D0BA : 9C FC                      	JNZ	CASWR2			; user-delay done?
  773/D0BC : 19                         	SIO				; yes, send next bit
  774/D0BD : 40                         	LDE				; load E
  775/D0BE : DC 80                      	ORI	0x80			; set highest bit (set up stop bit..)
  776/D0C0 : 01                         	XAE				; save back to E
  777/D0C1 : BA EB                      	DLD	COUNTR(P2)		; decrease bit counter
  778/D0C3 : 9C EB                      	JNZ	CASWR1			; loop until done
  779/D0C5 : 3F                         	XPPC	P3			; return to caller
  780/D0C6 : 90 D8                      	JMP	CASWR			; for repeated calls
  781/D0C8 :                            
  782/D0C8 :                            ;*****************************
  783/D0C8 :                            ;*  READ ONE BYTE FROM TAPE  *
  784/D0C8 :                            ;*****************************
  785/D0C8 :                            ;
  786/D0C8 : C4 FF                      CASRD:	LDI	0xFF			; send out 1-bit (so no start bit!)
  787/D0CA : 01                         	XAE
  788/D0CB : 19                         	SIO
  789/D0CC : 40                         	LDE				; load the bit received
  790/D0CD : 94 02                      	JP	CASRD1			; we received a 0-bit (start) !
  791/D0CF : 90 F7                      	JMP	CASRD			; try again
  792/D0D1 : C4 78                      CASRD1:	LDI	CSPEED_C		; delay one half bit time
  793/D0D3 : 8F 00                      	DLY	CSPEED_D
  794/D0D5 : C4 FF                      	LDI	0xFF			; set 1-bit for reading
  795/D0D7 : 01                         	XAE
  796/D0D8 : C2 A2                      	LD	-94(P2)
  797/D0DA : 1C                         	SR
  798/D0DB : CA A1                      	ST	-95(P2)
  799/D0DD : BA A1                      CASRD2:	DLD	-95(P2)
  800/D0DF : 9C FC                      	JNZ	CASRD2
  801/D0E1 : C4 08                      	LDI	8			; set bit counter
  802/D0E3 : CA EB                      	ST	COUNTR(P2)		; store bit counter
  803/D0E5 : C2 A2                      CASRD3:	LD	-94(P2)
  804/D0E7 : CA A1                      	ST	-95(P2)
  805/D0E9 : C4 24                      	LDI	CSPEED_E		; delay one bit time
  806/D0EB : 8F 01                      	DLY	CSPEED_F
  807/D0ED : BA A1                      CASRD4:	DLD	-95(P2)
  808/D0EF : 9C FC                      	JNZ	CASRD4
  809/D0F1 : 19                         	SIO				; read one bit
  810/D0F2 : BA EB                      	DLD	COUNTR(P2)		; decrease bit counter
  811/D0F4 : 9C EF                      	JNZ	CASRD3			; not done yet, do next
  812/D0F6 : C2 A2                      	LD	-94(P2)			; delay for stop bits
  813/D0F8 : CA A1                      	ST	-95(P2)
  814/D0FA : BA A1                      CASRD5:	DLD	-95(P2)
  815/D0FC : 9C FC                      	JNZ	CASRD5
  816/D0FE : 40                         	LDE				; load byte into AC
  817/D0FF : 3F                         	XPPC	P3			; return to caller
  818/D100 : 90 C6                      	JMP	CASRD			; for repeated calls
  819/D102 :                            
  820/D102 :                            ;**************************
  821/D102 :                            ;*  WRITE MEMORY TO TAPE  *
  822/D102 :                            ;**************************
  823/D102 :                            ;FIXME: used P2 STACK offset -33, -34, -35, -36, -37, -38 may interfere with AEX STACK.
  824/D102 : C4 D0                      CASW:	LDI	H(CASWR-1)		; set P3 to CASWR, save old P3
  825/D104 : 37                         	XPAH	P3
  826/D105 : CA F0                      	ST	-16(P2)
  827/D107 : C4 9F                      	LDI	L(CASWR-1)
  828/D109 : 33                         	XPAL	P3
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 15 - 2024年05月30日 19時01分01秒


  829/D10A : CA F1                      	ST	-15(P2)
  830/D10C : C2 DE                      	LD	-34(P2)			; load start of program H
  831/D10E : CA DA                      	ST	-38(P2)			; store
  832/D110 : 35                         	XPAH	P1			; set P1.H
  833/D111 : C2 DF                      	LD	-33(P2)			; load start of program L
  834/D113 : CA DB                      	ST	-37(P2)			; store
  835/D115 : 31                         	XPAL	P1			; set P1.L
  836/D116 : C2 DE                      	LD	-34(P2)			; load start.H
  837/D118 : 3F                         	XPPC	P3			; write byte to tape
  838/D119 : C2 DF                      	LD	-33(P2)			; load start.L
  839/D11B : 3F                         	XPPC	P3			; write byte to tape
  840/D11C : C2 DC                      	LD	-36(P2)			; load end.H
  841/D11E : 3F                         	XPPC	P3			; write byte to tape
  842/D11F : C2 DD                      	LD	-35(P2)			; load end.L
  843/D121 : 3F                         	XPPC	P3			; write byte to tape
  844/D122 : C4 20                      CASW1:	LDI	32			; set byte counter for block
  845/D124 : CA EA                      	ST	-22(P2)			; store
  846/D126 : C4 00                      	LDI	0			; initialize checksum
  847/D128 : CA E9                      	ST	-23(P2)			; store
  848/D12A : 02                         	CCL				; clear carry
  849/D12B : C1 00                      CASW2:	LD	(P1)			; load byte from program
  850/D12D : F2 E9                      	ADD	-23(P2)			; add to checksum
  851/D12F : CA E9                      	ST	-23(P2)
  852/D131 : C1 00                      	LD	(P1)			; re-load byte from program
  853/D133 : 3F                         	XPPC	P3			; write byte to tape
  854/D134 : C2 DA                      	LD	-38(P2)			; load high byte of addr
  855/D136 : E2 DC                      	XOR	-36(P2)			; are we done yet?
  856/D138 : 9C 0F                      	JNZ	CASW3			; no, do next
  857/D13A :                            ;FIXME: we should check -37(P2), because we do not save LAST byte now!!
  858/D13A : 31                         	XPAL	P1			; compare low byte of addr
  859/D13B : E2 DD                      	XOR	-35(P2)
  860/D13D : 9C 0A                      	JNZ	CASW3			; not done yet
  861/D13F : C2 E9                      	LD	-23(P2)			; done, load checksum byte
  862/D141 : 3F                         	XPPC	P3			; write byte to tape
  863/D142 : C2 F0                      	LD	-16(P2)			; restore P3 to old value
  864/D144 : 37                         	XPAH	P3
  865/D145 : C2 F1                      	LD	-15(P2)
  866/D147 : 33                         	XPAL	P3
  867/D148 : 3F                         	XPPC	P3			; return
  868/D149 : AA DB                      CASW3:	ILD	-37(P2)			; end of current block
  869/D14B : 9C 04                      	JNZ	CASW4
  870/D14D : 35                         	XPAH	P1
  871/D14E : AA DA                      	ILD	-38(P2)
  872/D150 : 35                         	XPAH	P1
  873/D151 : 31                         CASW4:	XPAL	P1
  874/D152 : BA EA                      	DLD	-22(P2)			; decrease block byte counter
  875/D154 : 9C D5                      	JNZ	CASW2			; not done yet, do next byte in block
  876/D156 : C2 E9                      	LD	-23(P2)			; block done, load checksum
  877/D158 : 3F                         	XPPC	P3			; write byte to tape
  878/D159 : 90 C7                      	JMP	CASW1			; do next block
  879/D15B :                            
  880/D15B :                            ;***************************
  881/D15B :                            ;*  READ MEMORY FROM TAPE  *
  882/D15B :                            ;***************************
  883/D15B :                            ;
  884/D15B : C4 D0                      CASR:	LDI	H(CASRD-1)		; set P3 to CASRD, save old P3
  885/D15D : 37                         	XPAH	P3
  886/D15E : CA F0                      	ST	-16(P2)
  887/D160 : C4 C7                      	LDI	L(CASRD-1)
  888/D162 : 33                         	XPAL	P3
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 16 - 2024年05月30日 19時01分01秒


  889/D163 : CA F1                      	ST	-15(P2)
  890/D165 : 3F                         	XPPC	P3			; read byte from cassette
  891/D166 : CA DE                      	ST	-34(P2)			; store start addr H
  892/D168 : CA F7                      	ST	NUMHI(P2)		; save to P1.H
  893/D16A : 3F                         	XPPC	P3			; read byte from cassette
  894/D16B : CA DF                      	ST	-33(P2)			; store start addr L
  895/D16D : CA F8                      	ST	NUMLO(P2)		; save to P1.L
  896/D16F : 3F                         	XPPC	P3			; read byte from cassette
  897/D170 : CA DC                      	ST	-36(P2)			; store end addr H
  898/D172 : 3F                         	XPPC	P3			; read byte from cassette
  899/D173 : CA DD                      	ST	-35(P2)			; store end addr L
  900/D175 : C4 20                      CASR1:	LDI	32			; set block byte counter
  901/D177 : CA EA                      	ST	-22(P2)			; store
  902/D179 : C4 00                      	LDI	0			; initialize checksum
  903/D17B : CA E9                      	ST	-23(P2)			; store
  904/D17D : 02                         	CCL				; clear carry
  905/D17E : C2 F8                      CASR2:	LD	NUMLO(P2)		; set P1 to program's current addr
  906/D180 : 31                         	XPAL	P1
  907/D181 : C2 F7                      	LD	NUMHI(P2)
  908/D183 : 35                         	XPAH	P1
  909/D184 : 3F                         	XPPC	P3			; read byte from cassette
  910/D185 : C9 00                      	ST	(P1)			; store in memory
  911/D187 : F2 E9                      	ADD	-23(P2)			; add to checksum
  912/D189 : CA E9                      	ST	-23(P2)
  913/D18B : 35                         	XPAH	P1			; check P1.H for all done
  914/D18C : E2 DC                      	XOR	-36(P2)
  915/D18E : 9C 11                      	JNZ	CASR4			; no, do next byte
  916/D190 : 31                         	XPAL	P1			; check P1.L for all done
  917/D191 : E2 DD                      	XOR	-35(P2)
  918/D193 : 9C 0C                      	JNZ	CASR4			; no, do next byte
  919/D195 : 3F                         	XPPC	P3			; read checksum from cassette
  920/D196 : E2 E9                      	XOR	-23(P2)			; check against current value
  921/D198 : 01                         CASR3:	XAE				; save AC
  922/D199 : C2 F0                      	LD	-16(P2)			; restore P3 to old value
  923/D19B : 37                         	XPAH	P3
  924/D19C : C2 F1                      	LD	-15(P2)
  925/D19E : 33                         	XPAL	P3
  926/D19F : 40                         	LDE				; restore AC
  927/D1A0 : 3F                         	XPPC	P3			; return
  928/D1A1 : AA F8                      CASR4:	ILD	NUMLO(P2)		; increase P1 value by one
  929/D1A3 : 9C 02                      	JNZ	CASR5
  930/D1A5 : AA F7                      	ILD	NUMHI(P2)
  931/D1A7 : BA EA                      CASR5:	DLD	-22(P2)			; decrease block byte counter
  932/D1A9 : 9C D3                      	JNZ	CASR2			; not zero, do next byte in block
  933/D1AB : 3F                         	XPPC	P3			; read checksum from cassette
  934/D1AC : E2 E9                      	XOR	-23(P2)			; check against current value
  935/D1AE : 9C E8                      	JNZ	CASR3			; whoops, a bad block!
  936/D1B0 : 90 C3                      	JMP	CASR1
  937/D1B2 : [740]                      	ENDIF
  938/D1B2 :                            
  939/D1B2 :                            ;*******************************************************
  940/D1B2 :                            ;*  Get 16-bit number (label) from BASIC program line  *
  941/D1B2 :                            ;*                and store on STACK.                  *
  942/D1B2 :                            ;*******************************************************
  943/D1B2 :                            ;
  944/D1B2 : C5 01                      SPRNUM:	LD	@1(P1)			; get byte from program and increase
  945/D1B4 : CA F7                      	ST	NUMHI(P2)		; save high byte of number
  946/D1B6 : C5 02                      	LD	@2(P1)			; get byte from program and advance by 2
  947/D1B8 : CA F8                      	ST	NUMLO(P2)		; save low byte of number
  948/D1BA :                            
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 17 - 2024年05月30日 19時01分01秒


  949/D1BA :                            ;*******************************************************
  950/D1BA :                            ;*        Print 16-bit number on STACK -9, -8          *
  951/D1BA :                            ;*         as decimal ASCII-representation.            *
  952/D1BA :                            ;*******************************************************;  
  953/D1BA :                            ;
  954/D1BA : C4 5A                      PRNUM:	LDI	L(AEXSTK)-6		; reserve six bytes on arithmetics stack
  955/D1BC : CA FD                      	ST	AEXOFF(P2)		; save actual AEXSTK.L for later use
  956/D1BE : 31                         	XPAL	P1
  957/D1BF : CA F1                      	ST	-15(P2)			; save P1.low 
  958/D1C1 : C3 A2                      	LD	STKPHI(P3)
  959/D1C3 : 35                         	XPAH	P1
  960/D1C4 : CA F0                      	ST	-16(P2)			; save P1.high
  961/D1C6 : C4 00                      	LDI	0
  962/D1C8 : C9 03                      	ST	3(P1)
  963/D1CA : C2 F8                      	LD	NUMLO(P2)
  964/D1CC : C9 02                      	ST	2(P1)
  965/D1CE : C2 F7                      	LD	NUMHI(P2)
  966/D1D0 : C9 01                      	ST	1(P1)
  967/D1D2 :                            ; NOTE:	Convert 16-bit integer into 4-byte float.
  968/D1D2 : C4 8E                      	LDI	0x8E			; load +14 and..
  969/D1D4 : C9 00                      	ST	(P1)			; store as exponent
  970/D1D6 : C1 01                      PNORM:	LD	1(P1)
  971/D1D8 : F1 01                      	ADD	1(P1)
  972/D1DA : E1 01                      	XOR	1(P1)
  973/D1DC : D4 80                      	ANI	0x80			; test bit7
  974/D1DE : 9C 1B                      	JNZ	PFNUM			; go, we are ready for printing
  975/D1E0 : C1 00                      	LD	(P1)			; normalize floating point number
  976/D1E2 : 98 17                      	JZ	PFNUM
  977/D1E4 : B9 00                      	DLD	(P1)			; decrease exponent..
  978/D1E6 : 02                         	CCL				; ..and shift mantissa one bit left
  979/D1E7 : C1 03                      	LD	3(P1)
  980/D1E9 : F1 03                      	ADD	3(P1)
  981/D1EB : C9 03                      	ST	3(P1)
  982/D1ED : C1 02                      	LD	2(P1)
  983/D1EF : F1 02                      	ADD	2(P1)
  984/D1F1 : C9 02                      	ST	2(P1)
  985/D1F3 : C1 01                      	LD	1(P1)
  986/D1F5 : F1 01                      	ADD	1(P1)
  987/D1F7 : C9 01                      	ST	1(P1)
  988/D1F9 : 90 DB                      	JMP	PNORM
  989/D1FB :                            ; NOTE: Print positive 4-byte floating point number
  990/D1FB : C4 00                      PFNUM:	LDI	0			; load zero
  991/D1FD : CA E7                      	ST	CHRNUM(P2)	; digit counter or sign ? 0 = positive ?
  992/D1FF : C4 20                      	LDI	' '			; load <space> for positive number
  993/D201 : C9 FB                      	ST	-5(P1)			; store 5 bytes lower (below scratch)
  994/D203 :                            ; NOTE:	only positive numbers are relevant, so fall through directly to ZERO
  995/D203 : C1 01                      	LD	1(P1)
  996/D205 : 98 22                      	JZ	ZERO			; is MSB of mantissa zero ?
  997/D207 : 94 17                      	JP	DIG10			; go, mantissa is positive
  998/D209 : C4 2D                      	LDI	'-'			; load <minus> for negative number
  999/D20B : C9 FB                      	ST	-5(P1)			; store 5 bytes lower (below scratch)
 1000/D20D : 03                         	SCL
 1001/D20E : C4 00                      	LDI	0			; negate number on AEX STACK
 1002/D210 : F9 03                      	CAD	3(P1)
 1003/D212 : C9 03                      	ST	3(P1)
 1004/D214 : C4 00                      	LDI	0
 1005/D216 : F9 02                      	CAD	2(P1)
 1006/D218 : C9 02                      	ST	2(P1)
 1007/D21A : C4 00                      	LDI	0
 1008/D21C : F9 01                      	CAD	1(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 18 - 2024年05月30日 19時01分01秒


 1009/D21E : C9 01                      	ST	1(P1)			; now positive BUT sometimes bit7 set!
 1010/D220 :                            ; NOTE:	now invert bit7 of exponent (strip characteristic)
 1011/D220 : C1 00                      DIG10:	LD	(P1)
 1012/D222 : E4 80                      	XRI	0x80
 1013/D224 :                            ; NOTE:	If number is positive, skip and fall through directly to ZERO
 1014/D224 : 94 03                      	JP	ZERO			; go, exponent is positive
 1015/D226 : (MACRO)                    	CALL	NEGEXP
 1015/D226 : 3F                                  XPPC   P3
 1015/D227 : F3                                  DB     H(NEGEXP)
 1015/D228 : D8                                  DB     L(NEGEXP)
 1016/D229 : C4 01                      ZERO:	LDI	1
 1017/D22B : C9 FC                      	ST	-4(P1)			; store 1 temporary
 1018/D22D : C1 01                      	LD	1(P1)			; load MANT1
 1019/D22F : 98 77                      	JZ	DIG19			; go, MANT1 is zero
 1020/D231 : C4 A0                      DIG13:	LDI	0xA0			; load b'10100000' 10<<4 ?
 1021/D233 : 01                         	XAE				; preserve in E
 1022/D234 : C1 03                      	LD	3(P1)			; copy number four bytes down in SCRATCH
 1023/D236 : C9 FF                      	ST	-1(P1)
 1024/D238 : C1 02                      	LD	2(P1)
 1025/D23A : C9 FE                      	ST	-2(P1)
 1026/D23C : C1 01                      	LD	1(P1)
 1027/D23E : C9 FD                      	ST	-3(P1)
 1028/D240 : C4 00                      	LDI	0			; set top mantissa to zero
 1029/D242 : C9 03                      	ST	3(P1)
 1030/D244 : C9 02                      	ST	2(P1)
 1031/D246 : C9 01                      	ST	1(P1)
 1032/D248 : C4 18                      	LDI	24			; shift 24 bit
 1033/D24A : C9 FA                      	ST	-6(P1)			; store bit counter
 1034/D24C : 03                         DIGLP:	SCL				; shift left loop
 1035/D24D : C1 FD                      	LD	-3(P1)			; load MANT1
 1036/D24F : FC 50                      	CAI	0x50			; subtract b'01010000' 10<<3 ?
 1037/D251 : 94 02                      	JP	DIG15			; go, greater / equal 10
 1038/D253 : 90 04                      	JMP	DIG16			; otherwise subtraction "failed"
 1039/D255 : C9 FD                      DIG15:	ST	-3(P1)			; store again
 1040/D257 : A9 03                      	ILD	3(P1)			; increase quotient
 1041/D259 : B9 FA                      DIG16:	DLD	-6(P1)			; decrease shift counter
 1042/D25B : 98 2A                      	JZ	DIG17			; zero, shift loop complete
 1043/D25D : 02                         	CCL
 1044/D25E : 40                         	LDE				; E holds 0xA0, see above
 1045/D25F : 70                         	ADE
 1046/D260 : 01                         	XAE
 1047/D261 : C1 FF                      	LD	-1(P1)
 1048/D263 : F1 FF                      	ADD	-1(P1)
 1049/D265 : C9 FF                      	ST	-1(P1)
 1050/D267 : C1 FE                      	LD	-2(P1)
 1051/D269 : F1 FE                      	ADD	-2(P1)
 1052/D26B : C9 FE                      	ST	-2(P1)
 1053/D26D : C1 FD                      	LD	-3(P1)
 1054/D26F : F1 FD                      	ADD	-3(P1)
 1055/D271 : C9 FD                      	ST	-3(P1)
 1056/D273 :                            ; NOTE: shifted E and mantissa 1 bit left
 1057/D273 : C1 03                      	LD	3(P1)
 1058/D275 : F1 03                      	ADD	3(P1)
 1059/D277 : C9 03                      	ST	3(P1)
 1060/D279 : C1 02                      	LD	2(P1)
 1061/D27B : F1 02                      	ADD	2(P1)
 1062/D27D : C9 02                      	ST	2(P1)
 1063/D27F : C1 01                      	LD	1(P1)
 1064/D281 : F1 01                      	ADD	1(P1)
 1065/D283 : C9 01                      	ST	1(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 19 - 2024年05月30日 19時01分01秒


 1066/D285 :                            ; NOTE: shifted quotient 1 bit left
 1067/D285 : 90 C5                      	JMP	DIGLP			; continue shift loop
 1068/D287 : C1 01                      DIG17:	LD	1(P1)			; comes here from shift loop
 1069/D289 : 94 10                      	JP	DIG18			; test bit7 of QUOTIENT1
 1070/D28B :                            ; NOTE:	bit7 set, so shift quotient right one bit (dividde by 2)
 1071/D28B : 02                         	CCL
 1072/D28C : 1F                         	RRL
 1073/D28D : C9 01                      	ST	1(P1)
 1074/D28F : C1 02                      	LD	2(P1)
 1075/D291 : 1F                         	RRL
 1076/D292 : C9 02                      	ST	2(P1)
 1077/D294 : C1 03                      	LD	3(P1)
 1078/D296 : 1F                         	RRL
 1079/D297 : C9 03                      	ST	3(P1)
 1080/D299 :                            ; NOTE:	compensate divide by increasing exp by one
 1081/D299 : A9 00                      	ILD	(P1)
 1082/D29B : 03                         DIG18:	SCL
 1083/D29C : C1 00                      	LD	(P1)
 1084/D29E : FC 04                      	CAI	4			; subtract exponent by 4
 1085/D2A0 : C9 00                      	ST	(P1)
 1086/D2A2 : 94 04                      	JP	DIG19
 1087/D2A4 : A9 FC                      	ILD	-4(P1)			; increase temporary
 1088/D2A6 : 90 89                      	JMP	DIG13
 1089/D2A8 : C1 FC                      DIG19:	LD	-4(P1)			; load temporary
 1090/D2AA : CA EB                      	ST	COUNTR(P2)		; store on STACK -21
 1091/D2AC : C2 E7                      	LD	CHRNUM(P2)		; load digit counter
 1092/D2AE : 9C 0F                      	JNZ	DIG20
 1093/D2B0 : 03                         	SCL
 1094/D2B1 : C4 06                      	LDI	6			; maximal digit limit ?
 1095/D2B3 : F9 FC                      	CAD	-4(P1)
 1096/D2B5 : 94 08                      	JP	DIG20			; not reached
 1097/D2B7 : B9 FC                      	DLD	-4(P1)			; decrease temporary..
 1098/D2B9 : CA E7                      	ST	CHRNUM(P2)		; ..store as digit counter
 1099/D2BB : C4 01                      	LDI	1
 1100/D2BD : C9 FC                      	ST	-4(P1)			; store one in temporary
 1101/D2BF : 02                         DIG20:	CCL
 1102/D2C0 : C1 01                      	LD	1(P1)
 1103/D2C2 : 1F                         	RRL
 1104/D2C3 : C9 01                      	ST	1(P1)
 1105/D2C5 : C1 02                      	LD	2(P1)
 1106/D2C7 : 1F                         	RRL
 1107/D2C8 : C9 02                      	ST	2(P1)
 1108/D2CA : C1 03                      	LD	3(P1)
 1109/D2CC : 1F                         	RRL
 1110/D2CD : C9 03                      	ST	3(P1)
 1111/D2CF : 40                         	LDE
 1112/D2D0 : 1F                         	RRL
 1113/D2D1 : 01                         	XAE
 1114/D2D2 : A9 00                      	ILD	(P1)
 1115/D2D4 : E4 86                      	XRI	0x86
 1116/D2D6 : 9C E7                      	JNZ	DIG20
 1117/D2D8 :                            ; shifted E and quotient 1 bit right until exp equal 6
 1118/D2D8 : 40                         	LDE
 1119/D2D9 : F4 02                      	ADI	2
 1120/D2DB : C9 01                      	ST	1(P1)
 1121/D2DD : C4 05                      	LDI	5
 1122/D2DF : C9 00                      	ST	(P1)
 1123/D2E1 :                            ; NOTE:	advance AEX STACK pointer to begin of number string
 1124/D2E1 : C5 FB                      	LD	@-5(P1)
 1125/D2E3 : 06                         	CSA
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 20 - 2024年05月30日 19時01分01秒


 1126/D2E4 :                            ; NOTE: Bit7 in status reg is carry/link.
 1127/D2E4 : 94 1E                      	JP	DEC
 1128/D2E6 : A9 08                      	ILD	8(P1)			; was before 3(P1)
 1129/D2E8 : 9C 1A                      	JNZ	DEC
 1130/D2EA : A9 07                      	ILD	7(P1)			; was before 2(P1)
 1131/D2EC : 9C 16                      	JNZ	DEC
 1132/D2EE : C4 31                      	LDI	'1'
 1133/D2F0 : CD FF                      	ST	@-1(P1)			; increase and store <one>
 1134/D2F2 : C2 E7                      	LD	CHRNUM(P2)		; load digit counter
 1135/D2F4 : 9C 08                      	JNZ	DIG21
 1136/D2F6 : C1 02                      	LD	2(P1)			; temporary, was before -4(P1) ?
 1137/D2F8 : E4 06                      	XRI	6
 1138/D2FA : 9C 08                      	JNZ	DEC
 1139/D2FC : F4 05                      	ADI	5
 1140/D2FE : F4 00                      DIG21:	ADI	0
 1141/D300 : CA E7                      	ST	CHRNUM(P2)		; store digit counter
 1142/D302 : 90 07                      	JMP	PEXP
 1143/D304 : (MACRO)                    DEC:	CALL	BINDEC			; convert binary to decimal digits
 1143/D304 : 3F                                  XPPC   P3
 1143/D305 : F4                                  DB     H(BINDEC)
 1143/D306 : 32                                  DB     L(BINDEC)
 1144/D307 : C2 E7                      	LD	CHRNUM(P2)		; load digit counter
 1145/D309 : 98 28                      	JZ	PFNUMD 
 1146/D30B : 01                         PEXP:	XAE				; calculate decimal exponent
 1147/D30C : C4 45                      	LDI	'E'
 1148/D30E : CD FF                      	ST	@-1(P1)			; store 'E' for exponent
 1149/D310 : 40                         	LDE				; E holds exponent
 1150/D311 : 94 04                      	JP	PEXP1			; positive exponent ?
 1151/D313 : C4 2D                      	LDI	'-'
 1152/D315 : CD FF                      	ST	@-1(P1)			; store <minus> for negative exponent
 1153/D317 : 03                         PEXP1:	SCL
 1154/D318 : 40                         	LDE
 1155/D319 : D4 7F                      	ANI	0x7F			; strip characteristic
 1156/D31B : FC 0A                      	CAI	10			; subtract 10
 1157/D31D : 94 02                      	JP	PEXP2			; exponent is equal / greater 10
 1158/D31F : 90 0E                      	JMP	PEXPD
 1159/D321 : 01                         PEXP2:	XAE
 1160/D322 : C4 30                      	LDI	'0'
 1161/D324 : CD FF                      	ST	@-1(P1)			; decrease and store <zero>
 1162/D326 : A9 00                      PEXP3:	ILD	(P1)			; increase digit
 1163/D328 : 40                         	LDE
 1164/D329 : FC 0A                      	CAI	10			; subtract 10 while positive and increase counter
 1165/D32B : 01                         	XAE
 1166/D32C : 40                         	LDE
 1167/D32D : 94 F7                      	JP	PEXP3			; exponent still equal / greater 10
 1168/D32F : F4 3A                      PEXPD:	ADI	'9'+1			; calculate ASCII value of latest digit
 1169/D331 : CD FF                      	ST	@-1(P1)			; decrease and store ASCII digit
 1170/D333 : C4 00                      PFNUMD:	LDI	0			; load <null>
 1171/D335 : CD FF                      	ST	@-1(P1)			; decrease P1 and store as string delimiter
 1172/D337 : C2 FD                      	LD	AEXOFF(P2)
 1173/D339 : 31                         	XPAL	P1
 1174/D33A : C4 5E                      	LDI	L(AEXSTK)-2		; let two bytes free for 16-bit number
 1175/D33C : CA FD                      	ST	AEXOFF(P2)		; reset arithmetics stack
 1176/D33E : C5 FB                      	LD	@-5(P1)			; skip after stored floating point number
 1177/D340 : =>DEFINED                  PTNUM:	IFDEF	SCALLS
 1178/D340 : (MACRO)                    	 SYSCALL	2
 1178/D340 : 3F                                  XPPC   P3
 1178/D341 : 02                                  DB     2
 1179/D342 : =>FALSE                    	ELSE
 1180/D342 :                            	 CALL	PUTASC
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 21 - 2024年05月30日 19時01分01秒


 1181/D342 : [1177]                     	ENDIF
 1182/D342 : C5 FF                      	LD	@-1(P1)
 1183/D344 : 9C FA                      	JNZ	PTNUM			; loop until <null>
 1184/D346 : C2 F1                      PTEND:	LD	-15(P2)			; restore P1 and return
 1185/D348 : 31                         	XPAL	P1
 1186/D349 : C2 F0                      	LD	-16(P2)
 1187/D34B : 35                         	XPAH	P1
 1188/D34C : (MACRO)                    	RTRN
 1188/D34C : 3F                                  XPPC   P3
 1188/D34D : 00                                  DB     0
 1189/D34E :                            
 1190/D34E : =>FALSE                    	IF	0
 1191/D34E :                            ; NOTE: Old PRNUM routine
 1192/D34E :                            	LDI	' '			; positive, store leading space
 1193/D34E :                            	ST	-5(P1)			; save as prefix for number
 1194/D34E :                            	LDI	-6			; load index of first digit
 1195/D34E :                            	ST	CHRNUM(P2)		; store as digit counter
 1196/D34E :                            	LD	NUMLO(P2)
 1197/D34E :                            	ST	-3(P1)
 1198/D34E :                            	LD	NUMHI(P2)		; load 16-bit number..
 1199/D34E :                            	ST	-4(P1)			; and put as dividend on AEX STACK
 1200/D34E :                            ; FIXME: Negating number is omitted (not needed, should never happen.)
 1201/D34E :                            	IF	0
 1202/D34E :                            	 JP	DIV
 1203/D34E :                            	 LDI	'-'			; negative, so store <minus>
 1204/D34E :                            	 ST	-5(P1)			; save as prefix for number
 1205/D34E :                            	 SCL
 1206/D34E :                            	 LDI	0			; negate number on AEX STACK
 1207/D34E :                            	 CAD	NUMLO(P2)
 1208/D34E :                            	 ST	-3(P1)
 1209/D34E :                            	 LDI	0
 1210/D34E :                            	 CAD	NUMHI(P2)
 1211/D34E :                            	 ST	-4(P1)
 1212/D34E : [1201]                     	ENDIF
 1213/D34E :                            ; NOTE: Place for quotient is reserved at -2 and -1 of AEX STACK.
 1214/D34E :                            DIV:	LDI	0			; clear quotient
 1215/D34E :                            	ST	-1(P1)
 1216/D34E :                            	ST	-2(P1)
 1217/D34E :                            	XAE				; set E to zero
 1218/D34E :                            	LDI	16			; shift 16 bit
 1219/D34E :                            	ST	-6(P1)			; store as bit counter below number
 1220/D34E :                            DIVLP:	CCL
 1221/D34E :                            	LD	-1(P1)			; shift 4 byte left one bit
 1222/D34E :                            	ADD	-1(P1)
 1223/D34E :                            	ST	-1(P1)
 1224/D34E :                            	LD	-2(P1)
 1225/D34E :                            	ADD	-2(P1)
 1226/D34E :                            	ST	-2(P1)
 1227/D34E :                            	LD	-3(P1)
 1228/D34E :                            	ADD	-3(P1)
 1229/D34E :                            	ST	-3(P1)
 1230/D34E :                            	LD	-4(P1)
 1231/D34E :                            	ADD	-4(P1)
 1232/D34E :                            	ST	-4(P1)
 1233/D34E :                            	LDE
 1234/D34E :                            	ADE				; shift carry into E
 1235/D34E :                            	XAE
 1236/D34E :                            	LDE
 1237/D34E :                            	ADI	-10			; subtract 10
 1238/D34E :                            	JP	DIV1			; go, greater/equal 10
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 22 - 2024年05月30日 19時01分01秒


 1239/D34E :                            	JMP	DIV2			; otherwise subtraction "failed"
 1240/D34E :                            DIV1:	XAE
 1241/D34E :                            	ILD	-1(P1)			; increase quotient
 1242/D34E :                            DIV2:	DLD	-6(P1)			; decrease bit counter
 1243/D34E :                            	JNZ	DIVLP			; loop again
 1244/D34E :                            ; NOTE: AEX STACK -6 is now zero, serves as delimiter for ASCII string.
 1245/D34E :                            	DLD	CHRNUM(P2)		; decrease digit counter
 1246/D34E :                            	XAE				; put into E, A holds now remainder from divide
 1247/D34E :                            	ORI	'0'			; prepare ASCII value
 1248/D34E :                            	ST	EREG(P1)		; put it on AEX STACK
 1249/D34E :                            	LD	-1(P1)			; store incomplete quotient as new dividend
 1250/D34E :                            	ST	-3(P1)
 1251/D34E :                            	LD	-2(P1)
 1252/D34E :                            	ST	-4(P1)
 1253/D34E :                            	OR	-3(P1)
 1254/D34E :                            	JNZ	DIV			; loop, quotient not yet zero
 1255/D34E :                            	DLD	CHRNUM(P2)
 1256/D34E :                            	XAE
 1257/D34E :                            	LD	-5(P1)			; load prefix for number
 1258/D34E :                            	ST	@EREG(P1)		; advance stack to begin of number string and store
 1259/D34E :                            PRNT:	LD	@1(P1)			; load digit from stack and increase
 1260/D34E :                            	JZ	PNEND			; zero ends printing, see above
 1261/D34E :                            	IFDEF	SCALLS
 1262/D34E :                            	 SYSCALL	2
 1263/D34E :                            	ELSE
 1264/D34E :                            	 CALL	PUTASC
 1265/D34E : [1261]                     	ENDIF
 1266/D34E :                            	JMP	PRNT
 1267/D34E :                            PNEND:	LD	-15(P2)			; restore P1 and return
 1268/D34E :                            	XPAL	P1
 1269/D34E :                            	LD	-16(P2)
 1270/D34E :                            	XPAH	P1
 1271/D34E :                            	RTRN
 1272/D34E : [1190]                     	ENDIF
 1273/D34E :                            
 1274/D34E :                            ;***************************
 1275/D34E :                            ;*  FREE SPACE IN D BLOCK  *
 1276/D34E :                            ;***************************
 1277/D34E :                            
 1278/D34E :                            
 1279/D34E :                            ;***************************
 1280/D34E :                            ;*  START OF NIBLFP BASIC  *
 1281/D34E :                            ;***************************
 1282/D34E :                            ;
 1283/D34E :                            ; This block of code forms the core of the interpreter, centered
 1284/D34E :                            ; around the I.L. Supervisor. This routine, in the middle of the
 1285/D34E :                            ; block, handles most I.L. calls. Because of the limited jumping
 1286/D34E :                            ; capabilities of the SC/MP, we also abuse it to place often-used
 1287/D34E :                            ; routines very close around it, so we can 'reach' them using an
 1288/D34E :                            ; offset off the P3 register (which permanently points to this
 1289/D34E :                            ; core routine), effectively allowing us to address $xx00 through
 1290/D34E :                            ; $xxFF with a single mechanism.
 1291/D34E :                            ;
 1292/D34E :                            ; Because of the above, THIS CODE MUST START at a $xx00-based
 1293/D34E :                            ; offset in memory, with the Supervisor at offset $0080 for a
 1294/D34E :                            ; maximized jump reach.
 1295/D34E :                            ;
 1296/D34E :                            ; Initialization code can either jump to INIT ($xx00), or directly
 1297/D34E :                            ; to the RESTRT routine. NOTE that because of jump limitations and
 1298/D34E :                            ; other "fun stuff", code here should not be changed unless you
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 23 - 2024年05月30日 19時01分01秒


 1299/D34E :                            ; (really!) know what you are doing.
 1300/D34E :                            
 1301/D34E :                            ; Following for two-byte SYSCALLs taken from a lookup table.
 1302/D34E : =>DEFINED                  	IFDEF	SCALLS
 1303/D3FF :                            	ORG	SV_BASE - 1		; **MUST START HERE**
 1304/D3FF : =>UNDEFINED                	IFDEF DEBUG
 1305/D3FF :                            	 ASSERT	* == SV_BASE - 1	; **MUST** BE HERE!!
 1306/D3FF : [1304]                     	ENDIF
 1307/D3FF :                            ; Perform System call with address from lookup table
 1308/D3FF :                            ; CAVEAT: Do not change extension register.
 1309/D3FF : BA E3                      SCALL:	DLD	SUBOFF(P2)		; reserve place on SUBSTACK..
 1310/D401 : BA E3                      	DLD	SUBOFF(P2)		; ..two bytes for return address
 1311/D403 : 32                         	XPAL	P2			; load P2.L with prepared SUBSTACK.L
 1312/D404 : 02                         	CCL
 1313/D405 : C7 01                      	LD	@1(P3)			; re-get first byte in macro, advance one byte
 1314/D407 :                            	; calculate syscall address with this byte
 1315/D407 : F3 FF                      	ADD	-1(P3)			; double SYSCALL number
 1316/D409 : F4 1C                      	ADI	L(SCALLS - 2)		; add low byte base address
 1317/D40B : 33                         	XPAL	P3			; low byte address SYSCALL in P3.L
 1318/D40C : CA 01                      	ST	1(P2)			; store prev value P3.L
 1319/D40E : C4 D0                      	LDI	H(SCALLS - 2)		; load high byte base address
 1320/D410 : 37                         	XPAH	P3			; high byte address SYSCALL in P3.H
 1321/D411 : CA 00                      	ST	(P2)			; store prev value P3.H
 1322/D413 : C3 00                      	LD	(P3)			; load high byte SYSCALL
 1323/D415 : 32                         	XPAL	P2			; store temporary in P2.L ..
 1324/D416 : C3 01                      	LD	1(P3)			; load low byte SYSCALL
 1325/D418 : 33                         	XPAL	P3			; put into P3.L
 1326/D419 : =>UNDEFINED                	IFDEF	KBPLUS
 1327/D419 :                            	 LDI	RAMSTK			; default STACK.L for KBPLUS syscalls
 1328/D419 : =>TRUE                     	ELSE
 1329/D419 : C4 80                      	 LDI	STKMID			; default STACK.L for internal syscalls
 1330/D41B : [1326]                     	ENDIF
 1331/D41B : 32                         	XPAL	P2
 1332/D41C : 37                         	XPAH	P3			; load new P3.H from P2.L
 1333/D41D : 90 5E                      	JMP	SPEXEC			; go and execute
 1334/D41F : 90 DE                      SCALL1:	JMP	SCALL
 1335/D421 :                            
 1336/D421 :                            	; This is the real start of the supervisor code. Although
 1337/D421 :                            	; it does not have to start at this address, we do force it
 1338/D421 :                            	; here so we do not break the relative jump addresses which
 1339/D421 :                            	; could otherwise run "out of range".
 1340/D421 :                            	;
 1341/D421 :                            
 1342/D421 : =>FALSE                    	ELSE
 1343/D421 :                            	ORG	SV_BASE + 33		; **MUST START HERE**
 1344/D421 :                            	IFDEF DEBUG
 1345/D421 :                            	 ASSERT	* == SV_BASE + 33	; **MUST** BE HERE!!
 1346/D421 : [1344]                     	ENDIF
 1347/D421 : [1302]                     	ENDIF
 1348/D421 :                            
 1349/D421 :                            	; NOTE:
 1350/D421 :                            	; We cannot use LDPI here, because the second byte
 1351/D421 :                            	; of the first instruction below is used everywhere
 1352/D421 :                            	; in the code to fetch the HIGH BYTE of the stack.
 1353/D421 :                            	; This is why we add the +1 in the next instruction.
 1354/D421 :                            	;
 1355/D421 : C4 7C                      RESTRT:	LDI	H(STKBASE)		; must remain, gives RAMBASE.H
 1356/D423 :                            ; FIXME: following switched off to get space, very preliminary
 1357/D423 : =>FALSE                    	IF	0
 1358/D423 :                            	 ORI	H(VARSBUF)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 24 - 2024年05月30日 19時01分01秒


 1359/D423 :                            	 XPAH	P1
 1360/D423 :                            	 LDI	L(STKBASE)
 1361/D423 :                            	 XPAL	P1			; point P1 to program memory
 1362/D423 :                            	 LDI	0			; mark variables' storage as empty
 1363/D423 :                            	 ST	(P1)			; store zero at begin
 1364/D423 :                            	 ST	BASMODE(P2)		; clear command/run flag
 1365/D423 : [1357]                     	ENDIF
 1366/D423 : C4 1F                      	LDI	0x1F
 1367/D425 : CA A2                      	ST	-94(P2)
 1368/D427 : (MACRO)                    	CALL	CLRSTK			; clear BASIC stack
 1368/D427 : 3F                                  XPPC   P3
 1368/D428 : E4                                  DB     H(CLRSTK)
 1368/D429 : C6                                  DB     L(CLRSTK)
 1369/D42A : (MACRO)                    	CALL	VERS			; say HELLO to the user
 1369/D42A : 3F                                  XPPC   P3
 1369/D42B : EF                                  DB     H(VERS)
 1369/D42C : 51                                  DB     L(VERS)
 1370/D42D : (MACRO)                    	CALL	MEMSIZ			; report memory size
 1370/D42D : 3F                                  XPPC   P3
 1370/D42E : D5                                  DB     H(MEMSIZ)
 1370/D42F : F3                                  DB     L(MEMSIZ)
 1371/D430 : C4 1C                      	LDI	L(SUBSTK)-2		; initialize stack offset
 1372/D432 : CA E3                      	ST	SUBOFF(P2)		; store default top of CALL/RTRN stack
 1373/D434 : 40                         	LDE				; E holds offset for FREE message
 1374/D435 : (MACRO)                    MSGOUT:	CALL	MESG			; print messages (offset in A)
 1374/D435 : 3F                                  XPPC   P3
 1374/D436 : D6                                  DB     H(MESG)
 1374/D437 : 55                                  DB     L(MESG)
 1375/D438 : C4 48                      	LDI	72			; max. characters per line
 1376/D43A : CA 00                      	ST	(P2)
 1377/D43C : C4 3E                      	LDI	_PRMPT			; set mode to "COMMAND PROMPT"
 1378/D43E : CA 7F                      	ST	BASMODE(P2)		; store command/run flag
 1379/D440 : C4 A4                      	LDI	L(ILCSTK)
 1380/D442 : CA F9                      	ST	ILCOFF(P2)		; store top of ILCALL/ILRTRN stack
 1381/D444 : C4 60                      	LDI	L(AEXSTK)		; initialize arithmetics stack
 1382/D446 : CA FD                      	ST	AEXOFF(P2)		; store default offset to arithmetics stack
 1383/D448 : C4 D8                      	LDI	H(ILTBL)		; get ILTBL.H
 1384/D44A : CA FE                      	ST	-2(P2)			; store
 1385/D44C : C4 A2                      	LDI	L(ILTBL)		; get ILTBL.L
 1386/D44E : CA FF                      	ST	-1(P2)			; store
 1387/D450 : (MACRO)                    	CALL	LINE			; print new line (to finish message)
 1387/D450 : 3F                                  XPPC   P3
 1387/D451 : E0                                  DB     H(LINE)
 1387/D452 : FE                                  DB     L(LINE)
 1388/D453 : C4 1A                      	LDI	L(SUBSTK)-4		; reserve bytes on CALL/RTRN stack
 1389/D455 : CA E3                      	ST	SUBOFF(P2)		; set initial value for P2.L
 1390/D457 :                            
 1391/D457 : C2 FF                      SPLOAD:	LD	-1(P2)			; get call ADDR.L
 1392/D459 : 33                         	XPAL	P3
 1393/D45A : C2 FE                      	LD	-2(P2)			; get call ADDR.H
 1394/D45C : DC C0                      	ORI	0xC0			; set bits 7:6 for valid high byte
 1395/D45E : 37                         	XPAH	P3
 1396/D45F :                            
 1397/D45F : C3 01                      SPTEST:	LD	1(P3)			; get second (low) byte from IL code
 1398/D461 : CA FF                      	ST	-1(P2)			; store
 1399/D463 : C7 02                      	LD	@2(P3)			; get first (high) byte from IL code
 1400/D465 : 98 75                      	JZ	RTFUNC			; return if zero
 1401/D467 : CA FE                      	ST	-2(P2)			; store
 1402/D469 : D4 E0                      	ANI	(JMPBIT+TSTBIT+CALBIT)	; only test IL control (upper 3) bits
 1403/D46B : 98 5E                      	JZ	GOFUNC			; no bits set, must be ILCALL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 25 - 2024年05月30日 19時01分01秒


 1404/D46D : 94 E8                      	JP	SPLOAD
 1405/D46F : E4 E0                      	XRI	(JMPBIT+TSTBIT+CALBIT)
 1406/D471 : 9C 7D                      	JNZ	TESTLP
 1407/D473 : C3 FF                      	LD	-1(P3)			; load call ADDR.L
 1408/D475 : 33                         	XPAL	P3
 1409/D476 : CA FF                      	ST	-1(P2)			; save prev P3.L
 1410/D478 : C2 FE                      	LD	-2(P2)			; load call ADDR.H
 1411/D47A : 37                         	XPAH	P3
 1412/D47B : CA FE                      	ST	-2(P2)			; save prev P3.H
 1413/D47D : C7 FF                      SPEXEC:	LD	@-1(P3)			; decrease P3 by 1 for PC prefetch
 1414/D47F : 40                         	LDE
 1415/D480 :                            
 1416/D480 :                            	; The central routine in the I.L. Supervisor. This is
 1417/D480 :                            	; where it all happens, and this is what the P3 pointer
 1418/D480 :                            	; usually is set to. We can jump here, or we can do far
 1419/D480 :                            	; jumps to co-routines in this block by using a relative
 1420/D480 :                            	; offset to the P3 pointer (the SV_xxx values above.)
 1421/D480 :                            	;
 1422/D480 : =>UNDEFINED                	IFDEF DEBUG
 1423/D480 :                            	 ASSERT	* == SV_BASE+0x0080	; **MUST** BE HERE!!
 1424/D480 : [1422]                     	ENDIF
 1425/D480 : 3F                         SPRVSR:	XPPC	P3			; supervisor for call and return
 1426/D481 : 01                         	XAE				; save A in E, content of E is lost!
 1427/D482 : C7 01                      	LD	@1(P3)			; skip last byte of ret addr, is 0x3F
 1428/D484 : C3 00                      	LD	(P3)			; grab first byte in macro
 1429/D486 : 98 31                      	JZ	SPRTN			; if zero, it is a return from subroutine
 1430/D488 : =>DEFINED                  	IFDEF	SCALLS
 1431/D488 : 94 95                      	 JP	SCALL1			; if > 0, two-byte system call
 1432/D48A : E4 90                      	 XRI	0x90			; is it a return from SYSCALL ?
 1433/D48C : 98 1F                      	 JZ	SYSRTN			; if zero, it is a return from SYSCALL
 1434/D48E : [1430]                     	ENDIF
 1435/D48E : C2 E3                      	LD	SUBOFF(P2)		; reset P2.L to initial state
 1436/D490 : 32                         	XPAL	P2
 1437/D491 : C7 02                      	LD	@2(P3)			; re-get first byte in macro, advance two bytes
 1438/D493 : CA FE                      	ST	-2(P2)			; store
 1439/D495 : C3 FF                      	LD	-1(P3)			; get second byte in macro
 1440/D497 : 33                         	XPAL	P3			; set low byte of addr
 1441/D498 : CE FF                      	ST	@-1(P2)			; decrease and store prev value P3.L
 1442/D49A : C2 FF                      	LD	-1(P2)			; re-get first byte of macro
 1443/D49C : 37                         	XPAH	P3			; set high byte of addr
 1444/D49D : CE FF                      	ST	@-1(P2)			; decrease and store prev value P3.H
 1445/D49F : C4 80                      	LDI	STKMID			; initialize stack..
 1446/D4A1 : 32                         	XPAL	P2
 1447/D4A2 : CA E3                      	ST	SUBOFF(P2)		; .. and store prev SUBSTACK.L
 1448/D4A4 : 9C D7                      	JNZ	SPEXEC			; go and execute
 1449/D4A6 : C4 BA                      RTNEST:	LDI	(M_NEST-M_BASE)		; 'NEST ERROR'
 1450/D4A8 : 01                         RTERRN:	XAE				; return with error offset in AC
 1451/D4A9 : C4 1E                      	LDI	L(SUBSTK)		; reset CALL/RTRN stack
 1452/D4AB : 90 10                      	JMP	SPRTN1
 1453/D4AD :                            SYSRTN:
 1454/D4AD : =>UNDEFINED                	IFDEF	KBPLUS
 1455/D4AD :                            	 LD	@-118(P2)		; reset P2.L back to STKMID
 1456/D4AD : [1454]                     	ENDIF
 1457/D4AD : 90 0A                      	JMP	SPRTN
 1458/D4AF : 90 AE                      SPTST1:	JMP	SPTEST
 1459/D4B1 : C4 0D                      SPLINE:	LDI	_CR
 1460/D4B3 : =>DEFINED                  	IFDEF	SCALLS
 1461/D4B3 : (MACRO)                    	 SYSCALL	2
 1461/D4B3 : 3F                                  XPPC   P3
 1461/D4B4 : 02                                  DB     2
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 26 - 2024年05月30日 19時01分01秒


 1462/D4B5 : =>FALSE                    	ELSE
 1463/D4B5 :                            	 CALL	PUTASC
 1464/D4B5 : [1460]                     	ENDIF
 1465/D4B5 : C4 0A                      	LDI	_LF
 1466/D4B7 : =>DEFINED                  	IFDEF	SCALLS
 1467/D4B7 : (MACRO)                    	 SYSCALL	2
 1467/D4B7 : 3F                                  XPPC   P3
 1467/D4B8 : 02                                  DB     2
 1468/D4B9 : =>FALSE                    	ELSE
 1469/D4B9 :                            	 CALL	PUTASC
 1470/D4B9 : [1466]                     	ENDIF
 1471/D4B9 : AA E3                      SPRTN:	ILD	SUBOFF(P2)		; adjust SUBSTK.L by two bytes up
 1472/D4BB : AA E3                      	ILD	SUBOFF(P2)
 1473/D4BD : 32                         SPRTN1:	XPAL	P2
 1474/D4BE : C2 FF                      	LD	-1(P2)
 1475/D4C0 : 33                         	XPAL	P3
 1476/D4C1 : C2 FE                      	LD	-2(P2)
 1477/D4C3 : 37                         	XPAH	P3
 1478/D4C4 : C4 80                      	LDI	STKMID			; reset stack
 1479/D4C6 : 32                         	XPAL	P2
 1480/D4C7 : 90 B4                      	JMP	SPEXEC
 1481/D4C9 : 90 8C                      SPLOD2:	JMP	SPLOAD
 1482/D4CB : BA F9                      GOFUNC:	DLD	ILCOFF(P2)		; adjust ILCSTK.L by two down
 1483/D4CD : BA F9                      	DLD	ILCOFF(P2)
 1484/D4CF : 94 D5                      	JP	RTNEST
 1485/D4D1 : 32                         	XPAL	P2
 1486/D4D2 : 33                         	XPAL	P3
 1487/D4D3 : CA 01                      	ST	1(P2)
 1488/D4D5 : 37                         	XPAH	P3
 1489/D4D6 : CA 00                      	ST	(P2)
 1490/D4D8 : 33                         	XPAL	P3
 1491/D4D9 : 32                         	XPAL	P2
 1492/D4DA : 90 ED                      	JMP	SPLOD2
 1493/D4DC : AA F9                      RTFUNC:	ILD	ILCOFF(P2)		; adjust ILCSTK.L by two up
 1494/D4DE : AA F9                      	ILD	ILCOFF(P2)
 1495/D4E0 : 32                         	XPAL	P2
 1496/D4E1 : C2 FF                      	LD	-1(P2)
 1497/D4E3 : 33                         	XPAL	P3
 1498/D4E4 : C2 FE                      	LD	-2(P2)
 1499/D4E6 : 37                         	XPAH	P3
 1500/D4E7 : C4 80                      	LDI	STKMID			; reset stack
 1501/D4E9 : 32                         	XPAL	P2
 1502/D4EA : 90 C3                      SPTST2:	JMP	SPTST1			; only stepping stone to avoid too far jumps
 1503/D4EC :                            
 1504/D4EC : C4 EB                      VALERR:	LDI	(M_VALU-M_BASE)		; 'VALUE ERROR'
 1505/D4EE : 90 B8                      	JMP	RTERRN
 1506/D4F0 :                            
 1507/D4F0 :                            ; FIXME:
 1508/D4F0 :                            ; uncertain if space eating always needed, in principle only for TSTVAR.
 1509/D4F0 :                            ; TSTSTR tests for <cr> with leading spaces, in principle now needed only for token.
 1510/D4F0 : C5 01                      TESTLP:	LD	@1(P1)			; get byte from program and increase
 1511/D4F2 : E4 20                      	XRI	' '			; is it <space> ?
 1512/D4F4 : 98 FA                      	JZ	TESTLP			; yes, eat it
 1513/D4F6 : C2 FE                      	LD	-2(P2)
 1514/D4F8 : D4 60                      	ANI	(TSTBIT+CALBIT)		; look at bits 6:5 (TSTSTR or TSTNUM or TSTVAR)
 1515/D4FA : 9C 0A                      	JNZ	TESTB6			; jump for TSTNUM or TSTVAR
 1516/D4FC : C1 FF                      	LD	-1(P1)			; TSTSTR, load prev byte from program
 1517/D4FE : E7 01                      	XOR	@1(P3)
 1518/D500 : 98 E8                      	JZ	SPTST2
 1519/D502 : C5 FF                      	LD	@-1(P1)			; decrease and load byte from program
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 27 - 2024年05月30日 19時01分01秒


 1520/D504 : 90 C3                      	JMP	SPLOD2
 1521/D506 : E4 40                      TESTB6:	XRI	TSTBIT			; test for number (bit6=1)
 1522/D508 : 98 35                      	JZ	TESTN			; could be, jump to asure
 1523/D50A : C1 FF                      	LD	-1(P1)			; get previous byte from program
 1524/D50C : 01                         	XAE				; now test for variable,
 1525/D50D : 03                         	SCL				; must begin with letter
 1526/D50E : 40                         	LDE
 1527/D50F : FC 5B                      	CAI	'Z'+1			; no beginning letter
 1528/D511 : 94 04                      	JP	LVTST1			; leave test
 1529/D513 : F4 1A                      	ADI	26			; 'Z'-'A'+1
 1530/D515 : 94 0C                      	JP	LKVAR			; found letter
 1531/D517 : C2 FE                      LVTST1:	LD	-2(P2)
 1532/D519 : D4 DF                      	ANI	0xFF ! CALBIT		; clear TSTVAR = CALBIT
 1533/D51B : CA FE                      	ST	-2(P2)
 1534/D51D : C5 FF                      LVTST2:	LD	@-1(P1)			; decrease P1 and get previous byte
 1535/D51F : 90 A8                      	JMP	SPLOD2
 1536/D521 : 90 C9                      VALER2:	JMP	VALERR
 1537/D523 : 03                         LKVAR:	SCL				; beginning letter found, got more ?
 1538/D524 : C1 00                      	LD	(P1)			; get current byte from program
 1539/D526 : FC 5B                      	CAI	'Z'+1
 1540/D528 : 94 0F                      	JP	LVTST3			; no more letter found
 1541/D52A : F4 1A                      	ADI	26			; 'Z'-'A'+1
 1542/D52C : 94 BC                      	JP	SPTST2			; found letter
 1543/D52E : 03                         	SCL
 1544/D52F : C1 00                      	LD	(P1)
 1545/D531 : FC 3A                      	CAI	'9'+1
 1546/D533 : 94 04                      	JP	LVTST3			; no digit
 1547/D535 : F4 0A                      	ADI	10			; '9'-'0'+1
 1548/D537 : 94 B1                      	JP	SPTST2			; next test
 1549/D539 : 40                         LVTST3:	LDE
 1550/D53A : DC 80                      	ORI	0x80			; set bit7 to terminate variable
 1551/D53C : 01                         	XAE
 1552/D53D : 90 AB                      SPTST3:	JMP	SPTST2			; next test
 1553/D53F :                            
 1554/D53F : CA E8                      TESTN:	ST	-24(P2)			; clear temporary digit counter
 1555/D541 : C1 FF                      	LD	-1(P1)			; get previous byte from program
 1556/D543 : 03                         TSTN1:	SCL
 1557/D544 : FC 3A                      	CAI	'9'+1
 1558/D546 : 94 0C                      	JP	TSTN3			; no digit
 1559/D548 : F4 0A                      	ADI	10			; '9'-'0'+1
 1560/D54A : 9C 06                      	JNZ	TSTN2			; digit is not (leading) zero
 1561/D54C : AA E8                      	ILD	-24(P2)			; increase temporary digit counter
 1562/D54E : C5 01                      	LD	@1(P1)			; get current byte and increase
 1563/D550 : 90 F1                      	JMP	TSTN1			; go for next test
 1564/D552 : 94 0A                      TSTN2:	JP	TSTN4			; go store digit
 1565/D554 : C2 E8                      TSTN3:	LD	-24(P2)			; was there any digit
 1566/D556 : 98 C5                      	JZ	LVTST2			; if not leave test
 1567/D558 : C5 FF                      	LD	@-1(P1)			; decrease and get byte from program
 1568/D55A : C4 00                      	LDI	0
 1569/D55C : CA E8                      	ST	-24(P2)			; clear temporary counter again
 1570/D55E : 01                         TSTN4:	XAE
 1571/D55F : C2 FD                      	LD	AEXOFF(P2)		; setup arithmetics stack
 1572/D561 : 32                         	XPAL	P2
 1573/D562 : C4 96                      	LDI	0x96
 1574/D564 :                            ; NOTE:	b'10010110' is stored as exponent, means b'00010110' = 22 decimal
 1575/D564 :                            ;	MSB most, LSB least significant byte
 1576/D564 : CE FC                      	ST	@-4(P2)			; reserve four bytes on stack
 1577/D566 : C4 00                      	LDI	0			; clear mantissa,
 1578/D568 : CA 01                      	ST	1(P2)			; fractional point is at MSB between bit7 and bit6
 1579/D56A : CA 02                      	ST	2(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 28 - 2024年05月30日 19時01分01秒


 1580/D56C : 40                         	LDE
 1581/D56D : CA 03                      	ST	3(P2)			; store digit out of E in LSB
 1582/D56F : 03                         TSTN5:	SCL
 1583/D570 : C5 01                      	LD	@1(P1)			; load current byte and increase
 1584/D572 : FC 3A                      	CAI	'9'+1
 1585/D574 : 94 04                      	JP	TSTN6			; no digit
 1586/D576 : F4 0A                      	ADI	10			; '9'-'0'+1
 1587/D578 : 94 13                      	JP	TSTN10			; is digit
 1588/D57A : C5 FF                      TSTN6:	LD	@-1(P1)			; reset to previous byte
 1589/D57C : C2 01                      TSTN7:	LD	1(P2)			; load MSB of mantissa
 1590/D57E : F2 01                      	ADD	1(P2)			; shift bit left, bit6 -> bit7 in A
 1591/D580 : E2 01                      	XOR	1(P2)
 1592/D582 : 94 54                      	JP	TSTN9			; jump if bit6 and bit7 were set
 1593/D584 : C4 80                      TSTN8:	LDI	STKMID
 1594/D586 : 32                         	XPAL	P2
 1595/D587 : CA FD                      	ST	AEXOFF(P2)		; save arithmetics stack low	
 1596/D589 : 90 B2                      	JMP	SPTST3			; go back to I.L.
 1597/D58B : 90 94                      VALER1:	JMP	VALER2			; only stepping stone to avoid too far jumps
 1598/D58D : 01                         TSTN10:	XAE				; save new digit in E
 1599/D58E : 02                         	CCL				; shift mantissa left by 1
 1600/D58F : C2 03                      	LD	3(P2)
 1601/D591 : F2 03                      	ADD	3(P2)
 1602/D593 : CA 03                      	ST	3(P2)
 1603/D595 : CA FF                      	ST	-1(P2)			; temporary store result 4 bytes lower
 1604/D597 : C2 02                      	LD	2(P2)
 1605/D599 : F2 02                      	ADD	2(P2)
 1606/D59B : CA 02                      	ST	2(P2)
 1607/D59D : CA FE                      	ST	-2(P2)
 1608/D59F : C2 01                      	LD	1(P2)
 1609/D5A1 : F2 01                      	ADD	1(P2)
 1610/D5A3 : CA 01                      	ST	1(P2)
 1611/D5A5 : CA FD                      	ST	-3(P2)
 1612/D5A7 : C4 04                      	LDI	4			; load shift counter
 1613/D5A9 : CA FC                      	ST	-4(P2)			; store 4 bytes lower
 1614/D5AB : C2 03                      TSTN11:	LD	3(P2)			; perform another shift
 1615/D5AD : F2 FF                      	ADD	-1(P2)
 1616/D5AF : CA 03                      	ST	3(P2)
 1617/D5B1 : C2 02                      	LD	2(P2)
 1618/D5B3 : F2 FE                      	ADD	-2(P2)
 1619/D5B5 : CA 02                      	ST	2(P2)
 1620/D5B7 : C2 01                      	LD	1(P2)
 1621/D5B9 : F2 FD                      	ADD	-3(P2)
 1622/D5BB : CA 01                      	ST	1(P2)
 1623/D5BD : D4 80                      	ANI	0x80
 1624/D5BF : 9C CA                      	JNZ	VALER1			; bit7 is set, throw value error
 1625/D5C1 : BA FC                      	DLD	-4(P2)			; decrease shift counter
 1626/D5C3 : 9C E6                      	JNZ	TSTN11			; and shift again
 1627/D5C5 : 01                         	XAE				; add in new digit, E holds zero
 1628/D5C6 : F2 03                      	ADD	3(P2)
 1629/D5C8 : CA 03                      	ST	3(P2)
 1630/D5CA : 40                         	LDE
 1631/D5CB : F2 02                      	ADD	2(P2)
 1632/D5CD : CA 02                      	ST	2(P2)
 1633/D5CF : 40                         	LDE
 1634/D5D0 : F2 01                      	ADD	1(P2)
 1635/D5D2 : CA 01                      	ST	1(P2)
 1636/D5D4 : 94 99                      	JP	TSTN5			; try for more digits
 1637/D5D6 : 90 B3                      	JMP	VALER1			; bit7 is set, throw value error
 1638/D5D8 : C2 00                      TSTN9:	LD	(P2)			; test exponent
 1639/D5DA : 98 A8                      	JZ	TSTN8			; zero, we're done
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 29 - 2024年05月30日 19時01分01秒


 1640/D5DC : BA 00                      	DLD	(P2)			; decrease exponent
 1641/D5DE : 02                         	CCL				; shift mantissa left by 1
 1642/D5DF : C2 03                      	LD	3(P2)
 1643/D5E1 : F2 03                      	ADD	3(P2)
 1644/D5E3 : CA 03                      	ST	3(P2)
 1645/D5E5 : C2 02                      	LD	2(P2)
 1646/D5E7 : F2 02                      	ADD	2(P2)
 1647/D5E9 : CA 02                      	ST	2(P2)
 1648/D5EB : C2 01                      	LD	1(P2)
 1649/D5ED : F2 01                      	ADD	1(P2)
 1650/D5EF : CA 01                      	ST	1(P2)
 1651/D5F1 : 90 89                      	JMP	TSTN7			; try again
 1652/D5F3 :                            
 1653/D5F3 :                            ;**************************************
 1654/D5F3 :                            ;*    PRINT AVAILABLE MEMORY SIZE     *
 1655/D5F3 :                            ;**************************************
 1656/D5F3 :                            ;
 1657/D5F3 :                            ; NOTE:	Count memory bytes in the available pages, leave out page 0,
 1658/D5F3 :                            ;	 so first accessible page is 1, highest countable page is 7.
 1659/D5F3 :                            ;	Assume contiguous memory block at least in page 1, occupied
 1660/D5F3 :                            ;	 place by an existent program is taken into account.
 1661/D5F3 :                            ;	Last page holds max. 3072 bytes until beginning of STACK.
 1662/D5F3 :                            ;
 1663/D5F3 : C4 00                      MEMSIZ:	LDI	0
 1664/D5F5 : CA F8                      	ST	NUMLO(P2)		; set memsize to zero
 1665/D5F7 : CA F7                      	ST	NUMHI(P2)
 1666/D5F9 : C2 84                      	LD	PAGES(P2)
 1667/D5FB : CA E8                      	ST	-24(P2)			; temporary store number of pages
 1668/D5FD : C4 10                      	LDI	0x10			; first page high byte
 1669/D5FF : 31                         	XPAL	P1
 1670/D600 : C4 02                      MEM1:	LDI	2			; position of first byte in line
 1671/D602 : 31                         	XPAL	P1			; use pointer P3
 1672/D603 : 35                         	XPAH	P1
 1673/D604 : C1 00                      MEM2:	LD	(P1)			; get current program byte
 1674/D606 : E4 FF                      	XRI	0xFF			; is it first byte of end termination ?
 1675/D608 : 9C 06                      	JNZ	MEM3			; no, go ahead
 1676/D60A : C1 01                      	LD	1(P1)
 1677/D60C : E4 FF                      	XRI	0xFF			; do we have second byte ?
 1678/D60E : 98 07                      	JZ	MEM4			; yes, we are done
 1679/D610 : C1 02                      MEM3:	LD	2(P1)
 1680/D612 : 01                         	XAE
> > > NIBLFP.asm(1681):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 1681/D613 : C5 80                      	LD	@EREG(P1)		; advance to next program line
 1682/D615 : 90 ED                      	JMP	MEM2
 1683/D617 : C5 02                      MEM4:	LD	@2(P1)			; advance to first free byte
 1684/D619 : 31                         	XPAL	P1			; store P1 as TOP
 1685/D61A : CA 86                      	ST	PGTOPL(P2)
 1686/D61C : 02                         	CCL
 1687/D61D : 35                         	XPAH	P1
 1688/D61E : CA 85                      	ST	PGTOPH(P2)
 1689/D620 : F4 10                      	ADI	0x10			; calculate next page high
 1690/D622 : D4 F0                      	ANI	0xF0			; set lowest 4 bits to zero
 1691/D624 : 31                         	XPAL	P1
 1692/D625 : 03                         	SCL				; now calculate free memory on page
 1693/D626 : C4 00                      	LDI	0			; subtract TOP from end of page
 1694/D628 : FA 86                      	CAD	PGTOPL(P2)
 1695/D62A : CA 86                      	ST	PGTOPL(P2)		; store as FREE.L
 1696/D62C : C4 00                      	LDI	0
 1697/D62E : FA 85                      	CAD	PGTOPH(P2)
 1698/D630 : D4 0F                      	ANI	0x0F			; only last 4 bits are relevant
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 30 - 2024年05月30日 19時01分01秒


 1699/D632 : CA 85                      	ST	PGTOPH(P2)		; store as FREE.H
 1700/D634 : 02                         	CCL
 1701/D635 : C2 86                      	LD	PGTOPL(P2)		; add to memsize in STACK -9,-8
 1702/D637 : F2 F8                      	ADD	NUMLO(P2)
 1703/D639 : CA F8                      	ST	NUMLO(P2)
 1704/D63B : C2 85                      	LD	PGTOPH(P2)
 1705/D63D : F2 F7                      	ADD	NUMHI(P2)
 1706/D63F : CA F7                      	ST	NUMHI(P2)
 1707/D641 : BA E8                      	DLD	-24(P2)			; decrease number of pages
 1708/D643 : 9C BB                      	JNZ	MEM1
 1709/D645 : 03                         	SCL				; subtract 1024 bytes for STACK
 1710/D646 : C2 F7                      	LD	NUMHI(P2)
 1711/D648 : FC 04                      	CAI	4
 1712/D64A : CA F7                      	ST	NUMHI(P2)
 1713/D64C : (MACRO)                    	CALL	PRNUM			; print memsize
 1713/D64C : 3F                                  XPPC   P3
 1713/D64D : D1                                  DB     H(PRNUM)
 1713/D64E : BA                                  DB     L(PRNUM)
 1714/D64F : C4 20                      	LDI	' '			; next print a space
 1715/D651 : =>DEFINED                  	IFDEF	SCALLS
 1716/D651 : (MACRO)                    	 SYSCALL	2
 1716/D651 : 3F                                  XPPC   P3
 1716/D652 : 02                                  DB     2
 1717/D653 : =>FALSE                    	ELSE
 1718/D653 :                            	 CALL	PUTASC
 1719/D653 : [1715]                     	ENDIF
 1720/D653 : C4 0F                      	LDI	(M_FREE-M_BASE)		; set message offset
 1721/D655 :                            
 1722/D655 :                            
 1723/D655 :                            ;***************************
 1724/D655 :                            ;*  PRINT ERROR MESSAGES   *
 1725/D655 :                            ;***************************
 1726/D655 :                            ;
 1727/D655 :                            ; We use relative offsets to messages instead of absolute
 1728/D655 :                            ; addresses and adjust the message pointer by adding the E
 1729/D655 :                            ; register.
 1730/D655 :                            ;
 1731/D655 :                            ; If offset is NEGATIVE, it is an error, and we print a ?
 1732/D655 :                            ; first, then the error message, followed by a SPACE and
 1733/D655 :                            ; the word 'error'. If postive, we ONLY print the word
 1734/D655 :                            ; pointed to by the offset.
 1735/D655 :                            ;
 1736/D655 : CA 82                      MESG:	ST	MSGOFF(P2)		; store relative offset
 1737/D657 : 01                         	XAE				; save offset into E
 1738/D658 : (MACRO)                    	LDPI	P1,M_BASE		; set P1 to message base addr
 1738/D658 : C4 1D                               LDI    L(M_BASE)
 1738/D65A : 31                                  XPAL   P1
 1738/D65B : C4 D7                               LDI    H(M_BASE)
 1738/D65D : 35                                  XPAH   P1
> > > NIBLFP.asm(1739):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 1739/D65E : C5 80                      	LD	@EREG(P1)		; adjust pointer
 1740/D660 : 40                         	LDE	
 1741/D661 : 94 04                      	JP	MESG1			; not error, skip
 1742/D663 : C4 3F                      	LDI	_QMARK			; print a question mark (error!)
 1743/D665 : =>DEFINED                  	IFDEF	SCALLS
 1744/D665 : (MACRO)                    	 SYSCALL	2
 1744/D665 : 3F                                  XPPC   P3
 1744/D666 : 02                                  DB     2
 1745/D667 : =>FALSE                    	ELSE
 1746/D667 :                            	 CALL	PUTASC
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 31 - 2024年05月30日 19時01分01秒


 1747/D667 : [1743]                     	ENDIF
 1748/D667 : C5 01                      MESG1:	LD	@1(P1)			; now print the message
 1749/D669 : =>DEFINED                  	IFDEF	SCALLS
 1750/D669 : (MACRO)                    	 SYSCALL	2
 1750/D669 : 3F                                  XPPC   P3
 1750/D66A : 02                                  DB     2
 1751/D66B : =>FALSE                    	ELSE
 1752/D66B :                            	 CALL	PUTASC
 1753/D66B : [1749]                     	ENDIF
 1754/D66B : 94 FA                      	JP	MESG1
 1755/D66D : C2 82                      	LD	MSGOFF(P2)		; load used offset
 1756/D66F : 94 08                      	JP	MESG2			; no error message, skip
 1757/D671 : C4 20                      	LDI	' '			; print a space before ERROR
 1758/D673 : =>DEFINED                  	IFDEF	SCALLS
 1759/D673 : (MACRO)                    	 SYSCALL	2
 1759/D673 : 3F                                  XPPC   P3
 1759/D674 : 02                                  DB     2
 1760/D675 : =>FALSE                    	ELSE
 1761/D675 :                            	 CALL	PUTASC
 1762/D675 : [1758]                     	ENDIF
 1763/D675 : C4 05                      	LDI	(M_ERR-M_BASE)		; set 'ERROR' message offset
 1764/D677 : 90 DC                      	JMP	MESG
 1765/D679 : E4 0F                      MESG2:	XRI	(M_FREE-M_BASE)		; was it 'FREE' message ?
 1766/D67B : 9C 02                      	JNZ	LNUM			; no, print line number
 1767/D67D : 93 30                      	JMP	SV_LINE(P3)		; return and print newline
 1768/D67F :                            
 1769/D67F :                            
 1770/D67F :                            ;***************************
 1771/D67F :                            ;* MESSAGE AT LINE NUMBER  *
 1772/D67F :                            ;***************************
 1773/D67F :                            ;
 1774/D67F : C2 7F                      LNUM:	LD	BASMODE(P2)		; increase command/run flag
 1775/D681 : 94 0F                      	JP	LNUM1			; return if in command mode
 1776/D683 : C4 20                      	LDI	' '			; print <space>
 1777/D685 : =>DEFINED                  	IFDEF	SCALLS
 1778/D685 : (MACRO)                    	 SYSCALL	2
 1778/D685 : 3F                                  XPPC   P3
 1778/D686 : 02                                  DB     2
 1779/D687 : =>FALSE                    	ELSE
 1780/D687 :                            	 CALL	PUTASC
 1781/D687 : [1777]                     	ENDIF
 1782/D687 : C4 41                      	LDI	'A'			; print "AT"
 1783/D689 : =>DEFINED                  	IFDEF	SCALLS
 1784/D689 : (MACRO)                    	 SYSCALL	2
 1784/D689 : 3F                                  XPPC   P3
 1784/D68A : 02                                  DB     2
 1785/D68B : =>FALSE                    	ELSE
 1786/D68B :                            	 CALL	PUTASC
 1787/D68B : [1783]                     	ENDIF
 1788/D68B : C4 54                      	LDI	'T'
 1789/D68D : =>DEFINED                  	IFDEF	SCALLS
 1790/D68D : (MACRO)                    	 SYSCALL	2
 1790/D68D : 3F                                  XPPC   P3
 1790/D68E : 02                                  DB     2
 1791/D68F : =>FALSE                    	ELSE
 1792/D68F :                            	 CALL	PUTASC
 1793/D68F : [1789]                     	ENDIF
 1794/D68F : (MACRO)                    	CALL	PRNUM			; print line number
 1794/D68F : 3F                                  XPPC   P3
 1794/D690 : D1                                  DB     H(PRNUM)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 32 - 2024年05月30日 19時01分01秒


 1794/D691 : BA                                  DB     L(PRNUM)
 1795/D692 : C2 82                      LNUM1:	LD	MSGOFF(P2)		; load last message offset
 1796/D694 : E4 05                      	XRI	(M_ERR-M_BASE)		; minus 'ERROR' message offset
 1797/D696 : 9F 38                      	JNZ	SV_RTRN(P3)
 1798/D698 : CA 7F                      	ST	BASMODE(P2)		; clear command / run flag
 1799/D69A : C4 0A                      	LDI	(M_RDY-M_BASE)		; set 'READY' message offset
 1800/D69C : (MACRO)                    	CALL	LINE
 1800/D69C : 3F                                  XPPC   P3
 1800/D69D : E0                                  DB     H(LINE)
 1800/D69E : FE                                  DB     L(LINE)
 1801/D69F : 90 B4                      	JMP	MESG
 1802/D6A1 :                            
 1803/D6A1 :                            
 1804/D6A1 :                            ;***************************
 1805/D6A1 :                            ;*        MESSAGES         *
 1806/D6A1 :                            ;***************************
 1807/D6A1 :                            ;
 1808/D6A1 : (MACRO)                    M_AREA:	MESG	"ARE",'A'
 1808/D6A1 : 41 52 45                            DB     "ARE"
 1808/D6A4 : =>NOT BLANK                         IFNB   'A'
 1808/D6A4 : C1                                   DB    'A'|0x80
 1808/D6A5 : [1808]                              ENDIF
 1809/D6A5 : (MACRO)                    M_ARG:	MESG	"ARGUMEN",'T'
 1809/D6A5 : 41 52 47 55 4D 45 4E                DB     "ARGUMEN"
 1809/D6AC : =>NOT BLANK                         IFNB   'T'
 1809/D6AC : D4                                   DB    'T'|0x80
 1809/D6AD : [1809]                              ENDIF
 1810/D6AD : (MACRO)                    M_CASS:	MESG	"CAS",'S'
 1810/D6AD : 43 41 53                            DB     "CAS"
 1810/D6B0 : =>NOT BLANK                         IFNB   'S'
 1810/D6B0 : D3                                   DB    'S'|0x80
 1810/D6B1 : [1810]                              ENDIF
 1811/D6B1 : (MACRO)                    M_CHAR:	MESG	"CHA",'R'
 1811/D6B1 : 43 48 41                            DB     "CHA"
 1811/D6B4 : =>NOT BLANK                         IFNB   'R'
 1811/D6B4 : D2                                   DB    'R'|0x80
 1811/D6B5 : [1811]                              ENDIF
 1812/D6B5 : (MACRO)                    M_DEF:	MESG	"DEFIN",'E'
 1812/D6B5 : 44 45 46 49 4E                      DB     "DEFIN"
 1812/D6BA : =>NOT BLANK                         IFNB   'E'
 1812/D6BA : C5                                   DB    'E'|0x80
 1812/D6BB : [1812]                              ENDIF
 1813/D6BB : (MACRO)                    M_DATA:	MESG	"DAT",'A'
 1813/D6BB : 44 41 54                            DB     "DAT"
 1813/D6BE : =>NOT BLANK                         IFNB   'A'
 1813/D6BE : C1                                   DB    'A'|0x80
 1813/D6BF : [1813]                              ENDIF
 1814/D6BF : (MACRO)                    M_RDIM:	MESG	"RE"
 1814/D6BF : 52 45                               DB     "RE"
 1814/D6C1 : =>BLANK                             IFNB   
 1814/D6C1 :                                      DB    |0x80
 1814/D6C1 : [1814]                              ENDIF
 1815/D6C1 : (MACRO)                    M_DIM:	MESG	"DI",'M'
 1815/D6C1 : 44 49                               DB     "DI"
 1815/D6C3 : =>NOT BLANK                         IFNB   'M'
 1815/D6C3 : CD                                   DB    'M'|0x80
 1815/D6C4 : [1815]                              ENDIF
 1816/D6C4 : (MACRO)                    M_DIV0:	MESG	"DIV/",'0'
 1816/D6C4 : 44 49 56 2F                         DB     "DIV/"
 1816/D6C8 : =>NOT BLANK                         IFNB   '0'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 33 - 2024年05月30日 19時01分01秒


 1816/D6C8 : B0                                   DB    '0'|0x80
 1816/D6C9 : [1816]                              ENDIF
 1817/D6C9 : (MACRO)                    M_ENDP:	MESG	"END",')'
 1817/D6C9 : 45 4E 44                            DB     "END"
 1817/D6CC : =>NOT BLANK                         IFNB   ')'
 1817/D6CC : A9                                   DB    ')'|0x80
 1817/D6CD : [1817]                              ENDIF
 1818/D6CD : (MACRO)                    M_ENDQ:	MESG	"END",'"'
 1818/D6CD : 45 4E 44                            DB     "END"
 1818/D6D0 : =>NOT BLANK                         IFNB   '"'
 1818/D6D0 : A2                                   DB    '"'|0x80
 1818/D6D1 : [1818]                              ENDIF
 1819/D6D1 : (MACRO)                    M_FOR:	MESG	"FO",'R'
 1819/D6D1 : 46 4F                               DB     "FO"
 1819/D6D3 : =>NOT BLANK                         IFNB   'R'
 1819/D6D3 : D2                                   DB    'R'|0x80
 1819/D6D4 : [1819]                              ENDIF
 1820/D6D4 : (MACRO)                    M_HEX:	MESG	"HE",'X'
 1820/D6D4 : 48 45                               DB     "HE"
 1820/D6D6 : =>NOT BLANK                         IFNB   'X'
 1820/D6D6 : D8                                   DB    'X'|0x80
 1820/D6D7 : [1820]                              ENDIF
 1821/D6D7 : (MACRO)                    M_NEST:	MESG	"NES",'T'
 1821/D6D7 : 4E 45 53                            DB     "NES"
 1821/D6DA : =>NOT BLANK                         IFNB   'T'
 1821/D6DA : D4                                   DB    'T'|0x80
 1821/D6DB : [1821]                              ENDIF
 1822/D6DB : (MACRO)                    M_NEXT:	MESG	"NEX",'T'
 1822/D6DB : 4E 45 58                            DB     "NEX"
 1822/D6DE : =>NOT BLANK                         IFNB   'T'
 1822/D6DE : D4                                   DB    'T'|0x80
 1822/D6DF : [1822]                              ENDIF
 1823/D6DF : (MACRO)                    M_NOGO:	MESG	"NOG",'O'
 1823/D6DF : 4E 4F 47                            DB     "NOG"
 1823/D6E2 : =>NOT BLANK                         IFNB   'O'
 1823/D6E2 : CF                                   DB    'O'|0x80
 1823/D6E3 : [1823]                              ENDIF
 1824/D6E3 : (MACRO)                    M_OVRF:	MESG	"OVERFLO",'W'
 1824/D6E3 : 4F 56 45 52 46 4C 4F                DB     "OVERFLO"
 1824/D6EA : =>NOT BLANK                         IFNB   'W'
 1824/D6EA : D7                                   DB    'W'|0x80
 1824/D6EB : [1824]                              ENDIF
 1825/D6EB : (MACRO)                    M_RAM:	MESG	"RA",'M'		; FIXME: unused (use for RAM testing)
 1825/D6EB : 52 41                               DB     "RA"
 1825/D6ED : =>NOT BLANK                         IFNB   'M'
 1825/D6ED : CD                                   DB    'M'|0x80
 1825/D6EE : [1825]                              ENDIF
 1826/D6EE : (MACRO)                    M_RTRN:	MESG	"RETUR",'N'
 1826/D6EE : 52 45 54 55 52                      DB     "RETUR"
 1826/D6F3 : =>NOT BLANK                         IFNB   'N'
 1826/D6F3 : CE                                   DB    'N'|0x80
 1826/D6F4 : [1826]                              ENDIF
 1827/D6F4 : (MACRO)                    M_SNTX:	MESG	"SYNTA",'X'
 1827/D6F4 : 53 59 4E 54 41                      DB     "SYNTA"
 1827/D6F9 : =>NOT BLANK                         IFNB   'X'
 1827/D6F9 : D8                                   DB    'X'|0x80
 1827/D6FA : [1827]                              ENDIF
 1828/D6FA : (MACRO)                    M_STMT:	MESG	"STATEMEN",'T'
 1828/D6FA : 53 54 41 54 45 4D 45 4E             DB     "STATEMEN"
 1828/D702 : =>NOT BLANK                         IFNB   'T'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 34 - 2024年05月30日 19時01分01秒


 1828/D702 : D4                                   DB    'T'|0x80
 1828/D703 : [1828]                              ENDIF
 1829/D703 : (MACRO)                    M_UNTL:	MESG	"UNTI",'L'
 1829/D703 : 55 4E 54 49                         DB     "UNTI"
 1829/D707 : =>NOT BLANK                         IFNB   'L'
 1829/D707 : CC                                   DB    'L'|0x80
 1829/D708 : [1829]                              ENDIF
 1830/D708 : (MACRO)                    M_VALU:	MESG	"VALU",'E'
 1830/D708 : 56 41 4C 55                         DB     "VALU"
 1830/D70C : =>NOT BLANK                         IFNB   'E'
 1830/D70C : C5                                   DB    'E'|0x80
 1830/D70D : [1830]                              ENDIF
 1831/D70D : (MACRO)                    M_VAR:	MESG	"VARIABL",'E'
 1831/D70D : 56 41 52 49 41 42 4C                DB     "VARIABL"
 1831/D714 : =>NOT BLANK                         IFNB   'E'
 1831/D714 : C5                                   DB    'E'|0x80
 1831/D715 : [1831]                              ENDIF
 1832/D715 : (MACRO)                    M_VRST:	MESG	"VARSTAC",'K'
 1832/D715 : 56 41 52 53 54 41 43                DB     "VARSTAC"
 1832/D71C : =>NOT BLANK                         IFNB   'K'
 1832/D71C : CB                                   DB    'K'|0x80
 1832/D71D : [1832]                              ENDIF
 1833/D71D : =0xD71D                    M_BASE	= $				; message separator (see MSGOUT)
 1834/D71D : (MACRO)                    M_BRK:	MESG	"BREA",'K'
 1834/D71D : 42 52 45 41                         DB     "BREA"
 1834/D721 : =>NOT BLANK                         IFNB   'K'
 1834/D721 : CB                                   DB    'K'|0x80
 1834/D722 : [1834]                              ENDIF
 1835/D722 : (MACRO)                    M_ERR:	MESG	"ERRO",'R'
 1835/D722 : 45 52 52 4F                         DB     "ERRO"
 1835/D726 : =>NOT BLANK                         IFNB   'R'
 1835/D726 : D2                                   DB    'R'|0x80
 1835/D727 : [1835]                              ENDIF
 1836/D727 : (MACRO)                    M_RDY:	MESG	"READ",'Y'
 1836/D727 : 52 45 41 44                         DB     "READ"
 1836/D72B : =>NOT BLANK                         IFNB   'Y'
 1836/D72B : D9                                   DB    'Y'|0x80
 1836/D72C : [1836]                              ENDIF
 1837/D72C : (MACRO)                    M_FREE:	MESG	"BYTES MEMORY FRE",'E'
 1837/D72C : 42 59 54 45 53 20 4D 45 4D          DB     "BYTES MEMORY FRE"
      D735 : 4F 52 59 20 46 52 45      
 1837/D73C : =>NOT BLANK                         IFNB   'E'
 1837/D73C : C5                                   DB    'E'|0x80
 1837/D73D : [1837]                              ENDIF
 1838/D73D :                            
 1839/D73D :                            
 1840/D73D :                            ;***************************
 1841/D73D :                            ;*       TOKEN TABLE       *
 1842/D73D :                            ;***************************
 1843/D73D :                            ;
 1844/D73D :                            TOKENS:
 1845/D73D : =0x80                      T_AUTO	= 0x80|0
 1846/D73D : (MACRO)                    	TOKEN	T_AUTO,"AUT",'O'
 1846/D73D : =>FALSE                             IF T_AUTO == 0x80|79
 1846/D73D :                                      ; Convert T_AUTO T_STAR to the more common '^' symbol.
 1846/D73D :                                      ; NOTE: if T_AUTO token is added or deleted, DO NOT forget to update this!
 1846/D73D :                                      DB    '^'
 1846/D73D : =>TRUE                              ELSE
 1846/D73D : 80                                   DB    T_AUTO
 1846/D73E : [1846]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 35 - 2024年05月30日 19時01分01秒


 1846/D73E : 41 55 54                            DB     "AUT"
 1846/D741 : CF                                  DB     'O'|0x80
 1847/D742 : =0x81                      T_BYE	= 0x80|1
 1848/D742 : (MACRO)                    	TOKEN	T_BYE,"BY",'E'
 1848/D742 : =>FALSE                             IF T_BYE == 0x80|79
 1848/D742 :                                      ; Convert T_BYE T_STAR to the more common '^' symbol.
 1848/D742 :                                      ; NOTE: if T_BYE token is added or deleted, DO NOT forget to update this!
 1848/D742 :                                      DB    '^'
 1848/D742 : =>TRUE                              ELSE
 1848/D742 : 81                                   DB    T_BYE
 1848/D743 : [1848]                              ENDIF
 1848/D743 : 42 59                               DB     "BY"
 1848/D745 : C5                                  DB     'E'|0x80
 1849/D746 : =0x82                      T_CLEAR	= 0x80|2
 1850/D746 : (MACRO)                    	TOKEN	T_CLEAR,"CLEA",'R'
 1850/D746 : =>FALSE                             IF T_CLEAR == 0x80|79
 1850/D746 :                                      ; Convert T_CLEAR T_STAR to the more common '^' symbol.
 1850/D746 :                                      ; NOTE: if T_CLEAR token is added or deleted, DO NOT forget to update this!
 1850/D746 :                                      DB    '^'
 1850/D746 : =>TRUE                              ELSE
 1850/D746 : 82                                   DB    T_CLEAR
 1850/D747 : [1850]                              ENDIF
 1850/D747 : 43 4C 45 41                         DB     "CLEA"
 1850/D74B : D2                                  DB     'R'|0x80
 1851/D74C : =0x83                      T_CLOAD	= 0x80|3
 1852/D74C : (MACRO)                    	TOKEN	T_CLOAD,"CLOA",'D'
 1852/D74C : =>FALSE                             IF T_CLOAD == 0x80|79
 1852/D74C :                                      ; Convert T_CLOAD T_STAR to the more common '^' symbol.
 1852/D74C :                                      ; NOTE: if T_CLOAD token is added or deleted, DO NOT forget to update this!
 1852/D74C :                                      DB    '^'
 1852/D74C : =>TRUE                              ELSE
 1852/D74C : 83                                   DB    T_CLOAD
 1852/D74D : [1852]                              ENDIF
 1852/D74D : 43 4C 4F 41                         DB     "CLOA"
 1852/D751 : C4                                  DB     'D'|0x80
 1853/D752 : =0x84                      T_CSAVE	= 0x80|4
 1854/D752 : (MACRO)                    	TOKEN	T_CSAVE,"CSAV",'E'
 1854/D752 : =>FALSE                             IF T_CSAVE == 0x80|79
 1854/D752 :                                      ; Convert T_CSAVE T_STAR to the more common '^' symbol.
 1854/D752 :                                      ; NOTE: if T_CSAVE token is added or deleted, DO NOT forget to update this!
 1854/D752 :                                      DB    '^'
 1854/D752 : =>TRUE                              ELSE
 1854/D752 : 84                                   DB    T_CSAVE
 1854/D753 : [1854]                              ENDIF
 1854/D753 : 43 53 41 56                         DB     "CSAV"
 1854/D757 : C5                                  DB     'E'|0x80
 1855/D758 : =0x85                      T_EDIT	= 0x80|5
 1856/D758 : (MACRO)                    	TOKEN	T_EDIT,"EDI",'T'
 1856/D758 : =>FALSE                             IF T_EDIT == 0x80|79
 1856/D758 :                                      ; Convert T_EDIT T_STAR to the more common '^' symbol.
 1856/D758 :                                      ; NOTE: if T_EDIT token is added or deleted, DO NOT forget to update this!
 1856/D758 :                                      DB    '^'
 1856/D758 : =>TRUE                              ELSE
 1856/D758 : 85                                   DB    T_EDIT
 1856/D759 : [1856]                              ENDIF
 1856/D759 : 45 44 49                            DB     "EDI"
 1856/D75C : D4                                  DB     'T'|0x80
 1857/D75D : =0x86                      T_LIST	= 0x80|6
 1858/D75D : (MACRO)                    	TOKEN	T_LIST,"LIS",'T'
 1858/D75D : =>FALSE                             IF T_LIST == 0x80|79
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 36 - 2024年05月30日 19時01分01秒


 1858/D75D :                                      ; Convert T_LIST T_STAR to the more common '^' symbol.
 1858/D75D :                                      ; NOTE: if T_LIST token is added or deleted, DO NOT forget to update this!
 1858/D75D :                                      DB    '^'
 1858/D75D : =>TRUE                              ELSE
 1858/D75D : 86                                   DB    T_LIST
 1858/D75E : [1858]                              ENDIF
 1858/D75E : 4C 49 53                            DB     "LIS"
 1858/D761 : D4                                  DB     'T'|0x80
 1859/D762 : =0x87                      T_NEW	= 0x80|7
 1860/D762 : (MACRO)                    	TOKEN	T_NEW,"NE",'W'
 1860/D762 : =>FALSE                             IF T_NEW == 0x80|79
 1860/D762 :                                      ; Convert T_NEW T_STAR to the more common '^' symbol.
 1860/D762 :                                      ; NOTE: if T_NEW token is added or deleted, DO NOT forget to update this!
 1860/D762 :                                      DB    '^'
 1860/D762 : =>TRUE                              ELSE
 1860/D762 : 87                                   DB    T_NEW
 1860/D763 : [1860]                              ENDIF
 1860/D763 : 4E 45                               DB     "NE"
 1860/D765 : D7                                  DB     'W'|0x80
 1861/D766 : =0x88                      T_RUN	= 0x80|8
 1862/D766 : (MACRO)                    	TOKEN	T_RUN,"RU",'N'
 1862/D766 : =>FALSE                             IF T_RUN == 0x80|79
 1862/D766 :                                      ; Convert T_RUN T_STAR to the more common '^' symbol.
 1862/D766 :                                      ; NOTE: if T_RUN token is added or deleted, DO NOT forget to update this!
 1862/D766 :                                      DB    '^'
 1862/D766 : =>TRUE                              ELSE
 1862/D766 : 88                                   DB    T_RUN
 1862/D767 : [1862]                              ENDIF
 1862/D767 : 52 55                               DB     "RU"
 1862/D769 : CE                                  DB     'N'|0x80
 1863/D76A : =0x89                      T_VERS	= 0x80|9
 1864/D76A : (MACRO)                    	TOKEN	T_VERS,"VER",'S'
 1864/D76A : =>FALSE                             IF T_VERS == 0x80|79
 1864/D76A :                                      ; Convert T_VERS T_STAR to the more common '^' symbol.
 1864/D76A :                                      ; NOTE: if T_VERS token is added or deleted, DO NOT forget to update this!
 1864/D76A :                                      DB    '^'
 1864/D76A : =>TRUE                              ELSE
 1864/D76A : 89                                   DB    T_VERS
 1864/D76B : [1864]                              ENDIF
 1864/D76B : 56 45 52                            DB     "VER"
 1864/D76E : D3                                  DB     'S'|0x80
 1865/D76F : =0x89                      T_LAST	= T_VERS			; last command
 1866/D76F : =0x8A                      T_DATA	= 0x80|10
 1867/D76F : (MACRO)                    	TOKEN	T_DATA,"DAT",'A'
 1867/D76F : =>FALSE                             IF T_DATA == 0x80|79
 1867/D76F :                                      ; Convert T_DATA T_STAR to the more common '^' symbol.
 1867/D76F :                                      ; NOTE: if T_DATA token is added or deleted, DO NOT forget to update this!
 1867/D76F :                                      DB    '^'
 1867/D76F : =>TRUE                              ELSE
 1867/D76F : 8A                                   DB    T_DATA
 1867/D770 : [1867]                              ENDIF
 1867/D770 : 44 41 54                            DB     "DAT"
 1867/D773 : C1                                  DB     'A'|0x80
 1868/D774 : =0x8B                      T_DEF	= 0x80|11
 1869/D774 : (MACRO)                    	TOKEN	T_DEF,"DE",'F'
 1869/D774 : =>FALSE                             IF T_DEF == 0x80|79
 1869/D774 :                                      ; Convert T_DEF T_STAR to the more common '^' symbol.
 1869/D774 :                                      ; NOTE: if T_DEF token is added or deleted, DO NOT forget to update this!
 1869/D774 :                                      DB    '^'
 1869/D774 : =>TRUE                              ELSE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 37 - 2024年05月30日 19時01分01秒


 1869/D774 : 8B                                   DB    T_DEF
 1869/D775 : [1869]                              ENDIF
 1869/D775 : 44 45                               DB     "DE"
 1869/D777 : C6                                  DB     'F'|0x80
 1870/D778 : =0x8C                      T_DIM	= 0x80|12
 1871/D778 : (MACRO)                    	TOKEN	T_DIM,"DI",'M'
 1871/D778 : =>FALSE                             IF T_DIM == 0x80|79
 1871/D778 :                                      ; Convert T_DIM T_STAR to the more common '^' symbol.
 1871/D778 :                                      ; NOTE: if T_DIM token is added or deleted, DO NOT forget to update this!
 1871/D778 :                                      DB    '^'
 1871/D778 : =>TRUE                              ELSE
 1871/D778 : 8C                                   DB    T_DIM
 1871/D779 : [1871]                              ENDIF
 1871/D779 : 44 49                               DB     "DI"
 1871/D77B : CD                                  DB     'M'|0x80
 1872/D77C : =0x8D                      T_DO	= 0x80|13
 1873/D77C : (MACRO)                    	TOKEN	T_DO,"D",'O'
 1873/D77C : =>FALSE                             IF T_DO == 0x80|79
 1873/D77C :                                      ; Convert T_DO T_STAR to the more common '^' symbol.
 1873/D77C :                                      ; NOTE: if T_DO token is added or deleted, DO NOT forget to update this!
 1873/D77C :                                      DB    '^'
 1873/D77C : =>TRUE                              ELSE
 1873/D77C : 8D                                   DB    T_DO
 1873/D77D : [1873]                              ENDIF
 1873/D77D : 44                                  DB     "D"
 1873/D77E : CF                                  DB     'O'|0x80
 1874/D77F : =0x8E                      T_ELSE	= 0x80|14
 1875/D77F : (MACRO)                    	TOKEN	T_ELSE,"ELS",'E'
 1875/D77F : =>FALSE                             IF T_ELSE == 0x80|79
 1875/D77F :                                      ; Convert T_ELSE T_STAR to the more common '^' symbol.
 1875/D77F :                                      ; NOTE: if T_ELSE token is added or deleted, DO NOT forget to update this!
 1875/D77F :                                      DB    '^'
 1875/D77F : =>TRUE                              ELSE
 1875/D77F : 8E                                   DB    T_ELSE
 1875/D780 : [1875]                              ENDIF
 1875/D780 : 45 4C 53                            DB     "ELS"
 1875/D783 : C5                                  DB     'E'|0x80
 1876/D784 : =0x8F                      T_END	= 0x80|15
 1877/D784 : (MACRO)                    	TOKEN	T_END,"EN",'D'
 1877/D784 : =>FALSE                             IF T_END == 0x80|79
 1877/D784 :                                      ; Convert T_END T_STAR to the more common '^' symbol.
 1877/D784 :                                      ; NOTE: if T_END token is added or deleted, DO NOT forget to update this!
 1877/D784 :                                      DB    '^'
 1877/D784 : =>TRUE                              ELSE
 1877/D784 : 8F                                   DB    T_END
 1877/D785 : [1877]                              ENDIF
 1877/D785 : 45 4E                               DB     "EN"
 1877/D787 : C4                                  DB     'D'|0x80
 1878/D788 : =0x90                      T_FOR	= 0x80|16
 1879/D788 : (MACRO)                    	TOKEN	T_FOR,"FO",'R'
 1879/D788 : =>FALSE                             IF T_FOR == 0x80|79
 1879/D788 :                                      ; Convert T_FOR T_STAR to the more common '^' symbol.
 1879/D788 :                                      ; NOTE: if T_FOR token is added or deleted, DO NOT forget to update this!
 1879/D788 :                                      DB    '^'
 1879/D788 : =>TRUE                              ELSE
 1879/D788 : 90                                   DB    T_FOR
 1879/D789 : [1879]                              ENDIF
 1879/D789 : 46 4F                               DB     "FO"
 1879/D78B : D2                                  DB     'R'|0x80
 1880/D78C : =0x91                      T_GOSUB	= 0x80|17
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 38 - 2024年05月30日 19時01分01秒


 1881/D78C : (MACRO)                    	TOKEN	T_GOSUB,"GOSU",'B'
 1881/D78C : =>FALSE                             IF T_GOSUB == 0x80|79
 1881/D78C :                                      ; Convert T_GOSUB T_STAR to the more common '^' symbol.
 1881/D78C :                                      ; NOTE: if T_GOSUB token is added or deleted, DO NOT forget to update this!
 1881/D78C :                                      DB    '^'
 1881/D78C : =>TRUE                              ELSE
 1881/D78C : 91                                   DB    T_GOSUB
 1881/D78D : [1881]                              ENDIF
 1881/D78D : 47 4F 53 55                         DB     "GOSU"
 1881/D791 : C2                                  DB     'B'|0x80
 1882/D792 : =0x92                      T_GOTO	= 0x80|18
 1883/D792 : (MACRO)                    	TOKEN	T_GOTO,"GOT",'O'
 1883/D792 : =>FALSE                             IF T_GOTO == 0x80|79
 1883/D792 :                                      ; Convert T_GOTO T_STAR to the more common '^' symbol.
 1883/D792 :                                      ; NOTE: if T_GOTO token is added or deleted, DO NOT forget to update this!
 1883/D792 :                                      DB    '^'
 1883/D792 : =>TRUE                              ELSE
 1883/D792 : 92                                   DB    T_GOTO
 1883/D793 : [1883]                              ENDIF
 1883/D793 : 47 4F 54                            DB     "GOT"
 1883/D796 : CF                                  DB     'O'|0x80
 1884/D797 : =0x93                      T_IF	= 0x80|19
 1885/D797 : (MACRO)                    	TOKEN	T_IF,"I",'F'
 1885/D797 : =>FALSE                             IF T_IF == 0x80|79
 1885/D797 :                                      ; Convert T_IF T_STAR to the more common '^' symbol.
 1885/D797 :                                      ; NOTE: if T_IF token is added or deleted, DO NOT forget to update this!
 1885/D797 :                                      DB    '^'
 1885/D797 : =>TRUE                              ELSE
 1885/D797 : 93                                   DB    T_IF
 1885/D798 : [1885]                              ENDIF
 1885/D798 : 49                                  DB     "I"
 1885/D799 : C6                                  DB     'F'|0x80
 1886/D79A : =0x94                      T_INPUT	= 0x80|20
 1887/D79A : (MACRO)                    	TOKEN	T_INPUT,"INPU",'T'
 1887/D79A : =>FALSE                             IF T_INPUT == 0x80|79
 1887/D79A :                                      ; Convert T_INPUT T_STAR to the more common '^' symbol.
 1887/D79A :                                      ; NOTE: if T_INPUT token is added or deleted, DO NOT forget to update this!
 1887/D79A :                                      DB    '^'
 1887/D79A : =>TRUE                              ELSE
 1887/D79A : 94                                   DB    T_INPUT
 1887/D79B : [1887]                              ENDIF
 1887/D79B : 49 4E 50 55                         DB     "INPU"
 1887/D79F : D4                                  DB     'T'|0x80
 1888/D7A0 : =0x95                      T_LINK	= 0x80|21
 1889/D7A0 : (MACRO)                    	TOKEN	T_LINK,"LIN",'K'
 1889/D7A0 : =>FALSE                             IF T_LINK == 0x80|79
 1889/D7A0 :                                      ; Convert T_LINK T_STAR to the more common '^' symbol.
 1889/D7A0 :                                      ; NOTE: if T_LINK token is added or deleted, DO NOT forget to update this!
 1889/D7A0 :                                      DB    '^'
 1889/D7A0 : =>TRUE                              ELSE
 1889/D7A0 : 95                                   DB    T_LINK
 1889/D7A1 : [1889]                              ENDIF
 1889/D7A1 : 4C 49 4E                            DB     "LIN"
 1889/D7A4 : CB                                  DB     'K'|0x80
 1890/D7A5 : =0x96                      T_NEXT	= 0x80|22
 1891/D7A5 : (MACRO)                    	TOKEN	T_NEXT,"NEX",'T'
 1891/D7A5 : =>FALSE                             IF T_NEXT == 0x80|79
 1891/D7A5 :                                      ; Convert T_NEXT T_STAR to the more common '^' symbol.
 1891/D7A5 :                                      ; NOTE: if T_NEXT token is added or deleted, DO NOT forget to update this!
 1891/D7A5 :                                      DB    '^'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 39 - 2024年05月30日 19時01分01秒


 1891/D7A5 : =>TRUE                              ELSE
 1891/D7A5 : 96                                   DB    T_NEXT
 1891/D7A6 : [1891]                              ENDIF
 1891/D7A6 : 4E 45 58                            DB     "NEX"
 1891/D7A9 : D4                                  DB     'T'|0x80
 1892/D7AA : =0x97                      T_ON	= 0x80|23
 1893/D7AA : (MACRO)                    	TOKEN	T_ON,"O",'N'
 1893/D7AA : =>FALSE                             IF T_ON == 0x80|79
 1893/D7AA :                                      ; Convert T_ON T_STAR to the more common '^' symbol.
 1893/D7AA :                                      ; NOTE: if T_ON token is added or deleted, DO NOT forget to update this!
 1893/D7AA :                                      DB    '^'
 1893/D7AA : =>TRUE                              ELSE
 1893/D7AA : 97                                   DB    T_ON
 1893/D7AB : [1893]                              ENDIF
 1893/D7AB : 4F                                  DB     "O"
 1893/D7AC : CE                                  DB     'N'|0x80
 1894/D7AD : =0x98                      T_PAGE	= 0x80|24
 1895/D7AD : (MACRO)                    	TOKEN	T_PAGE,"PAG",'E'
 1895/D7AD : =>FALSE                             IF T_PAGE == 0x80|79
 1895/D7AD :                                      ; Convert T_PAGE T_STAR to the more common '^' symbol.
 1895/D7AD :                                      ; NOTE: if T_PAGE token is added or deleted, DO NOT forget to update this!
 1895/D7AD :                                      DB    '^'
 1895/D7AD : =>TRUE                              ELSE
 1895/D7AD : 98                                   DB    T_PAGE
 1895/D7AE : [1895]                              ENDIF
 1895/D7AE : 50 41 47                            DB     "PAG"
 1895/D7B1 : C5                                  DB     'E'|0x80
 1896/D7B2 : =0x99                      T_POKE	= 0x80|25
 1897/D7B2 : (MACRO)                    	TOKEN	T_POKE,"POK",'E'
 1897/D7B2 : =>FALSE                             IF T_POKE == 0x80|79
 1897/D7B2 :                                      ; Convert T_POKE T_STAR to the more common '^' symbol.
 1897/D7B2 :                                      ; NOTE: if T_POKE token is added or deleted, DO NOT forget to update this!
 1897/D7B2 :                                      DB    '^'
 1897/D7B2 : =>TRUE                              ELSE
 1897/D7B2 : 99                                   DB    T_POKE
 1897/D7B3 : [1897]                              ENDIF
 1897/D7B3 : 50 4F 4B                            DB     "POK"
 1897/D7B6 : C5                                  DB     'E'|0x80
 1898/D7B7 : =0x9A                      T_PRINT	= 0x80|26
 1899/D7B7 : (MACRO)                    	TOKEN	T_PRINT,"PRIN",'T'
 1899/D7B7 : =>FALSE                             IF T_PRINT == 0x80|79
 1899/D7B7 :                                      ; Convert T_PRINT T_STAR to the more common '^' symbol.
 1899/D7B7 :                                      ; NOTE: if T_PRINT token is added or deleted, DO NOT forget to update this!
 1899/D7B7 :                                      DB    '^'
 1899/D7B7 : =>TRUE                              ELSE
 1899/D7B7 : 9A                                   DB    T_PRINT
 1899/D7B8 : [1899]                              ENDIF
 1899/D7B8 : 50 52 49 4E                         DB     "PRIN"
 1899/D7BC : D4                                  DB     'T'|0x80
 1900/D7BD : =0x9B                      T_PR	= 0x80|27
 1901/D7BD : (MACRO)                    	TOKEN	T_PR,"P",'R'
 1901/D7BD : =>FALSE                             IF T_PR == 0x80|79
 1901/D7BD :                                      ; Convert T_PR T_STAR to the more common '^' symbol.
 1901/D7BD :                                      ; NOTE: if T_PR token is added or deleted, DO NOT forget to update this!
 1901/D7BD :                                      DB    '^'
 1901/D7BD : =>TRUE                              ELSE
 1901/D7BD : 9B                                   DB    T_PR
 1901/D7BE : [1901]                              ENDIF
 1901/D7BE : 50                                  DB     "P"
 1901/D7BF : D2                                  DB     'R'|0x80
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 40 - 2024年05月30日 19時01分01秒


 1902/D7C0 : =0x9C                      T_READ	= 0x80|28
 1903/D7C0 : (MACRO)                    	TOKEN	T_READ,"REA",'D'
 1903/D7C0 : =>FALSE                             IF T_READ == 0x80|79
 1903/D7C0 :                                      ; Convert T_READ T_STAR to the more common '^' symbol.
 1903/D7C0 :                                      ; NOTE: if T_READ token is added or deleted, DO NOT forget to update this!
 1903/D7C0 :                                      DB    '^'
 1903/D7C0 : =>TRUE                              ELSE
 1903/D7C0 : 9C                                   DB    T_READ
 1903/D7C1 : [1903]                              ENDIF
 1903/D7C1 : 52 45 41                            DB     "REA"
 1903/D7C4 : C4                                  DB     'D'|0x80
 1904/D7C5 : =0x9D                      T_REM	= 0x80|29
 1905/D7C5 : (MACRO)                    	TOKEN	T_REM,"RE",'M'
 1905/D7C5 : =>FALSE                             IF T_REM == 0x80|79
 1905/D7C5 :                                      ; Convert T_REM T_STAR to the more common '^' symbol.
 1905/D7C5 :                                      ; NOTE: if T_REM token is added or deleted, DO NOT forget to update this!
 1905/D7C5 :                                      DB    '^'
 1905/D7C5 : =>TRUE                              ELSE
 1905/D7C5 : 9D                                   DB    T_REM
 1905/D7C6 : [1905]                              ENDIF
 1905/D7C6 : 52 45                               DB     "RE"
 1905/D7C8 : CD                                  DB     'M'|0x80
 1906/D7C9 : =0x9E                      T_RESTORE = 0x80|30
 1907/D7C9 : (MACRO)                    	TOKEN	T_RESTORE,"RESTOR",'E'
 1907/D7C9 : =>FALSE                             IF T_RESTORE == 0x80|79
 1907/D7C9 :                                      ; Convert T_RESTORE T_STAR to the more common '^' symbol.
 1907/D7C9 :                                      ; NOTE: if T_RESTORE token is added or deleted, DO NOT forget to update this!
 1907/D7C9 :                                      DB    '^'
 1907/D7C9 : =>TRUE                              ELSE
 1907/D7C9 : 9E                                   DB    T_RESTORE
 1907/D7CA : [1907]                              ENDIF
 1907/D7CA : 52 45 53 54 4F 52                   DB     "RESTOR"
 1907/D7D0 : C5                                  DB     'E'|0x80
 1908/D7D1 : =0x9F                      T_RETURN = 0x80|31
 1909/D7D1 : (MACRO)                    	TOKEN	T_RETURN,"RETUR",'N'
 1909/D7D1 : =>FALSE                             IF T_RETURN == 0x80|79
 1909/D7D1 :                                      ; Convert T_RETURN T_STAR to the more common '^' symbol.
 1909/D7D1 :                                      ; NOTE: if T_RETURN token is added or deleted, DO NOT forget to update this!
 1909/D7D1 :                                      DB    '^'
 1909/D7D1 : =>TRUE                              ELSE
 1909/D7D1 : 9F                                   DB    T_RETURN
 1909/D7D2 : [1909]                              ENDIF
 1909/D7D2 : 52 45 54 55 52                      DB     "RETUR"
 1909/D7D7 : CE                                  DB     'N'|0x80
 1910/D7D8 : =0xA0                      T_STAT	= 0x80|32
 1911/D7D8 : (MACRO)                    	TOKEN	T_STAT,"STA",'T'
 1911/D7D8 : =>FALSE                             IF T_STAT == 0x80|79
 1911/D7D8 :                                      ; Convert T_STAT T_STAR to the more common '^' symbol.
 1911/D7D8 :                                      ; NOTE: if T_STAT token is added or deleted, DO NOT forget to update this!
 1911/D7D8 :                                      DB    '^'
 1911/D7D8 : =>TRUE                              ELSE
 1911/D7D8 : A0                                   DB    T_STAT
 1911/D7D9 : [1911]                              ENDIF
 1911/D7D9 : 53 54 41                            DB     "STA"
 1911/D7DC : D4                                  DB     'T'|0x80
 1912/D7DD : =0xA1                      T_UNTIL	= 0x80|33
 1913/D7DD : (MACRO)                    	TOKEN	T_UNTIL,"UNTI",'L'
 1913/D7DD : =>FALSE                             IF T_UNTIL == 0x80|79
 1913/D7DD :                                      ; Convert T_UNTIL T_STAR to the more common '^' symbol.
 1913/D7DD :                                      ; NOTE: if T_UNTIL token is added or deleted, DO NOT forget to update this!
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 41 - 2024年05月30日 19時01分01秒


 1913/D7DD :                                      DB    '^'
 1913/D7DD : =>TRUE                              ELSE
 1913/D7DD : A1                                   DB    T_UNTIL
 1913/D7DE : [1913]                              ENDIF
 1913/D7DE : 55 4E 54 49                         DB     "UNTI"
 1913/D7E2 : CC                                  DB     'L'|0x80
 1914/D7E3 : =0xA2                      T_LET	= 0x80|34
 1915/D7E3 : (MACRO)                    	TOKEN	T_LET,"LE",'T'
 1915/D7E3 : =>FALSE                             IF T_LET == 0x80|79
 1915/D7E3 :                                      ; Convert T_LET T_STAR to the more common '^' symbol.
 1915/D7E3 :                                      ; NOTE: if T_LET token is added or deleted, DO NOT forget to update this!
 1915/D7E3 :                                      DB    '^'
 1915/D7E3 : =>TRUE                              ELSE
 1915/D7E3 : A2                                   DB    T_LET
 1915/D7E4 : [1915]                              ENDIF
 1915/D7E4 : 4C 45                               DB     "LE"
 1915/D7E6 : D4                                  DB     'T'|0x80
 1916/D7E7 : =0xA3                      T_AND	= 0x80|35
 1917/D7E7 : (MACRO)                    	TOKEN	T_AND,"AN",'D'
 1917/D7E7 : =>FALSE                             IF T_AND == 0x80|79
 1917/D7E7 :                                      ; Convert T_AND T_STAR to the more common '^' symbol.
 1917/D7E7 :                                      ; NOTE: if T_AND token is added or deleted, DO NOT forget to update this!
 1917/D7E7 :                                      DB    '^'
 1917/D7E7 : =>TRUE                              ELSE
 1917/D7E7 : A3                                   DB    T_AND
 1917/D7E8 : [1917]                              ENDIF
 1917/D7E8 : 41 4E                               DB     "AN"
 1917/D7EA : C4                                  DB     'D'|0x80
 1918/D7EB : =0xA4                      T_DIV	= 0x80|36
 1919/D7EB : (MACRO)                    	TOKEN	T_DIV,"DI",'V'
 1919/D7EB : =>FALSE                             IF T_DIV == 0x80|79
 1919/D7EB :                                      ; Convert T_DIV T_STAR to the more common '^' symbol.
 1919/D7EB :                                      ; NOTE: if T_DIV token is added or deleted, DO NOT forget to update this!
 1919/D7EB :                                      DB    '^'
 1919/D7EB : =>TRUE                              ELSE
 1919/D7EB : A4                                   DB    T_DIV
 1919/D7EC : [1919]                              ENDIF
 1919/D7EC : 44 49                               DB     "DI"
 1919/D7EE : D6                                  DB     'V'|0x80
 1920/D7EF : =0xA5                      T_EXOR	= 0x80|37
 1921/D7EF : (MACRO)                    	TOKEN	T_EXOR,"EXO",'R'
 1921/D7EF : =>FALSE                             IF T_EXOR == 0x80|79
 1921/D7EF :                                      ; Convert T_EXOR T_STAR to the more common '^' symbol.
 1921/D7EF :                                      ; NOTE: if T_EXOR token is added or deleted, DO NOT forget to update this!
 1921/D7EF :                                      DB    '^'
 1921/D7EF : =>TRUE                              ELSE
 1921/D7EF : A5                                   DB    T_EXOR
 1921/D7F0 : [1921]                              ENDIF
 1921/D7F0 : 45 58 4F                            DB     "EXO"
 1921/D7F3 : D2                                  DB     'R'|0x80
 1922/D7F4 : =0xA6                      T_MOD	= 0x80|38
 1923/D7F4 : (MACRO)                    	TOKEN	T_MOD,"MO",'D'
 1923/D7F4 : =>FALSE                             IF T_MOD == 0x80|79
 1923/D7F4 :                                      ; Convert T_MOD T_STAR to the more common '^' symbol.
 1923/D7F4 :                                      ; NOTE: if T_MOD token is added or deleted, DO NOT forget to update this!
 1923/D7F4 :                                      DB    '^'
 1923/D7F4 : =>TRUE                              ELSE
 1923/D7F4 : A6                                   DB    T_MOD
 1923/D7F5 : [1923]                              ENDIF
 1923/D7F5 : 4D 4F                               DB     "MO"
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 42 - 2024年05月30日 19時01分01秒


 1923/D7F7 : C4                                  DB     'D'|0x80
 1924/D7F8 : =0xA7                      T_OR	= 0x80|39
 1925/D7F8 : (MACRO)                    	TOKEN	T_OR,"O",'R'
 1925/D7F8 : =>FALSE                             IF T_OR == 0x80|79
 1925/D7F8 :                                      ; Convert T_OR T_STAR to the more common '^' symbol.
 1925/D7F8 :                                      ; NOTE: if T_OR token is added or deleted, DO NOT forget to update this!
 1925/D7F8 :                                      DB    '^'
 1925/D7F8 : =>TRUE                              ELSE
 1925/D7F8 : A7                                   DB    T_OR
 1925/D7F9 : [1925]                              ENDIF
 1925/D7F9 : 4F                                  DB     "O"
 1925/D7FA : D2                                  DB     'R'|0x80
 1926/D7FB : =0xA8                      T_PEEK	= 0x80|40
 1927/D7FB : (MACRO)                    	TOKEN	T_PEEK,"PEE",'K'
 1927/D7FB : =>FALSE                             IF T_PEEK == 0x80|79
 1927/D7FB :                                      ; Convert T_PEEK T_STAR to the more common '^' symbol.
 1927/D7FB :                                      ; NOTE: if T_PEEK token is added or deleted, DO NOT forget to update this!
 1927/D7FB :                                      DB    '^'
 1927/D7FB : =>TRUE                              ELSE
 1927/D7FB : A8                                   DB    T_PEEK
 1927/D7FC : [1927]                              ENDIF
 1927/D7FC : 50 45 45                            DB     "PEE"
 1927/D7FF : CB                                  DB     'K'|0x80
 1928/D800 : =0xA9                      T_LE	= 0x80|41
 1929/D800 : (MACRO)                    	TOKEN	T_LE,"<",'='
 1929/D800 : =>FALSE                             IF T_LE == 0x80|79
 1929/D800 :                                      ; Convert T_LE T_STAR to the more common '^' symbol.
 1929/D800 :                                      ; NOTE: if T_LE token is added or deleted, DO NOT forget to update this!
 1929/D800 :                                      DB    '^'
 1929/D800 : =>TRUE                              ELSE
 1929/D800 : A9                                   DB    T_LE
 1929/D801 : [1929]                              ENDIF
 1929/D801 : 3C                                  DB     "<"
 1929/D802 : BD                                  DB     '='|0x80
 1930/D803 : =0xAA                      T_GE	= 0x80|42
 1931/D803 : (MACRO)                    	TOKEN	T_GE,">",'='
 1931/D803 : =>FALSE                             IF T_GE == 0x80|79
 1931/D803 :                                      ; Convert T_GE T_STAR to the more common '^' symbol.
 1931/D803 :                                      ; NOTE: if T_GE token is added or deleted, DO NOT forget to update this!
 1931/D803 :                                      DB    '^'
 1931/D803 : =>TRUE                              ELSE
 1931/D803 : AA                                   DB    T_GE
 1931/D804 : [1931]                              ENDIF
 1931/D804 : 3E                                  DB     ">"
 1931/D805 : BD                                  DB     '='|0x80
 1932/D806 : =0xAB                      T_NE	= 0x80|43
 1933/D806 : (MACRO)                    	TOKEN	T_NE,"<",'>'
 1933/D806 : =>FALSE                             IF T_NE == 0x80|79
 1933/D806 :                                      ; Convert T_NE T_STAR to the more common '^' symbol.
 1933/D806 :                                      ; NOTE: if T_NE token is added or deleted, DO NOT forget to update this!
 1933/D806 :                                      DB    '^'
 1933/D806 : =>TRUE                              ELSE
 1933/D806 : AB                                   DB    T_NE
 1933/D807 : [1933]                              ENDIF
 1933/D807 : 3C                                  DB     "<"
 1933/D808 : BE                                  DB     '>'|0x80
 1934/D809 : =0xAC                      T_ABS	= 0x80|44
 1935/D809 : (MACRO)                    	TOKEN	T_ABS,"AB",'S'
 1935/D809 : =>FALSE                             IF T_ABS == 0x80|79
 1935/D809 :                                      ; Convert T_ABS T_STAR to the more common '^' symbol.
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 43 - 2024年05月30日 19時01分01秒


 1935/D809 :                                      ; NOTE: if T_ABS token is added or deleted, DO NOT forget to update this!
 1935/D809 :                                      DB    '^'
 1935/D809 : =>TRUE                              ELSE
 1935/D809 : AC                                   DB    T_ABS
 1935/D80A : [1935]                              ENDIF
 1935/D80A : 41 42                               DB     "AB"
 1935/D80C : D3                                  DB     'S'|0x80
 1936/D80D : =0xAD                      T_ATN	= 0x80|45
 1937/D80D : (MACRO)                    	TOKEN	T_ATN,"AT",'N'
 1937/D80D : =>FALSE                             IF T_ATN == 0x80|79
 1937/D80D :                                      ; Convert T_ATN T_STAR to the more common '^' symbol.
 1937/D80D :                                      ; NOTE: if T_ATN token is added or deleted, DO NOT forget to update this!
 1937/D80D :                                      DB    '^'
 1937/D80D : =>TRUE                              ELSE
 1937/D80D : AD                                   DB    T_ATN
 1937/D80E : [1937]                              ENDIF
 1937/D80E : 41 54                               DB     "AT"
 1937/D810 : CE                                  DB     'N'|0x80
 1938/D811 : =0xAE                      T_COS	= 0x80|46
 1939/D811 : (MACRO)                    	TOKEN	T_COS,"CO",'S'
 1939/D811 : =>FALSE                             IF T_COS == 0x80|79
 1939/D811 :                                      ; Convert T_COS T_STAR to the more common '^' symbol.
 1939/D811 :                                      ; NOTE: if T_COS token is added or deleted, DO NOT forget to update this!
 1939/D811 :                                      DB    '^'
 1939/D811 : =>TRUE                              ELSE
 1939/D811 : AE                                   DB    T_COS
 1939/D812 : [1939]                              ENDIF
 1939/D812 : 43 4F                               DB     "CO"
 1939/D814 : D3                                  DB     'S'|0x80
 1940/D815 : =0xAF                      T_EXP	= 0x80|47
 1941/D815 : (MACRO)                    	TOKEN	T_EXP,"EX",'P'
 1941/D815 : =>FALSE                             IF T_EXP == 0x80|79
 1941/D815 :                                      ; Convert T_EXP T_STAR to the more common '^' symbol.
 1941/D815 :                                      ; NOTE: if T_EXP token is added or deleted, DO NOT forget to update this!
 1941/D815 :                                      DB    '^'
 1941/D815 : =>TRUE                              ELSE
 1941/D815 : AF                                   DB    T_EXP
 1941/D816 : [1941]                              ENDIF
 1941/D816 : 45 58                               DB     "EX"
 1941/D818 : D0                                  DB     'P'|0x80
 1942/D819 : =0xB0                      T_FN	= 0x80|48
 1943/D819 : (MACRO)                    	TOKEN	T_FN,"F",'N'
 1943/D819 : =>FALSE                             IF T_FN == 0x80|79
 1943/D819 :                                      ; Convert T_FN T_STAR to the more common '^' symbol.
 1943/D819 :                                      ; NOTE: if T_FN token is added or deleted, DO NOT forget to update this!
 1943/D819 :                                      DB    '^'
 1943/D819 : =>TRUE                              ELSE
 1943/D819 : B0                                   DB    T_FN
 1943/D81A : [1943]                              ENDIF
 1943/D81A : 46                                  DB     "F"
 1943/D81B : CE                                  DB     'N'|0x80
 1944/D81C : =0xB1                      T_INT	= 0x80|49
 1945/D81C : (MACRO)                    	TOKEN	T_INT,"IN",'T'
 1945/D81C : =>FALSE                             IF T_INT == 0x80|79
 1945/D81C :                                      ; Convert T_INT T_STAR to the more common '^' symbol.
 1945/D81C :                                      ; NOTE: if T_INT token is added or deleted, DO NOT forget to update this!
 1945/D81C :                                      DB    '^'
 1945/D81C : =>TRUE                              ELSE
 1945/D81C : B1                                   DB    T_INT
 1945/D81D : [1945]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 44 - 2024年05月30日 19時01分01秒


 1945/D81D : 49 4E                               DB     "IN"
 1945/D81F : D4                                  DB     'T'|0x80
 1946/D820 : =0xB2                      T_LB	= 0x80|50
 1947/D820 : (MACRO)                    	TOKEN	T_LB,"L",'B'
 1947/D820 : =>FALSE                             IF T_LB == 0x80|79
 1947/D820 :                                      ; Convert T_LB T_STAR to the more common '^' symbol.
 1947/D820 :                                      ; NOTE: if T_LB token is added or deleted, DO NOT forget to update this!
 1947/D820 :                                      DB    '^'
 1947/D820 : =>TRUE                              ELSE
 1947/D820 : B2                                   DB    T_LB
 1947/D821 : [1947]                              ENDIF
 1947/D821 : 4C                                  DB     "L"
 1947/D822 : C2                                  DB     'B'|0x80
 1948/D823 : =0xB3                      T_LG	= 0x80|51
 1949/D823 : (MACRO)                    	TOKEN	T_LG,"L",'G'
 1949/D823 : =>FALSE                             IF T_LG == 0x80|79
 1949/D823 :                                      ; Convert T_LG T_STAR to the more common '^' symbol.
 1949/D823 :                                      ; NOTE: if T_LG token is added or deleted, DO NOT forget to update this!
 1949/D823 :                                      DB    '^'
 1949/D823 : =>TRUE                              ELSE
 1949/D823 : B3                                   DB    T_LG
 1949/D824 : [1949]                              ENDIF
 1949/D824 : 4C                                  DB     "L"
 1949/D825 : C7                                  DB     'G'|0x80
 1950/D826 : =0xB4                      T_LN	= 0x80|52
 1951/D826 : (MACRO)                    	TOKEN	T_LN,"L",'N'
 1951/D826 : =>FALSE                             IF T_LN == 0x80|79
 1951/D826 :                                      ; Convert T_LN T_STAR to the more common '^' symbol.
 1951/D826 :                                      ; NOTE: if T_LN token is added or deleted, DO NOT forget to update this!
 1951/D826 :                                      DB    '^'
 1951/D826 : =>TRUE                              ELSE
 1951/D826 : B4                                   DB    T_LN
 1951/D827 : [1951]                              ENDIF
 1951/D827 : 4C                                  DB     "L"
 1951/D828 : CE                                  DB     'N'|0x80
 1952/D829 : =0xB5                      T_NOT	= 0x80|53
 1953/D829 : (MACRO)                    	TOKEN	T_NOT,"NO",'T'
 1953/D829 : =>FALSE                             IF T_NOT == 0x80|79
 1953/D829 :                                      ; Convert T_NOT T_STAR to the more common '^' symbol.
 1953/D829 :                                      ; NOTE: if T_NOT token is added or deleted, DO NOT forget to update this!
 1953/D829 :                                      DB    '^'
 1953/D829 : =>TRUE                              ELSE
 1953/D829 : B5                                   DB    T_NOT
 1953/D82A : [1953]                              ENDIF
 1953/D82A : 4E 4F                               DB     "NO"
 1953/D82C : D4                                  DB     'T'|0x80
 1954/D82D : =0xB6                      T_PI	= 0x80|54
 1955/D82D : (MACRO)                    	TOKEN	T_PI,"P",'I'
 1955/D82D : =>FALSE                             IF T_PI == 0x80|79
 1955/D82D :                                      ; Convert T_PI T_STAR to the more common '^' symbol.
 1955/D82D :                                      ; NOTE: if T_PI token is added or deleted, DO NOT forget to update this!
 1955/D82D :                                      DB    '^'
 1955/D82D : =>TRUE                              ELSE
 1955/D82D : B6                                   DB    T_PI
 1955/D82E : [1955]                              ENDIF
 1955/D82E : 50                                  DB     "P"
 1955/D82F : C9                                  DB     'I'|0x80
 1956/D830 : =0xB7                      T_RND	= 0x80|55
 1957/D830 : (MACRO)                    	TOKEN	T_RND,"RN",'D'
 1957/D830 : =>FALSE                             IF T_RND == 0x80|79
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 45 - 2024年05月30日 19時01分01秒


 1957/D830 :                                      ; Convert T_RND T_STAR to the more common '^' symbol.
 1957/D830 :                                      ; NOTE: if T_RND token is added or deleted, DO NOT forget to update this!
 1957/D830 :                                      DB    '^'
 1957/D830 : =>TRUE                              ELSE
 1957/D830 : B7                                   DB    T_RND
 1957/D831 : [1957]                              ENDIF
 1957/D831 : 52 4E                               DB     "RN"
 1957/D833 : C4                                  DB     'D'|0x80
 1958/D834 : =0xB8                      T_SGN	= 0x80|56
 1959/D834 : (MACRO)                    	TOKEN	T_SGN,"SG",'N'
 1959/D834 : =>FALSE                             IF T_SGN == 0x80|79
 1959/D834 :                                      ; Convert T_SGN T_STAR to the more common '^' symbol.
 1959/D834 :                                      ; NOTE: if T_SGN token is added or deleted, DO NOT forget to update this!
 1959/D834 :                                      DB    '^'
 1959/D834 : =>TRUE                              ELSE
 1959/D834 : B8                                   DB    T_SGN
 1959/D835 : [1959]                              ENDIF
 1959/D835 : 53 47                               DB     "SG"
 1959/D837 : CE                                  DB     'N'|0x80
 1960/D838 : =0xB9                      T_SIN	= 0x80|57
 1961/D838 : (MACRO)                    	TOKEN	T_SIN,"SI",'N'
 1961/D838 : =>FALSE                             IF T_SIN == 0x80|79
 1961/D838 :                                      ; Convert T_SIN T_STAR to the more common '^' symbol.
 1961/D838 :                                      ; NOTE: if T_SIN token is added or deleted, DO NOT forget to update this!
 1961/D838 :                                      DB    '^'
 1961/D838 : =>TRUE                              ELSE
 1961/D838 : B9                                   DB    T_SIN
 1961/D839 : [1961]                              ENDIF
 1961/D839 : 53 49                               DB     "SI"
 1961/D83B : CE                                  DB     'N'|0x80
 1962/D83C : =0xBA                      T_SQR	= 0x80|58
 1963/D83C : (MACRO)                    	TOKEN	T_SQR,"SQ",'R'
 1963/D83C : =>FALSE                             IF T_SQR == 0x80|79
 1963/D83C :                                      ; Convert T_SQR T_STAR to the more common '^' symbol.
 1963/D83C :                                      ; NOTE: if T_SQR token is added or deleted, DO NOT forget to update this!
 1963/D83C :                                      DB    '^'
 1963/D83C : =>TRUE                              ELSE
 1963/D83C : BA                                   DB    T_SQR
 1963/D83D : [1963]                              ENDIF
 1963/D83D : 53 51                               DB     "SQ"
 1963/D83F : D2                                  DB     'R'|0x80
 1964/D840 : =0xBB                      T_TAN	= 0x80|59
 1965/D840 : (MACRO)                    	TOKEN	T_TAN,"TA",'N'
 1965/D840 : =>FALSE                             IF T_TAN == 0x80|79
 1965/D840 :                                      ; Convert T_TAN T_STAR to the more common '^' symbol.
 1965/D840 :                                      ; NOTE: if T_TAN token is added or deleted, DO NOT forget to update this!
 1965/D840 :                                      DB    '^'
 1965/D840 : =>TRUE                              ELSE
 1965/D840 : BB                                   DB    T_TAN
 1965/D841 : [1965]                              ENDIF
 1965/D841 : 54 41                               DB     "TA"
 1965/D843 : CE                                  DB     'N'|0x80
 1966/D844 : =0xBC                      T_VAL	= 0x80|60
 1967/D844 : (MACRO)                    	TOKEN	T_VAL,"VA",'L'
 1967/D844 : =>FALSE                             IF T_VAL == 0x80|79
 1967/D844 :                                      ; Convert T_VAL T_STAR to the more common '^' symbol.
 1967/D844 :                                      ; NOTE: if T_VAL token is added or deleted, DO NOT forget to update this!
 1967/D844 :                                      DB    '^'
 1967/D844 : =>TRUE                              ELSE
 1967/D844 : BC                                   DB    T_VAL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 46 - 2024年05月30日 19時01分01秒


 1967/D845 : [1967]                              ENDIF
 1967/D845 : 56 41                               DB     "VA"
 1967/D847 : CC                                  DB     'L'|0x80
 1968/D848 : =0xBD                      T_ASC	= 0x80|61
 1969/D848 : (MACRO)                    	TOKEN	T_ASC,"AS",'C'
 1969/D848 : =>FALSE                             IF T_ASC == 0x80|79
 1969/D848 :                                      ; Convert T_ASC T_STAR to the more common '^' symbol.
 1969/D848 :                                      ; NOTE: if T_ASC token is added or deleted, DO NOT forget to update this!
 1969/D848 :                                      DB    '^'
 1969/D848 : =>TRUE                              ELSE
 1969/D848 : BD                                   DB    T_ASC
 1969/D849 : [1969]                              ENDIF
 1969/D849 : 41 53                               DB     "AS"
 1969/D84B : C3                                  DB     'C'|0x80
 1970/D84C : =0xBE                      T_FREE	= 0x80|62
 1971/D84C : (MACRO)                    	TOKEN	T_FREE,"FRE",'E'
 1971/D84C : =>FALSE                             IF T_FREE == 0x80|79
 1971/D84C :                                      ; Convert T_FREE T_STAR to the more common '^' symbol.
 1971/D84C :                                      ; NOTE: if T_FREE token is added or deleted, DO NOT forget to update this!
 1971/D84C :                                      DB    '^'
 1971/D84C : =>TRUE                              ELSE
 1971/D84C : BE                                   DB    T_FREE
 1971/D84D : [1971]                              ENDIF
 1971/D84D : 46 52 45                            DB     "FRE"
 1971/D850 : C5                                  DB     'E'|0x80
 1972/D851 : =0xBF                      T_LEN	= 0x80|63
 1973/D851 : (MACRO)                    	TOKEN	T_LEN,"LE",'N'
 1973/D851 : =>FALSE                             IF T_LEN == 0x80|79
 1973/D851 :                                      ; Convert T_LEN T_STAR to the more common '^' symbol.
 1973/D851 :                                      ; NOTE: if T_LEN token is added or deleted, DO NOT forget to update this!
 1973/D851 :                                      DB    '^'
 1973/D851 : =>TRUE                              ELSE
 1973/D851 : BF                                   DB    T_LEN
 1973/D852 : [1973]                              ENDIF
 1973/D852 : 4C 45                               DB     "LE"
 1973/D854 : CE                                  DB     'N'|0x80
 1974/D855 : =0xC0                      T_POS	= 0x80|64
 1975/D855 : (MACRO)                    	TOKEN	T_POS,"PO",'S'
 1975/D855 : =>FALSE                             IF T_POS == 0x80|79
 1975/D855 :                                      ; Convert T_POS T_STAR to the more common '^' symbol.
 1975/D855 :                                      ; NOTE: if T_POS token is added or deleted, DO NOT forget to update this!
 1975/D855 :                                      DB    '^'
 1975/D855 : =>TRUE                              ELSE
 1975/D855 : C0                                   DB    T_POS
 1975/D856 : [1975]                              ENDIF
 1975/D856 : 50 4F                               DB     "PO"
 1975/D858 : D3                                  DB     'S'|0x80
 1976/D859 : =0xC1                      T_TOP	= 0x80|65
 1977/D859 : (MACRO)                    	TOKEN	T_TOP,"TO",'P'
 1977/D859 : =>FALSE                             IF T_TOP == 0x80|79
 1977/D859 :                                      ; Convert T_TOP T_STAR to the more common '^' symbol.
 1977/D859 :                                      ; NOTE: if T_TOP token is added or deleted, DO NOT forget to update this!
 1977/D859 :                                      DB    '^'
 1977/D859 : =>TRUE                              ELSE
 1977/D859 : C1                                   DB    T_TOP
 1977/D85A : [1977]                              ENDIF
 1977/D85A : 54 4F                               DB     "TO"
 1977/D85C : D0                                  DB     'P'|0x80
 1978/D85D : =0xC2                      T_STEP	= 0x80|66
 1979/D85D : (MACRO)                    	TOKEN	T_STEP,"STE",'P'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 47 - 2024年05月30日 19時01分01秒


 1979/D85D : =>FALSE                             IF T_STEP == 0x80|79
 1979/D85D :                                      ; Convert T_STEP T_STAR to the more common '^' symbol.
 1979/D85D :                                      ; NOTE: if T_STEP token is added or deleted, DO NOT forget to update this!
 1979/D85D :                                      DB    '^'
 1979/D85D : =>TRUE                              ELSE
 1979/D85D : C2                                   DB    T_STEP
 1979/D85E : [1979]                              ENDIF
 1979/D85E : 53 54 45                            DB     "STE"
 1979/D861 : D0                                  DB     'P'|0x80
 1980/D862 : =0xC3                      T_THEN	= 0x80|67
 1981/D862 : (MACRO)                    	TOKEN	T_THEN,"THE",'N'
 1981/D862 : =>FALSE                             IF T_THEN == 0x80|79
 1981/D862 :                                      ; Convert T_THEN T_STAR to the more common '^' symbol.
 1981/D862 :                                      ; NOTE: if T_THEN token is added or deleted, DO NOT forget to update this!
 1981/D862 :                                      DB    '^'
 1981/D862 : =>TRUE                              ELSE
 1981/D862 : C3                                   DB    T_THEN
 1981/D863 : [1981]                              ENDIF
 1981/D863 : 54 48 45                            DB     "THE"
 1981/D866 : CE                                  DB     'N'|0x80
 1982/D867 : =0xC4                      T_TO	= 0x80|68
 1983/D867 : (MACRO)                    	TOKEN	T_TO,"T",'O'
 1983/D867 : =>FALSE                             IF T_TO == 0x80|79
 1983/D867 :                                      ; Convert T_TO T_STAR to the more common '^' symbol.
 1983/D867 :                                      ; NOTE: if T_TO token is added or deleted, DO NOT forget to update this!
 1983/D867 :                                      DB    '^'
 1983/D867 : =>TRUE                              ELSE
 1983/D867 : C4                                   DB    T_TO
 1983/D868 : [1983]                              ENDIF
 1983/D868 : 54                                  DB     "T"
 1983/D869 : CF                                  DB     'O'|0x80
 1984/D86A : =0xC5                      T_CHR	= 0x80|69
 1985/D86A : (MACRO)                    	TOKEN	T_CHR,"CHR",'$'
 1985/D86A : =>FALSE                             IF T_CHR == 0x80|79
 1985/D86A :                                      ; Convert T_CHR T_STAR to the more common '^' symbol.
 1985/D86A :                                      ; NOTE: if T_CHR token is added or deleted, DO NOT forget to update this!
 1985/D86A :                                      DB    '^'
 1985/D86A : =>TRUE                              ELSE
 1985/D86A : C5                                   DB    T_CHR
 1985/D86B : [1985]                              ENDIF
 1985/D86B : 43 48 52                            DB     "CHR"
 1985/D86E : A4                                  DB     '$'|0x80
 1986/D86F : =0xC6                      T_LEFT	= 0x80|70
 1987/D86F : (MACRO)                    	TOKEN	T_LEFT,"LEFT",'$'
 1987/D86F : =>FALSE                             IF T_LEFT == 0x80|79
 1987/D86F :                                      ; Convert T_LEFT T_STAR to the more common '^' symbol.
 1987/D86F :                                      ; NOTE: if T_LEFT token is added or deleted, DO NOT forget to update this!
 1987/D86F :                                      DB    '^'
 1987/D86F : =>TRUE                              ELSE
 1987/D86F : C6                                   DB    T_LEFT
 1987/D870 : [1987]                              ENDIF
 1987/D870 : 4C 45 46 54                         DB     "LEFT"
 1987/D874 : A4                                  DB     '$'|0x80
 1988/D875 : =0xC7                      T_MID	= 0x80|71
 1989/D875 : (MACRO)                    	TOKEN	T_MID,"MID",'$'
 1989/D875 : =>FALSE                             IF T_MID == 0x80|79
 1989/D875 :                                      ; Convert T_MID T_STAR to the more common '^' symbol.
 1989/D875 :                                      ; NOTE: if T_MID token is added or deleted, DO NOT forget to update this!
 1989/D875 :                                      DB    '^'
 1989/D875 : =>TRUE                              ELSE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 48 - 2024年05月30日 19時01分01秒


 1989/D875 : C7                                   DB    T_MID
 1989/D876 : [1989]                              ENDIF
 1989/D876 : 4D 49 44                            DB     "MID"
 1989/D879 : A4                                  DB     '$'|0x80
 1990/D87A : =0xC8                      T_RIGHT	= 0x80|72
 1991/D87A : (MACRO)                    	TOKEN	T_RIGHT,"RIGHT",'$'
 1991/D87A : =>FALSE                             IF T_RIGHT == 0x80|79
 1991/D87A :                                      ; Convert T_RIGHT T_STAR to the more common '^' symbol.
 1991/D87A :                                      ; NOTE: if T_RIGHT token is added or deleted, DO NOT forget to update this!
 1991/D87A :                                      DB    '^'
 1991/D87A : =>TRUE                              ELSE
 1991/D87A : C8                                   DB    T_RIGHT
 1991/D87B : [1991]                              ENDIF
 1991/D87B : 52 49 47 48 54                      DB     "RIGHT"
 1991/D880 : A4                                  DB     '$'|0x80
 1992/D881 : =0xC9                      T_SPC	= 0x80|73
 1993/D881 : (MACRO)                    	TOKEN	T_SPC,"SP",'C'
 1993/D881 : =>FALSE                             IF T_SPC == 0x80|79
 1993/D881 :                                      ; Convert T_SPC T_STAR to the more common '^' symbol.
 1993/D881 :                                      ; NOTE: if T_SPC token is added or deleted, DO NOT forget to update this!
 1993/D881 :                                      DB    '^'
 1993/D881 : =>TRUE                              ELSE
 1993/D881 : C9                                   DB    T_SPC
 1993/D882 : [1993]                              ENDIF
 1993/D882 : 53 50                               DB     "SP"
 1993/D884 : C3                                  DB     'C'|0x80
 1994/D885 : =0xCA                      T_STR	= 0x80|74
 1995/D885 : (MACRO)                    	TOKEN	T_STR,"STR",'$'
 1995/D885 : =>FALSE                             IF T_STR == 0x80|79
 1995/D885 :                                      ; Convert T_STR T_STAR to the more common '^' symbol.
 1995/D885 :                                      ; NOTE: if T_STR token is added or deleted, DO NOT forget to update this!
 1995/D885 :                                      DB    '^'
 1995/D885 : =>TRUE                              ELSE
 1995/D885 : CA                                   DB    T_STR
 1995/D886 : [1995]                              ENDIF
 1995/D886 : 53 54 52                            DB     "STR"
 1995/D889 : A4                                  DB     '$'|0x80
 1996/D88A : =0xCB                      T_TAB	= 0x80|75
 1997/D88A : (MACRO)                    	TOKEN	T_TAB,"TA",'B'
 1997/D88A : =>FALSE                             IF T_TAB == 0x80|79
 1997/D88A :                                      ; Convert T_TAB T_STAR to the more common '^' symbol.
 1997/D88A :                                      ; NOTE: if T_TAB token is added or deleted, DO NOT forget to update this!
 1997/D88A :                                      DB    '^'
 1997/D88A : =>TRUE                              ELSE
 1997/D88A : CB                                   DB    T_TAB
 1997/D88B : [1997]                              ENDIF
 1997/D88B : 54 41                               DB     "TA"
 1997/D88D : C2                                  DB     'B'|0x80
 1998/D88E : =0xCC                      T_USING	= 0x80|76
 1999/D88E : (MACRO)                    	TOKEN	T_USING,"USIN",'G'
 1999/D88E : =>FALSE                             IF T_USING == 0x80|79
 1999/D88E :                                      ; Convert T_USING T_STAR to the more common '^' symbol.
 1999/D88E :                                      ; NOTE: if T_USING token is added or deleted, DO NOT forget to update this!
 1999/D88E :                                      DB    '^'
 1999/D88E : =>TRUE                              ELSE
 1999/D88E : CC                                   DB    T_USING
 1999/D88F : [1999]                              ENDIF
 1999/D88F : 55 53 49 4E                         DB     "USIN"
 1999/D893 : C7                                  DB     'G'|0x80
 2000/D894 : =0xCD                      T_VER	= 0x80|77
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 49 - 2024年05月30日 19時01分01秒


 2001/D894 : (MACRO)                    	TOKEN	T_VER,"VER",'$'
 2001/D894 : =>FALSE                             IF T_VER == 0x80|79
 2001/D894 :                                      ; Convert T_VER T_STAR to the more common '^' symbol.
 2001/D894 :                                      ; NOTE: if T_VER token is added or deleted, DO NOT forget to update this!
 2001/D894 :                                      DB    '^'
 2001/D894 : =>TRUE                              ELSE
 2001/D894 : CD                                   DB    T_VER
 2001/D895 : [2001]                              ENDIF
 2001/D895 : 56 45 52                            DB     "VER"
 2001/D898 : A4                                  DB     '$'|0x80
 2002/D899 : =0xCE                      T_VERT	= 0x80|78
 2003/D899 : (MACRO)                    	TOKEN	T_VERT,"VER",'T'
 2003/D899 : =>FALSE                             IF T_VERT == 0x80|79
 2003/D899 :                                      ; Convert T_VERT T_STAR to the more common '^' symbol.
 2003/D899 :                                      ; NOTE: if T_VERT token is added or deleted, DO NOT forget to update this!
 2003/D899 :                                      DB    '^'
 2003/D899 : =>TRUE                              ELSE
 2003/D899 : CE                                   DB    T_VERT
 2003/D89A : [2003]                              ENDIF
 2003/D89A : 56 45 52                            DB     "VER"
 2003/D89D : D4                                  DB     'T'|0x80
 2004/D89E : =0xCF                      T_STAR	= 0x80|79
 2005/D89E : (MACRO)                    	TOKEN	T_STAR,"*",'*'
 2005/D89E : =>TRUE                              IF T_STAR == 0x80|79
 2005/D89E :                                      ; Convert T_STAR T_STAR to the more common '^' symbol.
 2005/D89E :                                      ; NOTE: if T_STAR token is added or deleted, DO NOT forget to update this!
 2005/D89E : 5E                                   DB    '^'
 2005/D89F : =>FALSE                             ELSE
 2005/D89F :                                      DB    T_STAR
 2005/D89F : [2005]                              ENDIF
 2005/D89F : 2A                                  DB     "*"
 2005/D8A0 : AA                                  DB     '*'|0x80
 2006/D8A1 : 00                         	DB	0
 2007/D8A2 :                            
 2008/D8A2 :                            
 2009/D8A2 :                            ;*************************************
 2010/D8A2 :                            ;*      I. L. TABLE PREAMBLE         *
 2011/D8A2 :                            ;*************************************
 2012/D8A2 :                            ;
 2013/D8A2 : (MACRO)                    ILTBL:	DO	GETLIN			; get next line of input
 2013/D8A2 : =>NOT BLANK                         IFNB   GETLIN
 2013/D8A2 : E0                                   DB    H(GETLIN)
 2013/D8A3 : 01                                   DB    L(GETLIN)
 2013/D8A4 :                                      SHIFT
 2013/D8A4 :  (MACRO-2)                           DO    
 2013/D8A4 : =>BLANK                             IFNB   
 2013/D8A4 :                                      DB    H()
 2013/D8A4 :                                      DB    L()
 2013/D8A4 :                                      SHIFT
 2013/D8A4 :                                      DO    
 2013/D8A4 : [2013]                              ENDIF
 2013/D8A4 : [2013]                              ENDIF
 2014/D8A4 : (MACRO)                    ILTB1:	TSTSTR	ILTB2,_CR		; if just a <cr>, do it again
 2014/D8A4 : 98                                  DB     H(ILTB2 - TSTBITH)
 2014/D8A5 : A9                                  DB     L(ILTB2)
 2014/D8A6 : 0D                                  DB     _CR
 2015/D8A7 : (MACRO)                    	GOTO	ILTBL
 2015/D8A7 : 58                                  DB     H(ILTBL - JMPBITH)
 2015/D8A8 : A2                                  DB     L(ILTBL)
 2016/D8A9 : (MACRO)                    ILTB2:	DO	SCANR			; scan and parse the line
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 50 - 2024年05月30日 19時01分01秒


 2016/D8A9 : =>NOT BLANK                         IFNB   SCANR
 2016/D8A9 : E1                                   DB    H(SCANR)
 2016/D8AA : 2A                                   DB    L(SCANR)
 2016/D8AB :                                      SHIFT
 2016/D8AB :  (MACRO-2)                           DO    
 2016/D8AB : =>BLANK                             IFNB   
 2016/D8AB :                                      DB    H()
 2016/D8AB :                                      DB    L()
 2016/D8AB :                                      SHIFT
 2016/D8AB :                                      DO    
 2016/D8AB : [2016]                              ENDIF
 2016/D8AB : [2016]                              ENDIF
 2017/D8AB : (MACRO)                    	TSTNUM	ILSTRT			; do we have a line number?
 2017/D8AB : D8                                  DB     H(ILSTRT)
 2017/D8AC : B5                                  DB     L(ILSTRT)
 2018/D8AD : (MACRO)                    	DO	POPAE		 	; yes, so handle that
 2018/D8AD : =>NOT BLANK                         IFNB   POPAE
 2018/D8AD : E1                                   DB    H(POPAE)
 2018/D8AE : BD                                   DB    L(POPAE)
 2018/D8AF :                                      SHIFT
 2018/D8AF :  (MACRO-2)                           DO    
 2018/D8AF : =>BLANK                             IFNB   
 2018/D8AF :                                      DB    H()
 2018/D8AF :                                      DB    L()
 2018/D8AF :                                      SHIFT
 2018/D8AF :                                      DO    
 2018/D8AF : [2018]                              ENDIF
 2018/D8AF : [2018]                              ENDIF
 2019/D8AF : (MACRO)                    	DO	FNDLBL
 2019/D8AF : =>NOT BLANK                         IFNB   FNDLBL
 2019/D8AF : E5                                   DB    H(FNDLBL)
 2019/D8B0 : 69                                   DB    L(FNDLBL)
 2019/D8B1 :                                      SHIFT
 2019/D8B1 :  (MACRO-2)                           DO    
 2019/D8B1 : =>BLANK                             IFNB   
 2019/D8B1 :                                      DB    H()
 2019/D8B1 :                                      DB    L()
 2019/D8B1 :                                      SHIFT
 2019/D8B1 :                                      DO    
 2019/D8B1 : [2019]                              ENDIF
 2019/D8B1 : [2019]                              ENDIF
 2020/D8B1 : (MACRO)                    	DO	INSRT
 2020/D8B1 : =>NOT BLANK                         IFNB   INSRT
 2020/D8B1 : E2                                   DB    H(INSRT)
 2020/D8B2 : 09                                   DB    L(INSRT)
 2020/D8B3 :                                      SHIFT
 2020/D8B3 :  (MACRO-2)                           DO    
 2020/D8B3 : =>BLANK                             IFNB   
 2020/D8B3 :                                      DB    H()
 2020/D8B3 :                                      DB    L()
 2020/D8B3 :                                      SHIFT
 2020/D8B3 :                                      DO    
 2020/D8B3 : [2020]                              ENDIF
 2020/D8B3 : [2020]                              ENDIF
 2021/D8B3 : (MACRO)                    	GOTO	ILTBL			; and do again
 2021/D8B3 : 58                                  DB     H(ILTBL - JMPBITH)
 2021/D8B4 : A2                                  DB     L(ILTBL)
 2022/D8B5 :                            
 2023/D8B5 :                            ;*************************************
 2024/D8B5 :                            ;*         I. L. LOOKUP TABLE        *
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 51 - 2024年05月30日 19時01分01秒


 2025/D8B5 :                            ;*    FOR COMMANDS AND STATEMENTS    *
 2026/D8B5 :                            ;*************************************
 2027/D8B5 :                            ;
 2028/D8B5 : (MACRO)                    ILSTRT:	DO	NEXT			; find token or variable
 2028/D8B5 : =>NOT BLANK                         IFNB   NEXT
 2028/D8B5 : E4                                   DB    H(NEXT)
 2028/D8B6 : 2F                                   DB    L(NEXT)
 2028/D8B7 :                                      SHIFT
 2028/D8B7 :  (MACRO-2)                           DO    
 2028/D8B7 : =>BLANK                             IFNB   
 2028/D8B7 :                                      DB    H()
 2028/D8B7 :                                      DB    L()
 2028/D8B7 :                                      SHIFT
 2028/D8B7 :                                      DO    
 2028/D8B7 : [2028]                              ENDIF
 2028/D8B7 : [2028]                              ENDIF
 2029/D8B7 : (MACRO)                    	GOTO	AUTO			; handle AUTO
 2029/D8B7 : 5A                                  DB     H(AUTO - JMPBITH)
 2029/D8B8 : 95                                  DB     L(AUTO)
 2030/D8B9 : (MACRO)                    	DO	BYE			; handle BYE
 2030/D8B9 : =>NOT BLANK                         IFNB   BYE
 2030/D8B9 : E3                                   DB    H(BYE)
 2030/D8BA : 83                                   DB    L(BYE)
 2030/D8BB :                                      SHIFT
 2030/D8BB :  (MACRO-2)                           DO    
 2030/D8BB : =>BLANK                             IFNB   
 2030/D8BB :                                      DB    H()
 2030/D8BB :                                      DB    L()
 2030/D8BB :                                      SHIFT
 2030/D8BB :                                      DO    
 2030/D8BB : [2030]                              ENDIF
 2030/D8BB : [2030]                              ENDIF
 2031/D8BB : (MACRO)                    	DO	CLEAR			; handle CLEAR
 2031/D8BB : =>NOT BLANK                         IFNB   CLEAR
 2031/D8BB : F0                                   DB    H(CLEAR)
 2031/D8BC : 23                                   DB    L(CLEAR)
 2031/D8BD :                                      SHIFT
 2031/D8BD :  (MACRO-2)                           DO    
 2031/D8BD : =>BLANK                             IFNB   
 2031/D8BD :                                      DB    H()
 2031/D8BD :                                      DB    L()
 2031/D8BD :                                      SHIFT
 2031/D8BD :                                      DO    
 2031/D8BD : [2031]                              ENDIF
 2031/D8BD : [2031]                              ENDIF
 2032/D8BD : =>TRUE                     	IF USE_CASS
 2033/D8BD : (MACRO)                    	 GOTO	CLOAD			; handle CLOAD
 2033/D8BD : 5F                                  DB     H(CLOAD - JMPBITH)
 2033/D8BE : 61                                  DB     L(CLOAD)
 2034/D8BF : (MACRO)                    	 GOTO	CSAVE			; handle CSAVE
 2034/D8BF : 5F                                  DB     H(CSAVE - JMPBITH)
 2034/D8C0 : 59                                  DB     L(CSAVE)
 2035/D8C1 : =>FALSE                    	ELSE
 2036/D8C1 :                            	 DO	IGNRE			; ignore CLOAD (not implemented)
 2037/D8C1 :                            	 DO	IGNRE			; ignore CSAVE (not implemented)
 2038/D8C1 : [2032]                     	ENDIF
 2039/D8C1 : (MACRO)                    	GOTO	EDIT			; handle EDIT
 2039/D8C1 : 5A                                  DB     H(EDIT - JMPBITH)
 2039/D8C2 : 89                                  DB     L(EDIT)
 2040/D8C3 : (MACRO)                    	GOTO	LIST			; handle LIST
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 52 - 2024年05月30日 19時01分01秒


 2040/D8C3 : 59                                  DB     H(LIST - JMPBITH)
 2040/D8C4 : 44                                  DB     L(LIST)
 2041/D8C5 : (MACRO)                    	GOTO	NEW			; handle NEW
 2041/D8C5 : 59                                  DB     H(NEW - JMPBITH)
 2041/D8C6 : 61                                  DB     L(NEW)
 2042/D8C7 : (MACRO)                    	GOTO	RUN			; handle RUN
 2042/D8C7 : 59                                  DB     H(RUN - JMPBITH)
 2042/D8C8 : A0                                  DB     L(RUN)
 2043/D8C9 : (MACRO)                    	DO	VERS			; handle VERS
 2043/D8C9 : =>NOT BLANK                         IFNB   VERS
 2043/D8C9 : EF                                   DB    H(VERS)
 2043/D8CA : 51                                   DB    L(VERS)
 2043/D8CB :                                      SHIFT
 2043/D8CB :  (MACRO-2)                           DO    
 2043/D8CB : =>BLANK                             IFNB   
 2043/D8CB :                                      DB    H()
 2043/D8CB :                                      DB    L()
 2043/D8CB :                                      SHIFT
 2043/D8CB :                                      DO    
 2043/D8CB : [2043]                              ENDIF
 2043/D8CB : [2043]                              ENDIF
 2044/D8CB : (MACRO)                    	DO	IGNRE			; ignore DATA (handled elsewhere)
 2044/D8CB : =>NOT BLANK                         IFNB   IGNRE
 2044/D8CB : E3                                   DB    H(IGNRE)
 2044/D8CC : 8A                                   DB    L(IGNRE)
 2044/D8CD :                                      SHIFT
 2044/D8CD :  (MACRO-2)                           DO    
 2044/D8CD : =>BLANK                             IFNB   
 2044/D8CD :                                      DB    H()
 2044/D8CD :                                      DB    L()
 2044/D8CD :                                      SHIFT
 2044/D8CD :                                      DO    
 2044/D8CD : [2044]                              ENDIF
 2044/D8CD : [2044]                              ENDIF
 2045/D8CD : (MACRO)                    	DO	IGNRE			; ignore DEF (handled elsewhere)
 2045/D8CD : =>NOT BLANK                         IFNB   IGNRE
 2045/D8CD : E3                                   DB    H(IGNRE)
 2045/D8CE : 8A                                   DB    L(IGNRE)
 2045/D8CF :                                      SHIFT
 2045/D8CF :  (MACRO-2)                           DO    
 2045/D8CF : =>BLANK                             IFNB   
 2045/D8CF :                                      DB    H()
 2045/D8CF :                                      DB    L()
 2045/D8CF :                                      SHIFT
 2045/D8CF :                                      DO    
 2045/D8CF : [2045]                              ENDIF
 2045/D8CF : [2045]                              ENDIF
 2046/D8CF : (MACRO)                    	GOTO	DIM			; handle DIM
 2046/D8CF : 5A                                  DB     H(DIM - JMPBITH)
 2046/D8D0 : CF                                  DB     L(DIM)
 2047/D8D1 : (MACRO)                    	GOTO	DO			; handle DO
 2047/D8D1 : 5A                                  DB     H(DO - JMPBITH)
 2047/D8D2 : 41                                  DB     L(DO)
 2048/D8D3 : (MACRO)                    	DO	IGNORE			; ignore ELSE (handled elsewhere)
 2048/D8D3 : =>NOT BLANK                         IFNB   IGNORE
 2048/D8D3 : E4                                   DB    H(IGNORE)
 2048/D8D4 : 08                                   DB    L(IGNORE)
 2048/D8D5 :                                      SHIFT
 2048/D8D5 :  (MACRO-2)                           DO    
 2048/D8D5 : =>BLANK                             IFNB   
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 53 - 2024年05月30日 19時01分01秒


 2048/D8D5 :                                      DB    H()
 2048/D8D5 :                                      DB    L()
 2048/D8D5 :                                      SHIFT
 2048/D8D5 :                                      DO    
 2048/D8D5 : [2048]                              ENDIF
 2048/D8D5 : [2048]                              ENDIF
 2049/D8D5 : (MACRO)                    	DO	BRK			; handle END
 2049/D8D5 : =>NOT BLANK                         IFNB   BRK
 2049/D8D5 : E4                                   DB    H(BRK)
 2049/D8D6 : 92                                   DB    L(BRK)
 2049/D8D7 :                                      SHIFT
 2049/D8D7 :  (MACRO-2)                           DO    
 2049/D8D7 : =>BLANK                             IFNB   
 2049/D8D7 :                                      DB    H()
 2049/D8D7 :                                      DB    L()
 2049/D8D7 :                                      SHIFT
 2049/D8D7 :                                      DO    
 2049/D8D7 : [2049]                              ENDIF
 2049/D8D7 : [2049]                              ENDIF
 2050/D8D7 : (MACRO)                    	GOTO	FOR			; handle FOR
 2050/D8D7 : 59                                  DB     H(FOR - JMPBITH)
 2050/D8D8 : 71                                  DB     L(FOR)
 2051/D8D9 : (MACRO)                    	GOTO	GOSUB			; handle GOSUB
 2051/D8D9 : 5A                                  DB     H(GOSUB - JMPBITH)
 2051/D8DA : 79                                  DB     L(GOSUB)
 2052/D8DB : (MACRO)                    	GOTO	GOTO			; handle GOTO
 2052/D8DB : 5A                                  DB     H(GOTO - JMPBITH)
 2052/D8DC : 73                                  DB     L(GOTO)
 2053/D8DD : (MACRO)                    	GOTO	IF			; handle IF
 2053/D8DD : 5A                                  DB     H(IF - JMPBITH)
 2053/D8DE : B4                                  DB     L(IF)
 2054/D8DF : (MACRO)                    	GOTO	INPUT			; handle INPUT
 2054/D8DF : 5A                                  DB     H(INPUT - JMPBITH)
 2054/D8E0 : 06                                  DB     L(INPUT)
 2055/D8E1 : (MACRO)                    	GOTO	LINK			; handle LINK
 2055/D8E1 : 5A                                  DB     H(LINK - JMPBITH)
 2055/D8E2 : 4F                                  DB     L(LINK)
 2056/D8E3 : (MACRO)                    	GOTO	NEXTG			; handle NEXT
 2056/D8E3 : 59                                  DB     H(NEXTG - JMPBITH)
 2056/D8E4 : 92                                  DB     L(NEXTG)
 2057/D8E5 : (MACRO)                    	GOTO	ON			; handle ON
 2057/D8E5 : 5A                                  DB     H(ON - JMPBITH)
 2057/D8E6 : 5D                                  DB     L(ON)
 2058/D8E7 : (MACRO)                    	GOTO	PAGE			; handle PAGE
 2058/D8E7 : 59                                  DB     H(PAGE - JMPBITH)
 2058/D8E8 : 20                                  DB     L(PAGE)
 2059/D8E9 : (MACRO)                    	GOTO	POKE			; handle POKE
 2059/D8E9 : 5A                                  DB     H(POKE - JMPBITH)
 2059/D8EA : C0                                  DB     L(POKE)
 2060/D8EB : (MACRO)                    	GOTO	PRINT			; handle PRINT
 2060/D8EB : 5A                                  DB     H(PRINT - JMPBITH)
 2060/D8EC : ED                                  DB     L(PRINT)
 2061/D8ED : (MACRO)                    	GOTO	PRINT			; handle PR
 2061/D8ED : 5A                                  DB     H(PRINT - JMPBITH)
 2061/D8EE : ED                                  DB     L(PRINT)
 2062/D8EF : (MACRO)                    	GOTO	READ			; handle READ
 2062/D8EF : 59                                  DB     H(READ - JMPBITH)
 2062/D8F0 : A8                                  DB     L(READ)
 2063/D8F1 : (MACRO)                    	DO	IGNORE			; ignore REM (handled elsewhere)
 2063/D8F1 : =>NOT BLANK                         IFNB   IGNORE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 54 - 2024年05月30日 19時01分01秒


 2063/D8F1 : E4                                   DB    H(IGNORE)
 2063/D8F2 : 08                                   DB    L(IGNORE)
 2063/D8F3 :                                      SHIFT
 2063/D8F3 :  (MACRO-2)                           DO    
 2063/D8F3 : =>BLANK                             IFNB   
 2063/D8F3 :                                      DB    H()
 2063/D8F3 :                                      DB    L()
 2063/D8F3 :                                      SHIFT
 2063/D8F3 :                                      DO    
 2063/D8F3 : [2063]                              ENDIF
 2063/D8F3 : [2063]                              ENDIF
 2064/D8F3 : (MACRO)                    	GOTO	RESTOR			; handle RESTORE
 2064/D8F3 : 59                                  DB     H(RESTOR - JMPBITH)
 2064/D8F4 : F6                                  DB     L(RESTOR)
 2065/D8F5 : (MACRO)                    	GOTO	RETURN			; handle RETURN
 2065/D8F5 : 5A                                  DB     H(RETURN - JMPBITH)
 2065/D8F6 : 85                                  DB     L(RETURN)
 2066/D8F7 : (MACRO)                    	GOTO	STAT			; handle STAT
 2066/D8F7 : 59                                  DB     H(STAT - JMPBITH)
 2066/D8F8 : 39                                  DB     L(STAT)
 2067/D8F9 : (MACRO)                    	GOTO	UNTIL			; handle UNTIL
 2067/D8F9 : 5A                                  DB     H(UNTIL - JMPBITH)
 2067/D8FA : 47                                  DB     L(UNTIL)
 2068/D8FB :                            
 2069/D8FB :                            ;*************************************
 2070/D8FB :                            ;*         MAIN I. L. TABLE          *
 2071/D8FB :                            ;*************************************
 2072/D8FB :                            ; This part is a regular I.L. processor, where we check
 2073/D8FB :                            ; and process tokens as we parse them. Using the 'FAIL'
 2074/D8FB :                            ; argument, it creates a linked list of things to try.
 2075/D8FB :                            ;
 2076/D8FB : (MACRO)                    	TSTVAR	PAGE0
 2076/D8FB : B9                                  DB     H(PAGE0 - CALBITH)
 2076/D8FC : 1D                                  DB     L(PAGE0)
 2077/D8FD : (MACRO)                    	DO	FNDVAR
 2077/D8FD : =>NOT BLANK                         IFNB   FNDVAR
 2077/D8FD : E2                                   DB    H(FNDVAR)
 2077/D8FE : E1                                   DB    L(FNDVAR)
 2077/D8FF :                                      SHIFT
 2077/D8FF :  (MACRO-2)                           DO    
 2077/D8FF : =>BLANK                             IFNB   
 2077/D8FF :                                      DB    H()
 2077/D8FF :                                      DB    L()
 2077/D8FF :                                      SHIFT
 2077/D8FF :                                      DO    
 2077/D8FF : [2077]                              ENDIF
 2077/D8FF : [2077]                              ENDIF
 2078/D8FF : (MACRO)                    	DO	DEFVAR
 2078/D8FF : =>NOT BLANK                         IFNB   DEFVAR
 2078/D8FF : E5                                   DB    H(DEFVAR)
 2078/D900 : 0E                                   DB    L(DEFVAR)
 2078/D901 :                                      SHIFT
 2078/D901 :  (MACRO-2)                           DO    
 2078/D901 : =>BLANK                             IFNB   
 2078/D901 :                                      DB    H()
 2078/D901 :                                      DB    L()
 2078/D901 :                                      SHIFT
 2078/D901 :                                      DO    
 2078/D901 : [2078]                              ENDIF
 2078/D901 : [2078]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 55 - 2024年05月30日 19時01分01秒


 2079/D901 : (MACRO)                    	TSTSTR	DOLLAR,'('
 2079/D901 : 99                                  DB     H(DOLLAR - TSTBITH)
 2079/D902 : 0F                                  DB     L(DOLLAR)
 2079/D903 : 28                                  DB     '('
 2080/D904 : (MACRO)                    	ILCALL	INDEX
 2080/D904 : 1F                                  DB     H(INDEX - (JMPBITH + TSTBITH))
 2080/D905 : 51                                  DB     L(INDEX)
 2081/D906 : (MACRO)                    LET:	TSTSTR	SYNTAX,'='		; check for implied 'LET'
 2081/D906 : 99                                  DB     H(SYNTAX - TSTBITH)
 2081/D907 : 42                                  DB     L(SYNTAX)
 2081/D908 : 3D                                  DB     '='
 2082/D909 : (MACRO)                    	ILCALL	REXPR
 2082/D909 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2082/D90A : C6                                  DB     L(REXPR)
 2083/D90B : (MACRO)                    	DO	STVAR
 2083/D90B : =>NOT BLANK                         IFNB   STVAR
 2083/D90B : E7                                   DB    H(STVAR)
 2083/D90C : 8A                                   DB    L(STVAR)
 2083/D90D :                                      SHIFT
 2083/D90D :  (MACRO-2)                           DO    
 2083/D90D : =>BLANK                             IFNB   
 2083/D90D :                                      DB    H()
 2083/D90D :                                      DB    L()
 2083/D90D :                                      SHIFT
 2083/D90D :                                      DO    
 2083/D90D : [2083]                              ENDIF
 2083/D90D : [2083]                              ENDIF
 2084/D90D : (MACRO)                    	DO	DNE
 2084/D90D : =>NOT BLANK                         IFNB   DNE
 2084/D90D : E3                                   DB    H(DNE)
 2084/D90E : B3                                   DB    L(DNE)
 2084/D90F :                                      SHIFT
 2084/D90F :  (MACRO-2)                           DO    
 2084/D90F : =>BLANK                             IFNB   
 2084/D90F :                                      DB    H()
 2084/D90F :                                      DB    L()
 2084/D90F :                                      SHIFT
 2084/D90F :                                      DO    
 2084/D90F : [2084]                              ENDIF
 2084/D90F : [2084]                              ENDIF
 2085/D90F : (MACRO)                    DOLLAR:	TSTSTR	LET,'$'			; test for var$, string expression
 2085/D90F : 99                                  DB     H(LET - TSTBITH)
 2085/D910 : 06                                  DB     L(LET)
 2085/D911 : 24                                  DB     '$'
 2086/D912 : (MACRO)                    	DO	LDVAR
 2086/D912 : =>NOT BLANK                         IFNB   LDVAR
 2086/D912 : E8                                   DB    H(LDVAR)
 2086/D913 : 15                                   DB    L(LDVAR)
 2086/D914 :                                      SHIFT
 2086/D914 :  (MACRO-2)                           DO    
 2086/D914 : =>BLANK                             IFNB   
 2086/D914 :                                      DB    H()
 2086/D914 :                                      DB    L()
 2086/D914 :                                      SHIFT
 2086/D914 :                                      DO    
 2086/D914 : [2086]                              ENDIF
 2086/D914 : [2086]                              ENDIF
 2087/D914 : (MACRO)                    	DO	FIX
 2087/D914 : =>NOT BLANK                         IFNB   FIX
 2087/D914 : EB                                   DB    H(FIX)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 56 - 2024年05月30日 19時01分01秒


 2087/D915 : 2F                                   DB    L(FIX)
 2087/D916 :                                      SHIFT
 2087/D916 :  (MACRO-2)                           DO    
 2087/D916 : =>BLANK                             IFNB   
 2087/D916 :                                      DB    H()
 2087/D916 :                                      DB    L()
 2087/D916 :                                      SHIFT
 2087/D916 :                                      DO    
 2087/D916 : [2087]                              ENDIF
 2087/D916 : [2087]                              ENDIF
 2088/D916 : (MACRO)                    	TSTSTR	SYNTAX,'='
 2088/D916 : 99                                  DB     H(SYNTAX - TSTBITH)
 2088/D917 : 42                                  DB     L(SYNTAX)
 2088/D918 : 3D                                  DB     '='
 2089/D919 : (MACRO)                    	ILCALL	STREXP
 2089/D919 : 1B                                  DB     H(STREXP - (JMPBITH + TSTBITH))
 2089/D91A : 92                                  DB     L(STREXP)
 2090/D91B : (MACRO)                    	DO	DNE
 2090/D91B : =>NOT BLANK                         IFNB   DNE
 2090/D91B : E3                                   DB    H(DNE)
 2090/D91C : B3                                   DB    L(DNE)
 2090/D91D :                                      SHIFT
 2090/D91D :  (MACRO-2)                           DO    
 2090/D91D : =>BLANK                             IFNB   
 2090/D91D :                                      DB    H()
 2090/D91D :                                      DB    L()
 2090/D91D :                                      SHIFT
 2090/D91D :                                      DO    
 2090/D91D : [2090]                              ENDIF
 2090/D91D : [2090]                              ENDIF
 2091/D91D : (MACRO)                    PAGE0:	TSTSTR	PRINT0,T_PAGE		; handle PAGE
 2091/D91D : 99                                  DB     H(PRINT0 - TSTBITH)
 2091/D91E : 31                                  DB     L(PRINT0)
 2091/D91F : 98                                  DB     T_PAGE
 2092/D920 : (MACRO)                    PAGE:	TSTSTR	SYNTAX,'='
 2092/D920 : 99                                  DB     H(SYNTAX - TSTBITH)
 2092/D921 : 42                                  DB     L(SYNTAX)
 2092/D922 : 3D                                  DB     '='
 2093/D923 : (MACRO)                    	ILCALL	REXPR
 2093/D923 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2093/D924 : C6                                  DB     L(REXPR)
 2094/D925 : (MACRO)                    	DO	DONE
 2094/D925 : =>NOT BLANK                         IFNB   DONE
 2094/D925 : E3                                   DB    H(DONE)
 2094/D926 : 71                                   DB    L(DONE)
 2094/D927 :                                      SHIFT
 2094/D927 :  (MACRO-2)                           DO    
 2094/D927 : =>BLANK                             IFNB   
 2094/D927 :                                      DB    H()
 2094/D927 :                                      DB    L()
 2094/D927 :                                      SHIFT
 2094/D927 :                                      DO    
 2094/D927 : [2094]                              ENDIF
 2094/D927 : [2094]                              ENDIF
 2095/D927 : (MACRO)                    	DO	POPAE
 2095/D927 : =>NOT BLANK                         IFNB   POPAE
 2095/D927 : E1                                   DB    H(POPAE)
 2095/D928 : BD                                   DB    L(POPAE)
 2095/D929 :                                      SHIFT
 2095/D929 :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 57 - 2024年05月30日 19時01分01秒


 2095/D929 : =>BLANK                             IFNB   
 2095/D929 :                                      DB    H()
 2095/D929 :                                      DB    L()
 2095/D929 :                                      SHIFT
 2095/D929 :                                      DO    
 2095/D929 : [2095]                              ENDIF
 2095/D929 : [2095]                              ENDIF
 2096/D929 : (MACRO)                    	DO	NUPAGE
 2096/D929 : =>NOT BLANK                         IFNB   NUPAGE
 2096/D929 : F0                                   DB    H(NUPAGE)
 2096/D92A : 01                                   DB    L(NUPAGE)
 2096/D92B :                                      SHIFT
 2096/D92B :  (MACRO-2)                           DO    
 2096/D92B : =>BLANK                             IFNB   
 2096/D92B :                                      DB    H()
 2096/D92B :                                      DB    L()
 2096/D92B :                                      SHIFT
 2096/D92B :                                      DO    
 2096/D92B : [2096]                              ENDIF
 2096/D92B : [2096]                              ENDIF
 2097/D92B : (MACRO)                    	DO	LKPAGE
 2097/D92B : =>NOT BLANK                         IFNB   LKPAGE
 2097/D92B : E6                                   DB    H(LKPAGE)
 2097/D92C : DD                                   DB    L(LKPAGE)
 2097/D92D :                                      SHIFT
 2097/D92D :  (MACRO-2)                           DO    
 2097/D92D : =>BLANK                             IFNB   
 2097/D92D :                                      DB    H()
 2097/D92D :                                      DB    L()
 2097/D92D :                                      SHIFT
 2097/D92D :                                      DO    
 2097/D92D : [2097]                              ENDIF
 2097/D92D : [2097]                              ENDIF
 2098/D92D : (MACRO)                    	DO	NXT
 2098/D92D : =>NOT BLANK                         IFNB   NXT
 2098/D92D : E4                                   DB    H(NXT)
 2098/D92E : 0E                                   DB    L(NXT)
 2098/D92F :                                      SHIFT
 2098/D92F :  (MACRO-2)                           DO    
 2098/D92F : =>BLANK                             IFNB   
 2098/D92F :                                      DB    H()
 2098/D92F :                                      DB    L()
 2098/D92F :                                      SHIFT
 2098/D92F :                                      DO    
 2098/D92F : [2098]                              ENDIF
 2098/D92F : [2098]                              ENDIF
 2099/D92F : (MACRO)                    ENDPAR:	DO	ENDPR			; complain about missing parenthesis
 2099/D92F : =>NOT BLANK                         IFNB   ENDPR
 2099/D92F : E4                                   DB    H(ENDPR)
 2099/D930 : 04                                   DB    L(ENDPR)
 2099/D931 :                                      SHIFT
 2099/D931 :  (MACRO-2)                           DO    
 2099/D931 : =>BLANK                             IFNB   
 2099/D931 :                                      DB    H()
 2099/D931 :                                      DB    L()
 2099/D931 :                                      SHIFT
 2099/D931 :                                      DO    
 2099/D931 : [2099]                              ENDIF
 2099/D931 : [2099]                              ENDIF
 2100/D931 : (MACRO)                    PRINT0:	TSTSTR	STAT0,'?'		; handle ? (short for PR[INT])
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 58 - 2024年05月30日 19時01分01秒


 2100/D931 : 99                                  DB     H(STAT0 - TSTBITH)
 2100/D932 : 36                                  DB     L(STAT0)
 2100/D933 : 3F                                  DB     '?'
 2101/D934 : (MACRO)                    	GOTO	PRINT
 2101/D934 : 5A                                  DB     H(PRINT - JMPBITH)
 2101/D935 : ED                                  DB     L(PRINT)
 2102/D936 : (MACRO)                    STAT0:	TSTSTR	SYNTAX,T_STAT		; handle STAT
 2102/D936 : 99                                  DB     H(SYNTAX - TSTBITH)
 2102/D937 : 42                                  DB     L(SYNTAX)
 2102/D938 : A0                                  DB     T_STAT
 2103/D939 : (MACRO)                    STAT:	TSTSTR	SYNTAX,'='
 2103/D939 : 99                                  DB     H(SYNTAX - TSTBITH)
 2103/D93A : 42                                  DB     L(SYNTAX)
 2103/D93B : 3D                                  DB     '='
 2104/D93C : (MACRO)                    	ILCALL	REXPR
 2104/D93C : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2104/D93D : C6                                  DB     L(REXPR)
 2105/D93E : (MACRO)                    	DO	POPAE
 2105/D93E : =>NOT BLANK                         IFNB   POPAE
 2105/D93E : E1                                   DB    H(POPAE)
 2105/D93F : BD                                   DB    L(POPAE)
 2105/D940 :                                      SHIFT
 2105/D940 :  (MACRO-2)                           DO    
 2105/D940 : =>BLANK                             IFNB   
 2105/D940 :                                      DB    H()
 2105/D940 :                                      DB    L()
 2105/D940 :                                      SHIFT
 2105/D940 :                                      DO    
 2105/D940 : [2105]                              ENDIF
 2105/D940 : [2105]                              ENDIF
 2106/D940 : (MACRO)                    	DO	MOVESR
 2106/D940 : =>NOT BLANK                         IFNB   MOVESR
 2106/D940 : E3                                   DB    H(MOVESR)
 2106/D941 : B0                                   DB    L(MOVESR)
 2106/D942 :                                      SHIFT
 2106/D942 :  (MACRO-2)                           DO    
 2106/D942 : =>BLANK                             IFNB   
 2106/D942 :                                      DB    H()
 2106/D942 :                                      DB    L()
 2106/D942 :                                      SHIFT
 2106/D942 :                                      DO    
 2106/D942 : [2106]                              ENDIF
 2106/D942 : [2106]                              ENDIF
 2107/D942 : (MACRO)                    SYNTAX:	DO	SYNTX			; complain about syntax error
 2107/D942 : =>NOT BLANK                         IFNB   SYNTX
 2107/D942 : E4                                   DB    H(SYNTX)
 2107/D943 : 00                                   DB    L(SYNTX)
 2107/D944 :                                      SHIFT
 2107/D944 :  (MACRO-2)                           DO    
 2107/D944 : =>BLANK                             IFNB   
 2107/D944 :                                      DB    H()
 2107/D944 :                                      DB    L()
 2107/D944 :                                      SHIFT
 2107/D944 :                                      DO    
 2107/D944 : [2107]                              ENDIF
 2107/D944 : [2107]                              ENDIF
 2108/D944 : (MACRO)                    LIST:	TSTNUM	LIST2			; handle LIST
 2108/D944 : D9                                  DB     H(LIST2)
 2108/D945 : 55                                  DB     L(LIST2)
 2109/D946 : (MACRO)                    	DO	POPAE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 59 - 2024年05月30日 19時01分01秒


 2109/D946 : =>NOT BLANK                         IFNB   POPAE
 2109/D946 : E1                                   DB    H(POPAE)
 2109/D947 : BD                                   DB    L(POPAE)
 2109/D948 :                                      SHIFT
 2109/D948 :  (MACRO-2)                           DO    
 2109/D948 : =>BLANK                             IFNB   
 2109/D948 :                                      DB    H()
 2109/D948 :                                      DB    L()
 2109/D948 :                                      SHIFT
 2109/D948 :                                      DO    
 2109/D948 : [2109]                              ENDIF
 2109/D948 : [2109]                              ENDIF
 2110/D948 : (MACRO)                    	TSTSTR	LIST4,'-'
 2110/D948 : 99                                  DB     H(LIST4 - TSTBITH)
 2110/D949 : 5B                                  DB     L(LIST4)
 2110/D94A : 2D                                  DB     '-'
 2111/D94B : (MACRO)                    	TSTNUM	SYNTAX
 2111/D94B : D9                                  DB     H(SYNTAX)
 2111/D94C : 42                                  DB     L(SYNTAX)
 2112/D94D : (MACRO)                    	DO	FNDLBL
 2112/D94D : =>NOT BLANK                         IFNB   FNDLBL
 2112/D94D : E5                                   DB    H(FNDLBL)
 2112/D94E : 69                                   DB    L(FNDLBL)
 2112/D94F :                                      SHIFT
 2112/D94F :  (MACRO-2)                           DO    
 2112/D94F : =>BLANK                             IFNB   
 2112/D94F :                                      DB    H()
 2112/D94F :                                      DB    L()
 2112/D94F :                                      SHIFT
 2112/D94F :                                      DO    
 2112/D94F : [2112]                              ENDIF
 2112/D94F : [2112]                              ENDIF
 2113/D94F : (MACRO)                    	DO	POPAE
 2113/D94F : =>NOT BLANK                         IFNB   POPAE
 2113/D94F : E1                                   DB    H(POPAE)
 2113/D950 : BD                                   DB    L(POPAE)
 2113/D951 :                                      SHIFT
 2113/D951 :  (MACRO-2)                           DO    
 2113/D951 : =>BLANK                             IFNB   
 2113/D951 :                                      DB    H()
 2113/D951 :                                      DB    L()
 2113/D951 :                                      SHIFT
 2113/D951 :                                      DO    
 2113/D951 : [2113]                              ENDIF
 2113/D951 : [2113]                              ENDIF
 2114/D951 : (MACRO)                    LIST1:	DO	LST1
 2114/D951 : =>NOT BLANK                         IFNB   LST1
 2114/D951 : E6                                   DB    H(LST1)
 2114/D952 : 7E                                   DB    L(LST1)
 2114/D953 :                                      SHIFT
 2114/D953 :  (MACRO-2)                           DO    
 2114/D953 : =>BLANK                             IFNB   
 2114/D953 :                                      DB    H()
 2114/D953 :                                      DB    L()
 2114/D953 :                                      SHIFT
 2114/D953 :                                      DO    
 2114/D953 : [2114]                              ENDIF
 2114/D953 : [2114]                              ENDIF
 2115/D953 : (MACRO)                    	GOTO	LIST1
 2115/D953 : 59                                  DB     H(LIST1 - JMPBITH)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 60 - 2024年05月30日 19時01分01秒


 2115/D954 : 51                                  DB     L(LIST1)
 2116/D955 : (MACRO)                    LIST2:	DO	CHPAGE
 2116/D955 : =>NOT BLANK                         IFNB   CHPAGE
 2116/D955 : E6                                   DB    H(CHPAGE)
 2116/D956 : F8                                   DB    L(CHPAGE)
 2116/D957 :                                      SHIFT
 2116/D957 :  (MACRO-2)                           DO    
 2116/D957 : =>BLANK                             IFNB   
 2116/D957 :                                      DB    H()
 2116/D957 :                                      DB    L()
 2116/D957 :                                      SHIFT
 2116/D957 :                                      DO    
 2116/D957 : [2116]                              ENDIF
 2116/D957 : [2116]                              ENDIF
 2117/D957 : (MACRO)                    LIST3:	DO	LST2
 2117/D957 : =>NOT BLANK                         IFNB   LST2
 2117/D957 : E6                                   DB    H(LST2)
 2117/D958 : 8A                                   DB    L(LST2)
 2117/D959 :                                      SHIFT
 2117/D959 :  (MACRO-2)                           DO    
 2117/D959 : =>BLANK                             IFNB   
 2117/D959 :                                      DB    H()
 2117/D959 :                                      DB    L()
 2117/D959 :                                      SHIFT
 2117/D959 :                                      DO    
 2117/D959 : [2117]                              ENDIF
 2117/D959 : [2117]                              ENDIF
 2118/D959 : (MACRO)                    	GOTO	LIST3
 2118/D959 : 59                                  DB     H(LIST3 - JMPBITH)
 2118/D95A : 57                                  DB     L(LIST3)
 2119/D95B : (MACRO)                    LIST4:	DO	FNDLBL
 2119/D95B : =>NOT BLANK                         IFNB   FNDLBL
 2119/D95B : E5                                   DB    H(FNDLBL)
 2119/D95C : 69                                   DB    L(FNDLBL)
 2119/D95D :                                      SHIFT
 2119/D95D :  (MACRO-2)                           DO    
 2119/D95D : =>BLANK                             IFNB   
 2119/D95D :                                      DB    H()
 2119/D95D :                                      DB    L()
 2119/D95D :                                      SHIFT
 2119/D95D :                                      DO    
 2119/D95D : [2119]                              ENDIF
 2119/D95D : [2119]                              ENDIF
 2120/D95D : (MACRO)                    	DO	LST1
 2120/D95D : =>NOT BLANK                         IFNB   LST1
 2120/D95D : E6                                   DB    H(LST1)
 2120/D95E : 7E                                   DB    L(LST1)
 2120/D95F :                                      SHIFT
 2120/D95F :  (MACRO-2)                           DO    
 2120/D95F : =>BLANK                             IFNB   
 2120/D95F :                                      DB    H()
 2120/D95F :                                      DB    L()
 2120/D95F :                                      SHIFT
 2120/D95F :                                      DO    
 2120/D95F : [2120]                              ENDIF
 2120/D95F : [2120]                              ENDIF
 2121/D95F : (MACRO)                    	DO	NXT
 2121/D95F : =>NOT BLANK                         IFNB   NXT
 2121/D95F : E4                                   DB    H(NXT)
 2121/D960 : 0E                                   DB    L(NXT)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 61 - 2024年05月30日 19時01分01秒


 2121/D961 :                                      SHIFT
 2121/D961 :  (MACRO-2)                           DO    
 2121/D961 : =>BLANK                             IFNB   
 2121/D961 :                                      DB    H()
 2121/D961 :                                      DB    L()
 2121/D961 :                                      SHIFT
 2121/D961 :                                      DO    
 2121/D961 : [2121]                              ENDIF
 2121/D961 : [2121]                              ENDIF
 2122/D961 : (MACRO)                    NEW:	TSTNUM	NEW1			; handle NEW
 2122/D961 : D9                                  DB     H(NEW1)
 2122/D962 : 69                                  DB     L(NEW1)
 2123/D963 : (MACRO)                    	DO	POPAE
 2123/D963 : =>NOT BLANK                         IFNB   POPAE
 2123/D963 : E1                                   DB    H(POPAE)
 2123/D964 : BD                                   DB    L(POPAE)
 2123/D965 :                                      SHIFT
 2123/D965 :  (MACRO-2)                           DO    
 2123/D965 : =>BLANK                             IFNB   
 2123/D965 :                                      DB    H()
 2123/D965 :                                      DB    L()
 2123/D965 :                                      SHIFT
 2123/D965 :                                      DO    
 2123/D965 : [2123]                              ENDIF
 2123/D965 : [2123]                              ENDIF
 2124/D965 : (MACRO)                    	DO	NUPAGE
 2124/D965 : =>NOT BLANK                         IFNB   NUPAGE
 2124/D965 : F0                                   DB    H(NUPAGE)
 2124/D966 : 01                                   DB    L(NUPAGE)
 2124/D967 :                                      SHIFT
 2124/D967 :  (MACRO-2)                           DO    
 2124/D967 : =>BLANK                             IFNB   
 2124/D967 :                                      DB    H()
 2124/D967 :                                      DB    L()
 2124/D967 :                                      SHIFT
 2124/D967 :                                      DO    
 2124/D967 : [2124]                              ENDIF
 2124/D967 : [2124]                              ENDIF
 2125/D967 : (MACRO)                    	GOTO	NEW2
 2125/D967 : 59                                  DB     H(NEW2 - JMPBITH)
 2125/D968 : 6B                                  DB     L(NEW2)
 2126/D969 : (MACRO)                    NEW1:	DO	NUPGE1
 2126/D969 : =>NOT BLANK                         IFNB   NUPGE1
 2126/D969 : F0                                   DB    H(NUPGE1)
 2126/D96A : 07                                   DB    L(NUPGE1)
 2126/D96B :                                      SHIFT
 2126/D96B :  (MACRO-2)                           DO    
 2126/D96B : =>BLANK                             IFNB   
 2126/D96B :                                      DB    H()
 2126/D96B :                                      DB    L()
 2126/D96B :                                      SHIFT
 2126/D96B :                                      DO    
 2126/D96B : [2126]                              ENDIF
 2126/D96B : [2126]                              ENDIF
 2127/D96B : (MACRO)                    NEW2:	DO	DONE
 2127/D96B : =>NOT BLANK                         IFNB   DONE
 2127/D96B : E3                                   DB    H(DONE)
 2127/D96C : 71                                   DB    L(DONE)
 2127/D96D :                                      SHIFT
 2127/D96D :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 62 - 2024年05月30日 19時01分01秒


 2127/D96D : =>BLANK                             IFNB   
 2127/D96D :                                      DB    H()
 2127/D96D :                                      DB    L()
 2127/D96D :                                      SHIFT
 2127/D96D :                                      DO    
 2127/D96D : [2127]                              ENDIF
 2127/D96D : [2127]                              ENDIF
 2128/D96D : (MACRO)                    	DO	NEWPGM
 2128/D96D : =>NOT BLANK                         IFNB   NEWPGM
 2128/D96D : F0                                   DB    H(NEWPGM)
 2128/D96E : 0D                                   DB    L(NEWPGM)
 2128/D96F :                                      SHIFT
 2128/D96F :  (MACRO-2)                           DO    
 2128/D96F : =>BLANK                             IFNB   
 2128/D96F :                                      DB    H()
 2128/D96F :                                      DB    L()
 2128/D96F :                                      SHIFT
 2128/D96F :                                      DO    
 2128/D96F : [2128]                              ENDIF
 2128/D96F : [2128]                              ENDIF
 2129/D96F : (MACRO)                    	DO	NXT2
 2129/D96F : =>NOT BLANK                         IFNB   NXT2
 2129/D96F : E4                                   DB    H(NXT2)
 2129/D970 : 18                                   DB    L(NXT2)
 2129/D971 :                                      SHIFT
 2129/D971 :  (MACRO-2)                           DO    
 2129/D971 : =>BLANK                             IFNB   
 2129/D971 :                                      DB    H()
 2129/D971 :                                      DB    L()
 2129/D971 :                                      SHIFT
 2129/D971 :                                      DO    
 2129/D971 : [2129]                              ENDIF
 2129/D971 : [2129]                              ENDIF
 2130/D971 : (MACRO)                    FOR:	DO	CKMODE			; handle FOR
 2130/D971 : =>NOT BLANK                         IFNB   CKMODE
 2130/D971 : E5                                   DB    H(CKMODE)
 2130/D972 : B8                                   DB    L(CKMODE)
 2130/D973 :                                      SHIFT
 2130/D973 :  (MACRO-2)                           DO    
 2130/D973 : =>BLANK                             IFNB   
 2130/D973 :                                      DB    H()
 2130/D973 :                                      DB    L()
 2130/D973 :                                      SHIFT
 2130/D973 :                                      DO    
 2130/D973 : [2130]                              ENDIF
 2130/D973 : [2130]                              ENDIF
 2131/D973 : (MACRO)                    	TSTVAR	SYNTAX
 2131/D973 : B9                                  DB     H(SYNTAX - CALBITH)
 2131/D974 : 42                                  DB     L(SYNTAX)
 2132/D975 : (MACRO)                    	DO	FNDVAR
 2132/D975 : =>NOT BLANK                         IFNB   FNDVAR
 2132/D975 : E2                                   DB    H(FNDVAR)
 2132/D976 : E1                                   DB    L(FNDVAR)
 2132/D977 :                                      SHIFT
 2132/D977 :  (MACRO-2)                           DO    
 2132/D977 : =>BLANK                             IFNB   
 2132/D977 :                                      DB    H()
 2132/D977 :                                      DB    L()
 2132/D977 :                                      SHIFT
 2132/D977 :                                      DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 63 - 2024年05月30日 19時01分01秒


 2132/D977 : [2132]                              ENDIF
 2132/D977 : [2132]                              ENDIF
 2133/D977 : (MACRO)                    	DO	DEFVAR
 2133/D977 : =>NOT BLANK                         IFNB   DEFVAR
 2133/D977 : E5                                   DB    H(DEFVAR)
 2133/D978 : 0E                                   DB    L(DEFVAR)
 2133/D979 :                                      SHIFT
 2133/D979 :  (MACRO-2)                           DO    
 2133/D979 : =>BLANK                             IFNB   
 2133/D979 :                                      DB    H()
 2133/D979 :                                      DB    L()
 2133/D979 :                                      SHIFT
 2133/D979 :                                      DO    
 2133/D979 : [2133]                              ENDIF
 2133/D979 : [2133]                              ENDIF
 2134/D979 : (MACRO)                    	TSTSTR	SYNTAX,'='
 2134/D979 : 99                                  DB     H(SYNTAX - TSTBITH)
 2134/D97A : 42                                  DB     L(SYNTAX)
 2134/D97B : 3D                                  DB     '='
 2135/D97C : (MACRO)                    	ILCALL	REXPR
 2135/D97C : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2135/D97D : C6                                  DB     L(REXPR)
 2136/D97E : (MACRO)                    	TSTSTR	SYNTAX,T_TO		; handle TO
 2136/D97E : 99                                  DB     H(SYNTAX - TSTBITH)
 2136/D97F : 42                                  DB     L(SYNTAX)
 2136/D980 : C4                                  DB     T_TO
 2137/D981 : (MACRO)                    	ILCALL	REXPR
 2137/D981 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2137/D982 : C6                                  DB     L(REXPR)
 2138/D983 : (MACRO)                    	TSTSTR	FOR1,T_STEP		; handle STEP
 2138/D983 : 99                                  DB     H(FOR1 - TSTBITH)
 2138/D984 : 8A                                  DB     L(FOR1)
 2138/D985 : C2                                  DB     T_STEP
 2139/D986 : (MACRO)                    	ILCALL	REXPR
 2139/D986 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2139/D987 : C6                                  DB     L(REXPR)
 2140/D988 : (MACRO)                    	GOTO	FOR2
 2140/D988 : 59                                  DB     H(FOR2 - JMPBITH)
 2140/D989 : 8C                                  DB     L(FOR2)
 2141/D98A : (MACRO)                    FOR1:	DO	ONE
 2141/D98A : =>NOT BLANK                         IFNB   ONE
 2141/D98A : E7                                   DB    H(ONE)
 2141/D98B : 16                                   DB    L(ONE)
 2141/D98C :                                      SHIFT
 2141/D98C :  (MACRO-2)                           DO    
 2141/D98C : =>BLANK                             IFNB   
 2141/D98C :                                      DB    H()
 2141/D98C :                                      DB    L()
 2141/D98C :                                      SHIFT
 2141/D98C :                                      DO    
 2141/D98C : [2141]                              ENDIF
 2141/D98C : [2141]                              ENDIF
 2142/D98C : (MACRO)                    FOR2:	DO	DONE
 2142/D98C : =>NOT BLANK                         IFNB   DONE
 2142/D98C : E3                                   DB    H(DONE)
 2142/D98D : 71                                   DB    L(DONE)
 2142/D98E :                                      SHIFT
 2142/D98E :  (MACRO-2)                           DO    
 2142/D98E : =>BLANK                             IFNB   
 2142/D98E :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 64 - 2024年05月30日 19時01分01秒


 2142/D98E :                                      DB    L()
 2142/D98E :                                      SHIFT
 2142/D98E :                                      DO    
 2142/D98E : [2142]                              ENDIF
 2142/D98E : [2142]                              ENDIF
 2143/D98E : (MACRO)                    	DO	SAVFOR
 2143/D98E : =>NOT BLANK                         IFNB   SAVFOR
 2143/D98E : E7                                   DB    H(SAVFOR)
 2143/D98F : 2B                                   DB    L(SAVFOR)
 2143/D990 :                                      SHIFT
 2143/D990 :  (MACRO-2)                           DO    
 2143/D990 : =>BLANK                             IFNB   
 2143/D990 :                                      DB    H()
 2143/D990 :                                      DB    L()
 2143/D990 :                                      SHIFT
 2143/D990 :                                      DO    
 2143/D990 : [2143]                              ENDIF
 2143/D990 : [2143]                              ENDIF
 2144/D990 : (MACRO)                    	DO	NXT
 2144/D990 : =>NOT BLANK                         IFNB   NXT
 2144/D990 : E4                                   DB    H(NXT)
 2144/D991 : 0E                                   DB    L(NXT)
 2144/D992 :                                      SHIFT
 2144/D992 :  (MACRO-2)                           DO    
 2144/D992 : =>BLANK                             IFNB   
 2144/D992 :                                      DB    H()
 2144/D992 :                                      DB    L()
 2144/D992 :                                      SHIFT
 2144/D992 :                                      DO    
 2144/D992 : [2144]                              ENDIF
 2144/D992 : [2144]                              ENDIF
 2145/D992 : (MACRO)                    NEXTG:	DO	CKMODE			; handle NEXT
 2145/D992 : =>NOT BLANK                         IFNB   CKMODE
 2145/D992 : E5                                   DB    H(CKMODE)
 2145/D993 : B8                                   DB    L(CKMODE)
 2145/D994 :                                      SHIFT
 2145/D994 :  (MACRO-2)                           DO    
 2145/D994 : =>BLANK                             IFNB   
 2145/D994 :                                      DB    H()
 2145/D994 :                                      DB    L()
 2145/D994 :                                      SHIFT
 2145/D994 :                                      DO    
 2145/D994 : [2145]                              ENDIF
 2145/D994 : [2145]                              ENDIF
 2146/D994 : (MACRO)                    	TSTVAR	SYNTAX
 2146/D994 : B9                                  DB     H(SYNTAX - CALBITH)
 2146/D995 : 42                                  DB     L(SYNTAX)
 2147/D996 : (MACRO)                    	DO	FNDVAR
 2147/D996 : =>NOT BLANK                         IFNB   FNDVAR
 2147/D996 : E2                                   DB    H(FNDVAR)
 2147/D997 : E1                                   DB    L(FNDVAR)
 2147/D998 :                                      SHIFT
 2147/D998 :  (MACRO-2)                           DO    
 2147/D998 : =>BLANK                             IFNB   
 2147/D998 :                                      DB    H()
 2147/D998 :                                      DB    L()
 2147/D998 :                                      SHIFT
 2147/D998 :                                      DO    
 2147/D998 : [2147]                              ENDIF
 2147/D998 : [2147]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 65 - 2024年05月30日 19時01分01秒


 2148/D998 : (MACRO)                    	DO	NXTVAR
 2148/D998 : =>NOT BLANK                         IFNB   NXTVAR
 2148/D998 : E7                                   DB    H(NXTVAR)
 2148/D999 : B0                                   DB    L(NXTVAR)
 2148/D99A :                                      SHIFT
 2148/D99A :  (MACRO-2)                           DO    
 2148/D99A : =>BLANK                             IFNB   
 2148/D99A :                                      DB    H()
 2148/D99A :                                      DB    L()
 2148/D99A :                                      SHIFT
 2148/D99A :                                      DO    
 2148/D99A : [2148]                              ENDIF
 2148/D99A : [2148]                              ENDIF
 2149/D99A : (MACRO)                    	DO	FADD
 2149/D99A : =>NOT BLANK                         IFNB   FADD
 2149/D99A : F1                                   DB    H(FADD)
 2149/D99B : 3C                                   DB    L(FADD)
 2149/D99C :                                      SHIFT
 2149/D99C :  (MACRO-2)                           DO    
 2149/D99C : =>BLANK                             IFNB   
 2149/D99C :                                      DB    H()
 2149/D99C :                                      DB    L()
 2149/D99C :                                      SHIFT
 2149/D99C :                                      DO    
 2149/D99C : [2149]                              ENDIF
 2149/D99C : [2149]                              ENDIF
 2150/D99C : (MACRO)                    	DO	NXTV
 2150/D99C : =>NOT BLANK                         IFNB   NXTV
 2150/D99C : E8                                   DB    H(NXTV)
 2150/D99D : 4D                                   DB    L(NXTV)
 2150/D99E :                                      SHIFT
 2150/D99E :  (MACRO-2)                           DO    
 2150/D99E : =>BLANK                             IFNB   
 2150/D99E :                                      DB    H()
 2150/D99E :                                      DB    L()
 2150/D99E :                                      SHIFT
 2150/D99E :                                      DO    
 2150/D99E : [2150]                              ENDIF
 2150/D99E : [2150]                              ENDIF
 2151/D99E : (MACRO)                    	DO	DETPGE
 2151/D99E : =>NOT BLANK                         IFNB   DETPGE
 2151/D99E : E4                                   DB    H(DETPGE)
 2151/D99F : 7F                                   DB    L(DETPGE)
 2151/D9A0 :                                      SHIFT
 2151/D9A0 :  (MACRO-2)                           DO    
 2151/D9A0 : =>BLANK                             IFNB   
 2151/D9A0 :                                      DB    H()
 2151/D9A0 :                                      DB    L()
 2151/D9A0 :                                      SHIFT
 2151/D9A0 :                                      DO    
 2151/D9A0 : [2151]                              ENDIF
 2151/D9A0 : [2151]                              ENDIF
 2152/D9A0 : (MACRO)                    RUN:	DO	DONE			; handle RUN
 2152/D9A0 : =>NOT BLANK                         IFNB   DONE
 2152/D9A0 : E3                                   DB    H(DONE)
 2152/D9A1 : 71                                   DB    L(DONE)
 2152/D9A2 :                                      SHIFT
 2152/D9A2 :  (MACRO-2)                           DO    
 2152/D9A2 : =>BLANK                             IFNB   
 2152/D9A2 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 66 - 2024年05月30日 19時01分01秒


 2152/D9A2 :                                      DB    L()
 2152/D9A2 :                                      SHIFT
 2152/D9A2 :                                      DO    
 2152/D9A2 : [2152]                              ENDIF
 2152/D9A2 : [2152]                              ENDIF
 2153/D9A2 : (MACRO)                    	DO	CHPAGE
 2153/D9A2 : =>NOT BLANK                         IFNB   CHPAGE
 2153/D9A2 : E6                                   DB    H(CHPAGE)
 2153/D9A3 : F8                                   DB    L(CHPAGE)
 2153/D9A4 :                                      SHIFT
 2153/D9A4 :  (MACRO-2)                           DO    
 2153/D9A4 : =>BLANK                             IFNB   
 2153/D9A4 :                                      DB    H()
 2153/D9A4 :                                      DB    L()
 2153/D9A4 :                                      SHIFT
 2153/D9A4 :                                      DO    
 2153/D9A4 : [2153]                              ENDIF
 2153/D9A4 : [2153]                              ENDIF
 2154/D9A4 : (MACRO)                    	DO	STRT
 2154/D9A4 : =>NOT BLANK                         IFNB   STRT
 2154/D9A4 : E4                                   DB    H(STRT)
 2154/D9A5 : BC                                   DB    L(STRT)
 2154/D9A6 :                                      SHIFT
 2154/D9A6 :  (MACRO-2)                           DO    
 2154/D9A6 : =>BLANK                             IFNB   
 2154/D9A6 :                                      DB    H()
 2154/D9A6 :                                      DB    L()
 2154/D9A6 :                                      SHIFT
 2154/D9A6 :                                      DO    
 2154/D9A6 : [2154]                              ENDIF
 2154/D9A6 : [2154]                              ENDIF
 2155/D9A6 : (MACRO)                    RUN1:	DO	NXT1
 2155/D9A6 : =>NOT BLANK                         IFNB   NXT1
 2155/D9A6 : E4                                   DB    H(NXT1)
 2155/D9A7 : 12                                   DB    L(NXT1)
 2155/D9A8 :                                      SHIFT
 2155/D9A8 :  (MACRO-2)                           DO    
 2155/D9A8 : =>BLANK                             IFNB   
 2155/D9A8 :                                      DB    H()
 2155/D9A8 :                                      DB    L()
 2155/D9A8 :                                      SHIFT
 2155/D9A8 :                                      DO    
 2155/D9A8 : [2155]                              ENDIF
 2155/D9A8 : [2155]                              ENDIF
 2156/D9A8 : (MACRO)                    READ:	DO	CKMODE			; handle READ
 2156/D9A8 : =>NOT BLANK                         IFNB   CKMODE
 2156/D9A8 : E5                                   DB    H(CKMODE)
 2156/D9A9 : B8                                   DB    L(CKMODE)
 2156/D9AA :                                      SHIFT
 2156/D9AA :  (MACRO-2)                           DO    
 2156/D9AA : =>BLANK                             IFNB   
 2156/D9AA :                                      DB    H()
 2156/D9AA :                                      DB    L()
 2156/D9AA :                                      SHIFT
 2156/D9AA :                                      DO    
 2156/D9AA : [2156]                              ENDIF
 2156/D9AA : [2156]                              ENDIF
 2157/D9AA : (MACRO)                    	DO	LDDTA
 2157/D9AA : =>NOT BLANK                         IFNB   LDDTA
 2157/D9AA : E8                                   DB    H(LDDTA)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 67 - 2024年05月30日 19時01分01秒


 2157/D9AB : A6                                   DB    L(LDDTA)
 2157/D9AC :                                      SHIFT
 2157/D9AC :  (MACRO-2)                           DO    
 2157/D9AC : =>BLANK                             IFNB   
 2157/D9AC :                                      DB    H()
 2157/D9AC :                                      DB    L()
 2157/D9AC :                                      SHIFT
 2157/D9AC :                                      DO    
 2157/D9AC : [2157]                              ENDIF
 2157/D9AC : [2157]                              ENDIF
 2158/D9AC : (MACRO)                    READ1:	DO	NXTDTA
 2158/D9AC : =>NOT BLANK                         IFNB   NXTDTA
 2158/D9AC : E8                                   DB    H(NXTDTA)
 2158/D9AD : B2                                   DB    L(NXTDTA)
 2158/D9AE :                                      SHIFT
 2158/D9AE :  (MACRO-2)                           DO    
 2158/D9AE : =>BLANK                             IFNB   
 2158/D9AE :                                      DB    H()
 2158/D9AE :                                      DB    L()
 2158/D9AE :                                      SHIFT
 2158/D9AE :                                      DO    
 2158/D9AE : [2158]                              ENDIF
 2158/D9AE : [2158]                              ENDIF
 2159/D9AE : (MACRO)                    	DO	XCHPNT
 2159/D9AE : =>NOT BLANK                         IFNB   XCHPNT
 2159/D9AE : E9                                   DB    H(XCHPNT)
 2159/D9AF : 1E                                   DB    L(XCHPNT)
 2159/D9B0 :                                      SHIFT
 2159/D9B0 :  (MACRO-2)                           DO    
 2159/D9B0 : =>BLANK                             IFNB   
 2159/D9B0 :                                      DB    H()
 2159/D9B0 :                                      DB    L()
 2159/D9B0 :                                      SHIFT
 2159/D9B0 :                                      DO    
 2159/D9B0 : [2159]                              ENDIF
 2159/D9B0 : [2159]                              ENDIF
 2160/D9B0 : (MACRO)                    	TSTVAR	LIST
 2160/D9B0 : B9                                  DB     H(LIST - CALBITH)
 2160/D9B1 : 44                                  DB     L(LIST)
 2161/D9B2 : (MACRO)                    	DO	FNDVAR
 2161/D9B2 : =>NOT BLANK                         IFNB   FNDVAR
 2161/D9B2 : E2                                   DB    H(FNDVAR)
 2161/D9B3 : E1                                   DB    L(FNDVAR)
 2161/D9B4 :                                      SHIFT
 2161/D9B4 :  (MACRO-2)                           DO    
 2161/D9B4 : =>BLANK                             IFNB   
 2161/D9B4 :                                      DB    H()
 2161/D9B4 :                                      DB    L()
 2161/D9B4 :                                      SHIFT
 2161/D9B4 :                                      DO    
 2161/D9B4 : [2161]                              ENDIF
 2161/D9B4 : [2161]                              ENDIF
 2162/D9B4 : (MACRO)                    	DO	DEFVAR
 2162/D9B4 : =>NOT BLANK                         IFNB   DEFVAR
 2162/D9B4 : E5                                   DB    H(DEFVAR)
 2162/D9B5 : 0E                                   DB    L(DEFVAR)
 2162/D9B6 :                                      SHIFT
 2162/D9B6 :  (MACRO-2)                           DO    
 2162/D9B6 : =>BLANK                             IFNB   
 2162/D9B6 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 68 - 2024年05月30日 19時01分01秒


 2162/D9B6 :                                      DB    L()
 2162/D9B6 :                                      SHIFT
 2162/D9B6 :                                      DO    
 2162/D9B6 : [2162]                              ENDIF
 2162/D9B6 : [2162]                              ENDIF
 2163/D9B6 : (MACRO)                    	TSTSTR	READ5,'('
 2163/D9B6 : 99                                  DB     H(READ5 - TSTBITH)
 2163/D9B7 : D5                                  DB     L(READ5)
 2163/D9B8 : 28                                  DB     '('
 2164/D9B9 : (MACRO)                    	ILCALL	INDEX
 2164/D9B9 : 1F                                  DB     H(INDEX - (JMPBITH + TSTBITH))
 2164/D9BA : 51                                  DB     L(INDEX)
 2165/D9BB : (MACRO)                    READ2:	DO	XCHPNT
 2165/D9BB : =>NOT BLANK                         IFNB   XCHPNT
 2165/D9BB : E9                                   DB    H(XCHPNT)
 2165/D9BC : 1E                                   DB    L(XCHPNT)
 2165/D9BD :                                      SHIFT
 2165/D9BD :  (MACRO-2)                           DO    
 2165/D9BD : =>BLANK                             IFNB   
 2165/D9BD :                                      DB    H()
 2165/D9BD :                                      DB    L()
 2165/D9BD :                                      SHIFT
 2165/D9BD :                                      DO    
 2165/D9BD : [2165]                              ENDIF
 2165/D9BD : [2165]                              ENDIF
 2166/D9BD : (MACRO)                    	TSTSTR	READ3,'-'
 2166/D9BD : 99                                  DB     H(READ3 - TSTBITH)
 2166/D9BE : CA                                  DB     L(READ3)
 2166/D9BF : 2D                                  DB     '-'
 2167/D9C0 : (MACRO)                    	TSTNUM	READ9
 2167/D9C0 : D9                                  DB     H(READ9)
 2167/D9C1 : F4                                  DB     L(READ9)
 2168/D9C2 : (MACRO)                    	ILCALL	RNUM
 2168/D9C2 : 1D                                  DB     H(RNUM - (JMPBITH + TSTBITH))
 2168/D9C3 : 7B                                  DB     L(RNUM)
 2169/D9C4 : (MACRO)                    	ILCALL	NEG
 2169/D9C4 : 1A                                  DB     H(NEG - (JMPBITH + TSTBITH))
 2169/D9C5 : E7                                  DB     L(NEG)
 2170/D9C6 : (MACRO)                    	DO	STVAR
 2170/D9C6 : =>NOT BLANK                         IFNB   STVAR
 2170/D9C6 : E7                                   DB    H(STVAR)
 2170/D9C7 : 8A                                   DB    L(STVAR)
 2170/D9C8 :                                      SHIFT
 2170/D9C8 :  (MACRO-2)                           DO    
 2170/D9C8 : =>BLANK                             IFNB   
 2170/D9C8 :                                      DB    H()
 2170/D9C8 :                                      DB    L()
 2170/D9C8 :                                      SHIFT
 2170/D9C8 :                                      DO    
 2170/D9C8 : [2170]                              ENDIF
 2170/D9C8 : [2170]                              ENDIF
 2171/D9C8 : (MACRO)                    	GOTO	READ7
 2171/D9C8 : 59                                  DB     H(READ7 - JMPBITH)
 2171/D9C9 : E7                                  DB     L(READ7)
 2172/D9CA : (MACRO)                    READ3:	TSTSTR	READ4,'+'
 2172/D9CA : 99                                  DB     H(READ4 - TSTBITH)
 2172/D9CB : CD                                  DB     L(READ4)
 2172/D9CC : 2B                                  DB     '+'
 2173/D9CD : (MACRO)                    READ4:	TSTNUM	READ9
 2173/D9CD : D9                                  DB     H(READ9)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 69 - 2024年05月30日 19時01分01秒


 2173/D9CE : F4                                  DB     L(READ9)
 2174/D9CF : (MACRO)                    	ILCALL	RNUM
 2174/D9CF : 1D                                  DB     H(RNUM - (JMPBITH + TSTBITH))
 2174/D9D0 : 7B                                  DB     L(RNUM)
 2175/D9D1 : (MACRO)                    	DO	STVAR
 2175/D9D1 : =>NOT BLANK                         IFNB   STVAR
 2175/D9D1 : E7                                   DB    H(STVAR)
 2175/D9D2 : 8A                                   DB    L(STVAR)
 2175/D9D3 :                                      SHIFT
 2175/D9D3 :  (MACRO-2)                           DO    
 2175/D9D3 : =>BLANK                             IFNB   
 2175/D9D3 :                                      DB    H()
 2175/D9D3 :                                      DB    L()
 2175/D9D3 :                                      SHIFT
 2175/D9D3 :                                      DO    
 2175/D9D3 : [2175]                              ENDIF
 2175/D9D3 : [2175]                              ENDIF
 2176/D9D3 : (MACRO)                    	GOTO	READ7
 2176/D9D3 : 59                                  DB     H(READ7 - JMPBITH)
 2176/D9D4 : E7                                  DB     L(READ7)
 2177/D9D5 : (MACRO)                    READ5:	TSTSTR	READ2,'$'
 2177/D9D5 : 99                                  DB     H(READ2 - TSTBITH)
 2177/D9D6 : BB                                  DB     L(READ2)
 2177/D9D7 : 24                                  DB     '$'
 2178/D9D8 : (MACRO)                    	DO	LDVAR
 2178/D9D8 : =>NOT BLANK                         IFNB   LDVAR
 2178/D9D8 : E8                                   DB    H(LDVAR)
 2178/D9D9 : 15                                   DB    L(LDVAR)
 2178/D9DA :                                      SHIFT
 2178/D9DA :  (MACRO-2)                           DO    
 2178/D9DA : =>BLANK                             IFNB   
 2178/D9DA :                                      DB    H()
 2178/D9DA :                                      DB    L()
 2178/D9DA :                                      SHIFT
 2178/D9DA :                                      DO    
 2178/D9DA : [2178]                              ENDIF
 2178/D9DA : [2178]                              ENDIF
 2179/D9DA : (MACRO)                    	DO	POPAE
 2179/D9DA : =>NOT BLANK                         IFNB   POPAE
 2179/D9DA : E1                                   DB    H(POPAE)
 2179/D9DB : BD                                   DB    L(POPAE)
 2179/D9DC :                                      SHIFT
 2179/D9DC :  (MACRO-2)                           DO    
 2179/D9DC : =>BLANK                             IFNB   
 2179/D9DC :                                      DB    H()
 2179/D9DC :                                      DB    L()
 2179/D9DC :                                      SHIFT
 2179/D9DC :                                      DO    
 2179/D9DC : [2179]                              ENDIF
 2179/D9DC : [2179]                              ENDIF
 2180/D9DC : (MACRO)                    	DO	XCHPNT
 2180/D9DC : =>NOT BLANK                         IFNB   XCHPNT
 2180/D9DC : E9                                   DB    H(XCHPNT)
 2180/D9DD : 1E                                   DB    L(XCHPNT)
 2180/D9DE :                                      SHIFT
 2180/D9DE :  (MACRO-2)                           DO    
 2180/D9DE : =>BLANK                             IFNB   
 2180/D9DE :                                      DB    H()
 2180/D9DE :                                      DB    L()
 2180/D9DE :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 70 - 2024年05月30日 19時01分01秒


 2180/D9DE :                                      DO    
 2180/D9DE : [2180]                              ENDIF
 2180/D9DE : [2180]                              ENDIF
 2181/D9DE : (MACRO)                    	TSTSTR	READ6,'"'
 2181/D9DE : 99                                  DB     H(READ6 - TSTBITH)
 2181/D9DF : E5                                  DB     L(READ6)
 2181/D9E0 : 22                                  DB     '"'
 2182/D9E1 : (MACRO)                    	DO	PUTSTR
 2182/D9E1 : =>NOT BLANK                         IFNB   PUTSTR
 2182/D9E1 : E9                                   DB    H(PUTSTR)
 2182/D9E2 : 45                                   DB    L(PUTSTR)
 2182/D9E3 :                                      SHIFT
 2182/D9E3 :  (MACRO-2)                           DO    
 2182/D9E3 : =>BLANK                             IFNB   
 2182/D9E3 :                                      DB    H()
 2182/D9E3 :                                      DB    L()
 2182/D9E3 :                                      SHIFT
 2182/D9E3 :                                      DO    
 2182/D9E3 : [2182]                              ENDIF
 2182/D9E3 : [2182]                              ENDIF
 2183/D9E3 : (MACRO)                    	GOTO	READ7
 2183/D9E3 : 59                                  DB     H(READ7 - JMPBITH)
 2183/D9E4 : E7                                  DB     L(READ7)
 2184/D9E5 : (MACRO)                    READ6:	DO	INSTR
 2184/D9E5 : =>NOT BLANK                         IFNB   INSTR
 2184/D9E5 : E9                                   DB    H(INSTR)
 2184/D9E6 : 2A                                   DB    L(INSTR)
 2184/D9E7 :                                      SHIFT
 2184/D9E7 :  (MACRO-2)                           DO    
 2184/D9E7 : =>BLANK                             IFNB   
 2184/D9E7 :                                      DB    H()
 2184/D9E7 :                                      DB    L()
 2184/D9E7 :                                      SHIFT
 2184/D9E7 :                                      DO    
 2184/D9E7 : [2184]                              ENDIF
 2184/D9E7 : [2184]                              ENDIF
 2185/D9E7 : (MACRO)                    READ7:	DO	XCHPNT
 2185/D9E7 : =>NOT BLANK                         IFNB   XCHPNT
 2185/D9E7 : E9                                   DB    H(XCHPNT)
 2185/D9E8 : 1E                                   DB    L(XCHPNT)
 2185/D9E9 :                                      SHIFT
 2185/D9E9 :  (MACRO-2)                           DO    
 2185/D9E9 : =>BLANK                             IFNB   
 2185/D9E9 :                                      DB    H()
 2185/D9E9 :                                      DB    L()
 2185/D9E9 :                                      SHIFT
 2185/D9E9 :                                      DO    
 2185/D9E9 : [2185]                              ENDIF
 2185/D9E9 : [2185]                              ENDIF
 2186/D9E9 : (MACRO)                    	TSTSTR	READ8,','
 2186/D9E9 : 99                                  DB     H(READ8 - TSTBITH)
 2186/D9EA : F0                                  DB     L(READ8)
 2186/D9EB : 2C                                  DB     ','
 2187/D9EC : (MACRO)                    	DO	XCHPNT
 2187/D9EC : =>NOT BLANK                         IFNB   XCHPNT
 2187/D9EC : E9                                   DB    H(XCHPNT)
 2187/D9ED : 1E                                   DB    L(XCHPNT)
 2187/D9EE :                                      SHIFT
 2187/D9EE :  (MACRO-2)                           DO    
 2187/D9EE : =>BLANK                             IFNB   
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 71 - 2024年05月30日 19時01分01秒


 2187/D9EE :                                      DB    H()
 2187/D9EE :                                      DB    L()
 2187/D9EE :                                      SHIFT
 2187/D9EE :                                      DO    
 2187/D9EE : [2187]                              ENDIF
 2187/D9EE : [2187]                              ENDIF
 2188/D9EE : (MACRO)                    	GOTO	READ1
 2188/D9EE : 59                                  DB     H(READ1 - JMPBITH)
 2188/D9EF : AC                                  DB     L(READ1)
 2189/D9F0 : (MACRO)                    READ8:	DO	LDPNT
 2189/D9F0 : =>NOT BLANK                         IFNB   LDPNT
 2189/D9F0 : E5                                   DB    H(LDPNT)
 2189/D9F1 : 04                                   DB    L(LDPNT)
 2189/D9F2 :                                      SHIFT
 2189/D9F2 :  (MACRO-2)                           DO    
 2189/D9F2 : =>BLANK                             IFNB   
 2189/D9F2 :                                      DB    H()
 2189/D9F2 :                                      DB    L()
 2189/D9F2 :                                      SHIFT
 2189/D9F2 :                                      DO    
 2189/D9F2 : [2189]                              ENDIF
 2189/D9F2 : [2189]                              ENDIF
 2190/D9F2 : (MACRO)                    	DO	DNE
 2190/D9F2 : =>NOT BLANK                         IFNB   DNE
 2190/D9F2 : E3                                   DB    H(DNE)
 2190/D9F3 : B3                                   DB    L(DNE)
 2190/D9F4 :                                      SHIFT
 2190/D9F4 :  (MACRO-2)                           DO    
 2190/D9F4 : =>BLANK                             IFNB   
 2190/D9F4 :                                      DB    H()
 2190/D9F4 :                                      DB    L()
 2190/D9F4 :                                      SHIFT
 2190/D9F4 :                                      DO    
 2190/D9F4 : [2190]                              ENDIF
 2190/D9F4 : [2190]                              ENDIF
 2191/D9F4 : (MACRO)                    READ9:	DO	SNTX
 2191/D9F4 : =>NOT BLANK                         IFNB   SNTX
 2191/D9F4 : E3                                   DB    H(SNTX)
 2191/D9F5 : F8                                   DB    L(SNTX)
 2191/D9F6 :                                      SHIFT
 2191/D9F6 :  (MACRO-2)                           DO    
 2191/D9F6 : =>BLANK                             IFNB   
 2191/D9F6 :                                      DB    H()
 2191/D9F6 :                                      DB    L()
 2191/D9F6 :                                      SHIFT
 2191/D9F6 :                                      DO    
 2191/D9F6 : [2191]                              ENDIF
 2191/D9F6 : [2191]                              ENDIF
 2192/D9F6 : (MACRO)                    RESTOR:	DO	CKMODE			; handle RESTORE
 2192/D9F6 : =>NOT BLANK                         IFNB   CKMODE
 2192/D9F6 : E5                                   DB    H(CKMODE)
 2192/D9F7 : B8                                   DB    L(CKMODE)
 2192/D9F8 :                                      SHIFT
 2192/D9F8 :  (MACRO-2)                           DO    
 2192/D9F8 : =>BLANK                             IFNB   
 2192/D9F8 :                                      DB    H()
 2192/D9F8 :                                      DB    L()
 2192/D9F8 :                                      SHIFT
 2192/D9F8 :                                      DO    
 2192/D9F8 : [2192]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 72 - 2024年05月30日 19時01分01秒


 2192/D9F8 : [2192]                              ENDIF
 2193/D9F8 : (MACRO)                    	DO	FNDDTA
 2193/D9F8 : =>NOT BLANK                         IFNB   FNDDTA
 2193/D9F8 : E9                                   DB    H(FNDDTA)
 2193/D9F9 : 63                                   DB    L(FNDDTA)
 2193/D9FA :                                      SHIFT
 2193/D9FA :  (MACRO-2)                           DO    
 2193/D9FA : =>BLANK                             IFNB   
 2193/D9FA :                                      DB    H()
 2193/D9FA :                                      DB    L()
 2193/D9FA :                                      SHIFT
 2193/D9FA :                                      DO    
 2193/D9FA : [2193]                              ENDIF
 2193/D9FA : [2193]                              ENDIF
 2194/D9FA : (MACRO)                    	TSTNUM	RESTR1
 2194/D9FA : DA                                  DB     H(RESTR1)
 2194/D9FB : 02                                  DB     L(RESTR1)
 2195/D9FC : (MACRO)                    	DO	POPAE
 2195/D9FC : =>NOT BLANK                         IFNB   POPAE
 2195/D9FC : E1                                   DB    H(POPAE)
 2195/D9FD : BD                                   DB    L(POPAE)
 2195/D9FE :                                      SHIFT
 2195/D9FE :  (MACRO-2)                           DO    
 2195/D9FE : =>BLANK                             IFNB   
 2195/D9FE :                                      DB    H()
 2195/D9FE :                                      DB    L()
 2195/D9FE :                                      SHIFT
 2195/D9FE :                                      DO    
 2195/D9FE : [2195]                              ENDIF
 2195/D9FE : [2195]                              ENDIF
 2196/D9FE : (MACRO)                    	DO	FNDLBL
 2196/D9FE : =>NOT BLANK                         IFNB   FNDLBL
 2196/D9FE : E5                                   DB    H(FNDLBL)
 2196/D9FF : 69                                   DB    L(FNDLBL)
 2196/DA00 :                                      SHIFT
 2196/DA00 :  (MACRO-2)                           DO    
 2196/DA00 : =>BLANK                             IFNB   
 2196/DA00 :                                      DB    H()
 2196/DA00 :                                      DB    L()
 2196/DA00 :                                      SHIFT
 2196/DA00 :                                      DO    
 2196/DA00 : [2196]                              ENDIF
 2196/DA00 : [2196]                              ENDIF
 2197/DA00 : (MACRO)                    	DO	XCHPNT
 2197/DA00 : =>NOT BLANK                         IFNB   XCHPNT
 2197/DA00 : E9                                   DB    H(XCHPNT)
 2197/DA01 : 1E                                   DB    L(XCHPNT)
 2197/DA02 :                                      SHIFT
 2197/DA02 :  (MACRO-2)                           DO    
 2197/DA02 : =>BLANK                             IFNB   
 2197/DA02 :                                      DB    H()
 2197/DA02 :                                      DB    L()
 2197/DA02 :                                      SHIFT
 2197/DA02 :                                      DO    
 2197/DA02 : [2197]                              ENDIF
 2197/DA02 : [2197]                              ENDIF
 2198/DA02 : (MACRO)                    RESTR1:	DO	LDPNT
 2198/DA02 : =>NOT BLANK                         IFNB   LDPNT
 2198/DA02 : E5                                   DB    H(LDPNT)
 2198/DA03 : 04                                   DB    L(LDPNT)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 73 - 2024年05月30日 19時01分01秒


 2198/DA04 :                                      SHIFT
 2198/DA04 :  (MACRO-2)                           DO    
 2198/DA04 : =>BLANK                             IFNB   
 2198/DA04 :                                      DB    H()
 2198/DA04 :                                      DB    L()
 2198/DA04 :                                      SHIFT
 2198/DA04 :                                      DO    
 2198/DA04 : [2198]                              ENDIF
 2198/DA04 : [2198]                              ENDIF
 2199/DA04 : (MACRO)                    	DO	DNE
 2199/DA04 : =>NOT BLANK                         IFNB   DNE
 2199/DA04 : E3                                   DB    H(DNE)
 2199/DA05 : B3                                   DB    L(DNE)
 2199/DA06 :                                      SHIFT
 2199/DA06 :  (MACRO-2)                           DO    
 2199/DA06 : =>BLANK                             IFNB   
 2199/DA06 :                                      DB    H()
 2199/DA06 :                                      DB    L()
 2199/DA06 :                                      SHIFT
 2199/DA06 :                                      DO    
 2199/DA06 : [2199]                              ENDIF
 2199/DA06 : [2199]                              ENDIF
 2200/DA06 : (MACRO)                    INPUT:	DO	CKMODE			; handle INPUT
 2200/DA06 : =>NOT BLANK                         IFNB   CKMODE
 2200/DA06 : E5                                   DB    H(CKMODE)
 2200/DA07 : B8                                   DB    L(CKMODE)
 2200/DA08 :                                      SHIFT
 2200/DA08 :  (MACRO-2)                           DO    
 2200/DA08 : =>BLANK                             IFNB   
 2200/DA08 :                                      DB    H()
 2200/DA08 :                                      DB    L()
 2200/DA08 :                                      SHIFT
 2200/DA08 :                                      DO    
 2200/DA08 : [2200]                              ENDIF
 2200/DA08 : [2200]                              ENDIF
 2201/DA08 : (MACRO)                    	TSTSTR	INPUT1,'"'
 2201/DA08 : 9A                                  DB     H(INPUT1 - TSTBITH)
 2201/DA09 : 0D                                  DB     L(INPUT1)
 2201/DA0A : 22                                  DB     '"'
 2202/DA0B : (MACRO)                    	DO	PRSTR
 2202/DA0B : =>NOT BLANK                         IFNB   PRSTR
 2202/DA0B : E9                                   DB    H(PRSTR)
 2202/DA0C : 71                                   DB    L(PRSTR)
 2202/DA0D :                                      SHIFT
 2202/DA0D :  (MACRO-2)                           DO    
 2202/DA0D : =>BLANK                             IFNB   
 2202/DA0D :                                      DB    H()
 2202/DA0D :                                      DB    L()
 2202/DA0D :                                      SHIFT
 2202/DA0D :                                      DO    
 2202/DA0D : [2202]                              ENDIF
 2202/DA0D : [2202]                              ENDIF
 2203/DA0D : (MACRO)                    INPUT1:	TSTVAR	SYNTAX
 2203/DA0D : B9                                  DB     H(SYNTAX - CALBITH)
 2203/DA0E : 42                                  DB     L(SYNTAX)
 2204/DA0F : (MACRO)                    	DO	FNDVAR
 2204/DA0F : =>NOT BLANK                         IFNB   FNDVAR
 2204/DA0F : E2                                   DB    H(FNDVAR)
 2204/DA10 : E1                                   DB    L(FNDVAR)
 2204/DA11 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 74 - 2024年05月30日 19時01分01秒


 2204/DA11 :  (MACRO-2)                           DO    
 2204/DA11 : =>BLANK                             IFNB   
 2204/DA11 :                                      DB    H()
 2204/DA11 :                                      DB    L()
 2204/DA11 :                                      SHIFT
 2204/DA11 :                                      DO    
 2204/DA11 : [2204]                              ENDIF
 2204/DA11 : [2204]                              ENDIF
 2205/DA11 : (MACRO)                    	DO	DEFVAR
 2205/DA11 : =>NOT BLANK                         IFNB   DEFVAR
 2205/DA11 : E5                                   DB    H(DEFVAR)
 2205/DA12 : 0E                                   DB    L(DEFVAR)
 2205/DA13 :                                      SHIFT
 2205/DA13 :  (MACRO-2)                           DO    
 2205/DA13 : =>BLANK                             IFNB   
 2205/DA13 :                                      DB    H()
 2205/DA13 :                                      DB    L()
 2205/DA13 :                                      SHIFT
 2205/DA13 :                                      DO    
 2205/DA13 : [2205]                              ENDIF
 2205/DA13 : [2205]                              ENDIF
 2206/DA13 : (MACRO)                    	TSTSTR	INPUT3,'$'
 2206/DA13 : 9A                                  DB     H(INPUT3 - TSTBITH)
 2206/DA14 : 20                                  DB     L(INPUT3)
 2206/DA15 : 24                                  DB     '$'
 2207/DA16 : (MACRO)                    	DO	LDVAR
 2207/DA16 : =>NOT BLANK                         IFNB   LDVAR
 2207/DA16 : E8                                   DB    H(LDVAR)
 2207/DA17 : 15                                   DB    L(LDVAR)
 2207/DA18 :                                      SHIFT
 2207/DA18 :  (MACRO-2)                           DO    
 2207/DA18 : =>BLANK                             IFNB   
 2207/DA18 :                                      DB    H()
 2207/DA18 :                                      DB    L()
 2207/DA18 :                                      SHIFT
 2207/DA18 :                                      DO    
 2207/DA18 : [2207]                              ENDIF
 2207/DA18 : [2207]                              ENDIF
 2208/DA18 : (MACRO)                    	DO	POPAE
 2208/DA18 : =>NOT BLANK                         IFNB   POPAE
 2208/DA18 : E1                                   DB    H(POPAE)
 2208/DA19 : BD                                   DB    L(POPAE)
 2208/DA1A :                                      SHIFT
 2208/DA1A :  (MACRO-2)                           DO    
 2208/DA1A : =>BLANK                             IFNB   
 2208/DA1A :                                      DB    H()
 2208/DA1A :                                      DB    L()
 2208/DA1A :                                      SHIFT
 2208/DA1A :                                      DO    
 2208/DA1A : [2208]                              ENDIF
 2208/DA1A : [2208]                              ENDIF
 2209/DA1A : (MACRO)                    	DO	GETLIN
 2209/DA1A : =>NOT BLANK                         IFNB   GETLIN
 2209/DA1A : E0                                   DB    H(GETLIN)
 2209/DA1B : 01                                   DB    L(GETLIN)
 2209/DA1C :                                      SHIFT
 2209/DA1C :  (MACRO-2)                           DO    
 2209/DA1C : =>BLANK                             IFNB   
 2209/DA1C :                                      DB    H()
 2209/DA1C :                                      DB    L()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 75 - 2024年05月30日 19時01分01秒


 2209/DA1C :                                      SHIFT
 2209/DA1C :                                      DO    
 2209/DA1C : [2209]                              ENDIF
 2209/DA1C : [2209]                              ENDIF
 2210/DA1C : (MACRO)                    	DO	ISTRNG
 2210/DA1C : =>NOT BLANK                         IFNB   ISTRNG
 2210/DA1C : E9                                   DB    H(ISTRNG)
 2210/DA1D : 0A                                   DB    L(ISTRNG)
 2210/DA1E :                                      SHIFT
 2210/DA1E :  (MACRO-2)                           DO    
 2210/DA1E : =>BLANK                             IFNB   
 2210/DA1E :                                      DB    H()
 2210/DA1E :                                      DB    L()
 2210/DA1E :                                      SHIFT
 2210/DA1E :                                      DO    
 2210/DA1E : [2210]                              ENDIF
 2210/DA1E : [2210]                              ENDIF
 2211/DA1E : (MACRO)                    INPUT2:	DO	DNE
 2211/DA1E : =>NOT BLANK                         IFNB   DNE
 2211/DA1E : E3                                   DB    H(DNE)
 2211/DA1F : B3                                   DB    L(DNE)
 2211/DA20 :                                      SHIFT
 2211/DA20 :  (MACRO-2)                           DO    
 2211/DA20 : =>BLANK                             IFNB   
 2211/DA20 :                                      DB    H()
 2211/DA20 :                                      DB    L()
 2211/DA20 :                                      SHIFT
 2211/DA20 :                                      DO    
 2211/DA20 : [2211]                              ENDIF
 2211/DA20 : [2211]                              ENDIF
 2212/DA20 : (MACRO)                    INPUT3:	DO	GETLIN
 2212/DA20 : =>NOT BLANK                         IFNB   GETLIN
 2212/DA20 : E0                                   DB    H(GETLIN)
 2212/DA21 : 01                                   DB    L(GETLIN)
 2212/DA22 :                                      SHIFT
 2212/DA22 :  (MACRO-2)                           DO    
 2212/DA22 : =>BLANK                             IFNB   
 2212/DA22 :                                      DB    H()
 2212/DA22 :                                      DB    L()
 2212/DA22 :                                      SHIFT
 2212/DA22 :                                      DO    
 2212/DA22 : [2212]                              ENDIF
 2212/DA22 : [2212]                              ENDIF
 2213/DA22 : (MACRO)                    INPUT4:	DO	XCHPNT
 2213/DA22 : =>NOT BLANK                         IFNB   XCHPNT
 2213/DA22 : E9                                   DB    H(XCHPNT)
 2213/DA23 : 1E                                   DB    L(XCHPNT)
 2213/DA24 :                                      SHIFT
 2213/DA24 :  (MACRO-2)                           DO    
 2213/DA24 : =>BLANK                             IFNB   
 2213/DA24 :                                      DB    H()
 2213/DA24 :                                      DB    L()
 2213/DA24 :                                      SHIFT
 2213/DA24 :                                      DO    
 2213/DA24 : [2213]                              ENDIF
 2213/DA24 : [2213]                              ENDIF
 2214/DA24 : (MACRO)                    	TSTSTR	INPUT5,'('
 2214/DA24 : 9A                                  DB     H(INPUT5 - TSTBITH)
 2214/DA25 : 29                                  DB     L(INPUT5)
 2214/DA26 : 28                                  DB     '('
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 76 - 2024年05月30日 19時01分01秒


 2215/DA27 : (MACRO)                    	ILCALL	INDEX
 2215/DA27 : 1F                                  DB     H(INDEX - (JMPBITH + TSTBITH))
 2215/DA28 : 51                                  DB     L(INDEX)
 2216/DA29 : (MACRO)                    INPUT5:	DO	XCHPNT
 2216/DA29 : =>NOT BLANK                         IFNB   XCHPNT
 2216/DA29 : E9                                   DB    H(XCHPNT)
 2216/DA2A : 1E                                   DB    L(XCHPNT)
 2216/DA2B :                                      SHIFT
 2216/DA2B :  (MACRO-2)                           DO    
 2216/DA2B : =>BLANK                             IFNB   
 2216/DA2B :                                      DB    H()
 2216/DA2B :                                      DB    L()
 2216/DA2B :                                      SHIFT
 2216/DA2B :                                      DO    
 2216/DA2B : [2216]                              ENDIF
 2216/DA2B : [2216]                              ENDIF
 2217/DA2B : (MACRO)                    	ILCALL	REXPR
 2217/DA2B : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2217/DA2C : C6                                  DB     L(REXPR)
 2218/DA2D : (MACRO)                    	DO	STVAR
 2218/DA2D : =>NOT BLANK                         IFNB   STVAR
 2218/DA2D : E7                                   DB    H(STVAR)
 2218/DA2E : 8A                                   DB    L(STVAR)
 2218/DA2F :                                      SHIFT
 2218/DA2F :  (MACRO-2)                           DO    
 2218/DA2F : =>BLANK                             IFNB   
 2218/DA2F :                                      DB    H()
 2218/DA2F :                                      DB    L()
 2218/DA2F :                                      SHIFT
 2218/DA2F :                                      DO    
 2218/DA2F : [2218]                              ENDIF
 2218/DA2F : [2218]                              ENDIF
 2219/DA2F : (MACRO)                    	DO	XCHPNT
 2219/DA2F : =>NOT BLANK                         IFNB   XCHPNT
 2219/DA2F : E9                                   DB    H(XCHPNT)
 2219/DA30 : 1E                                   DB    L(XCHPNT)
 2219/DA31 :                                      SHIFT
 2219/DA31 :  (MACRO-2)                           DO    
 2219/DA31 : =>BLANK                             IFNB   
 2219/DA31 :                                      DB    H()
 2219/DA31 :                                      DB    L()
 2219/DA31 :                                      SHIFT
 2219/DA31 :                                      DO    
 2219/DA31 : [2219]                              ENDIF
 2219/DA31 : [2219]                              ENDIF
 2220/DA31 : (MACRO)                    	TSTSTR	INPUT2,','
 2220/DA31 : 9A                                  DB     H(INPUT2 - TSTBITH)
 2220/DA32 : 1E                                  DB     L(INPUT2)
 2220/DA33 : 2C                                  DB     ','
 2221/DA34 : (MACRO)                    	TSTVAR	SYNTAX
 2221/DA34 : B9                                  DB     H(SYNTAX - CALBITH)
 2221/DA35 : 42                                  DB     L(SYNTAX)
 2222/DA36 : (MACRO)                    	DO	FNDVAR
 2222/DA36 : =>NOT BLANK                         IFNB   FNDVAR
 2222/DA36 : E2                                   DB    H(FNDVAR)
 2222/DA37 : E1                                   DB    L(FNDVAR)
 2222/DA38 :                                      SHIFT
 2222/DA38 :  (MACRO-2)                           DO    
 2222/DA38 : =>BLANK                             IFNB   
 2222/DA38 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 77 - 2024年05月30日 19時01分01秒


 2222/DA38 :                                      DB    L()
 2222/DA38 :                                      SHIFT
 2222/DA38 :                                      DO    
 2222/DA38 : [2222]                              ENDIF
 2222/DA38 : [2222]                              ENDIF
 2223/DA38 : (MACRO)                    	DO	DEFVAR
 2223/DA38 : =>NOT BLANK                         IFNB   DEFVAR
 2223/DA38 : E5                                   DB    H(DEFVAR)
 2223/DA39 : 0E                                   DB    L(DEFVAR)
 2223/DA3A :                                      SHIFT
 2223/DA3A :  (MACRO-2)                           DO    
 2223/DA3A : =>BLANK                             IFNB   
 2223/DA3A :                                      DB    H()
 2223/DA3A :                                      DB    L()
 2223/DA3A :                                      SHIFT
 2223/DA3A :                                      DO    
 2223/DA3A : [2223]                              ENDIF
 2223/DA3A : [2223]                              ENDIF
 2224/DA3A : (MACRO)                    	DO	XCHPNT
 2224/DA3A : =>NOT BLANK                         IFNB   XCHPNT
 2224/DA3A : E9                                   DB    H(XCHPNT)
 2224/DA3B : 1E                                   DB    L(XCHPNT)
 2224/DA3C :                                      SHIFT
 2224/DA3C :  (MACRO-2)                           DO    
 2224/DA3C : =>BLANK                             IFNB   
 2224/DA3C :                                      DB    H()
 2224/DA3C :                                      DB    L()
 2224/DA3C :                                      SHIFT
 2224/DA3C :                                      DO    
 2224/DA3C : [2224]                              ENDIF
 2224/DA3C : [2224]                              ENDIF
 2225/DA3C : (MACRO)                    	TSTSTR	SYNTAX,','
 2225/DA3C : 99                                  DB     H(SYNTAX - TSTBITH)
 2225/DA3D : 42                                  DB     L(SYNTAX)
 2225/DA3E : 2C                                  DB     ','
 2226/DA3F : (MACRO)                    	GOTO	INPUT4
 2226/DA3F : 5A                                  DB     H(INPUT4 - JMPBITH)
 2226/DA40 : 22                                  DB     L(INPUT4)
 2227/DA41 : (MACRO)                    DO:	DO	CKMODE			; handle DO
 2227/DA41 : =>NOT BLANK                         IFNB   CKMODE
 2227/DA41 : E5                                   DB    H(CKMODE)
 2227/DA42 : B8                                   DB    L(CKMODE)
 2227/DA43 :                                      SHIFT
 2227/DA43 :  (MACRO-2)                           DO    
 2227/DA43 : =>BLANK                             IFNB   
 2227/DA43 :                                      DB    H()
 2227/DA43 :                                      DB    L()
 2227/DA43 :                                      SHIFT
 2227/DA43 :                                      DO    
 2227/DA43 : [2227]                              ENDIF
 2227/DA43 : [2227]                              ENDIF
 2228/DA43 : (MACRO)                    	DO	DONE
 2228/DA43 : =>NOT BLANK                         IFNB   DONE
 2228/DA43 : E3                                   DB    H(DONE)
 2228/DA44 : 71                                   DB    L(DONE)
 2228/DA45 :                                      SHIFT
 2228/DA45 :  (MACRO-2)                           DO    
 2228/DA45 : =>BLANK                             IFNB   
 2228/DA45 :                                      DB    H()
 2228/DA45 :                                      DB    L()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 78 - 2024年05月30日 19時01分01秒


 2228/DA45 :                                      SHIFT
 2228/DA45 :                                      DO    
 2228/DA45 : [2228]                              ENDIF
 2228/DA45 : [2228]                              ENDIF
 2229/DA45 : (MACRO)                    	DO	SAVEDO
 2229/DA45 : =>NOT BLANK                         IFNB   SAVEDO
 2229/DA45 : E4                                   DB    H(SAVEDO)
 2229/DA46 : 69                                   DB    L(SAVEDO)
 2229/DA47 :                                      SHIFT
 2229/DA47 :  (MACRO-2)                           DO    
 2229/DA47 : =>BLANK                             IFNB   
 2229/DA47 :                                      DB    H()
 2229/DA47 :                                      DB    L()
 2229/DA47 :                                      SHIFT
 2229/DA47 :                                      DO    
 2229/DA47 : [2229]                              ENDIF
 2229/DA47 : [2229]                              ENDIF
 2230/DA47 : (MACRO)                    UNTIL:	DO	CKMODE			; handle UNTIL
 2230/DA47 : =>NOT BLANK                         IFNB   CKMODE
 2230/DA47 : E5                                   DB    H(CKMODE)
 2230/DA48 : B8                                   DB    L(CKMODE)
 2230/DA49 :                                      SHIFT
 2230/DA49 :  (MACRO-2)                           DO    
 2230/DA49 : =>BLANK                             IFNB   
 2230/DA49 :                                      DB    H()
 2230/DA49 :                                      DB    L()
 2230/DA49 :                                      SHIFT
 2230/DA49 :                                      DO    
 2230/DA49 : [2230]                              ENDIF
 2230/DA49 : [2230]                              ENDIF
 2231/DA49 : (MACRO)                    	ILCALL	RELSTR
 2231/DA49 : 1C                                  DB     H(RELSTR - (JMPBITH + TSTBITH))
 2231/DA4A : 72                                  DB     L(RELSTR)
 2232/DA4B : (MACRO)                    	DO	DONE
 2232/DA4B : =>NOT BLANK                         IFNB   DONE
 2232/DA4B : E3                                   DB    H(DONE)
 2232/DA4C : 71                                   DB    L(DONE)
 2232/DA4D :                                      SHIFT
 2232/DA4D :  (MACRO-2)                           DO    
 2232/DA4D : =>BLANK                             IFNB   
 2232/DA4D :                                      DB    H()
 2232/DA4D :                                      DB    L()
 2232/DA4D :                                      SHIFT
 2232/DA4D :                                      DO    
 2232/DA4D : [2232]                              ENDIF
 2232/DA4D : [2232]                              ENDIF
 2233/DA4D : (MACRO)                    	DO	UNTL
 2233/DA4D : =>NOT BLANK                         IFNB   UNTL
 2233/DA4D : E4                                   DB    H(UNTL)
 2233/DA4E : 96                                   DB    L(UNTL)
 2233/DA4F :                                      SHIFT
 2233/DA4F :  (MACRO-2)                           DO    
 2233/DA4F : =>BLANK                             IFNB   
 2233/DA4F :                                      DB    H()
 2233/DA4F :                                      DB    L()
 2233/DA4F :                                      SHIFT
 2233/DA4F :                                      DO    
 2233/DA4F : [2233]                              ENDIF
 2233/DA4F : [2233]                              ENDIF
 2234/DA4F : (MACRO)                    LINK:	ILCALL	REXPR			; handle LINK
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 79 - 2024年05月30日 19時01分01秒


 2234/DA4F : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2234/DA50 : C6                                  DB     L(REXPR)
 2235/DA51 : (MACRO)                    	DO	POPAE
 2235/DA51 : =>NOT BLANK                         IFNB   POPAE
 2235/DA51 : E1                                   DB    H(POPAE)
 2235/DA52 : BD                                   DB    L(POPAE)
 2235/DA53 :                                      SHIFT
 2235/DA53 :  (MACRO-2)                           DO    
 2235/DA53 : =>BLANK                             IFNB   
 2235/DA53 :                                      DB    H()
 2235/DA53 :                                      DB    L()
 2235/DA53 :                                      SHIFT
 2235/DA53 :                                      DO    
 2235/DA53 : [2235]                              ENDIF
 2235/DA53 : [2235]                              ENDIF
 2236/DA53 : (MACRO)                    	DO	DONE
 2236/DA53 : =>NOT BLANK                         IFNB   DONE
 2236/DA53 : E3                                   DB    H(DONE)
 2236/DA54 : 71                                   DB    L(DONE)
 2236/DA55 :                                      SHIFT
 2236/DA55 :  (MACRO-2)                           DO    
 2236/DA55 : =>BLANK                             IFNB   
 2236/DA55 :                                      DB    H()
 2236/DA55 :                                      DB    L()
 2236/DA55 :                                      SHIFT
 2236/DA55 :                                      DO    
 2236/DA55 : [2236]                              ENDIF
 2236/DA55 : [2236]                              ENDIF
 2237/DA55 : (MACRO)                    	DO	XCHPNT
 2237/DA55 : =>NOT BLANK                         IFNB   XCHPNT
 2237/DA55 : E9                                   DB    H(XCHPNT)
 2237/DA56 : 1E                                   DB    L(XCHPNT)
 2237/DA57 :                                      SHIFT
 2237/DA57 :  (MACRO-2)                           DO    
 2237/DA57 : =>BLANK                             IFNB   
 2237/DA57 :                                      DB    H()
 2237/DA57 :                                      DB    L()
 2237/DA57 :                                      SHIFT
 2237/DA57 :                                      DO    
 2237/DA57 : [2237]                              ENDIF
 2237/DA57 : [2237]                              ENDIF
 2238/DA57 : (MACRO)                    	DO	MC			; execute machine code
 2238/DA57 : =>NOT BLANK                         IFNB   MC
 2238/DA57 : E9                                   DB    H(MC)
 2238/DA58 : B9                                   DB    L(MC)
 2238/DA59 :                                      SHIFT
 2238/DA59 :  (MACRO-2)                           DO    
 2238/DA59 : =>BLANK                             IFNB   
 2238/DA59 :                                      DB    H()
 2238/DA59 :                                      DB    L()
 2238/DA59 :                                      SHIFT
 2238/DA59 :                                      DO    
 2238/DA59 : [2238]                              ENDIF
 2238/DA59 : [2238]                              ENDIF
 2239/DA59 : (MACRO)                    	DO	XCHPNT
 2239/DA59 : =>NOT BLANK                         IFNB   XCHPNT
 2239/DA59 : E9                                   DB    H(XCHPNT)
 2239/DA5A : 1E                                   DB    L(XCHPNT)
 2239/DA5B :                                      SHIFT
 2239/DA5B :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 80 - 2024年05月30日 19時01分01秒


 2239/DA5B : =>BLANK                             IFNB   
 2239/DA5B :                                      DB    H()
 2239/DA5B :                                      DB    L()
 2239/DA5B :                                      SHIFT
 2239/DA5B :                                      DO    
 2239/DA5B : [2239]                              ENDIF
 2239/DA5B : [2239]                              ENDIF
 2240/DA5B : (MACRO)                    	DO	NXT
 2240/DA5B : =>NOT BLANK                         IFNB   NXT
 2240/DA5B : E4                                   DB    H(NXT)
 2240/DA5C : 0E                                   DB    L(NXT)
 2240/DA5D :                                      SHIFT
 2240/DA5D :  (MACRO-2)                           DO    
 2240/DA5D : =>BLANK                             IFNB   
 2240/DA5D :                                      DB    H()
 2240/DA5D :                                      DB    L()
 2240/DA5D :                                      SHIFT
 2240/DA5D :                                      DO    
 2240/DA5D : [2240]                              ENDIF
 2240/DA5D : [2240]                              ENDIF
 2241/DA5D : (MACRO)                    ON:	ILCALL	REXPR			; handle ON..
 2241/DA5D : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2241/DA5E : C6                                  DB     L(REXPR)
 2242/DA5F : (MACRO)                    	DO	POPAE
 2242/DA5F : =>NOT BLANK                         IFNB   POPAE
 2242/DA5F : E1                                   DB    H(POPAE)
 2242/DA60 : BD                                   DB    L(POPAE)
 2242/DA61 :                                      SHIFT
 2242/DA61 :  (MACRO-2)                           DO    
 2242/DA61 : =>BLANK                             IFNB   
 2242/DA61 :                                      DB    H()
 2242/DA61 :                                      DB    L()
 2242/DA61 :                                      SHIFT
 2242/DA61 :                                      DO    
 2242/DA61 : [2242]                              ENDIF
 2242/DA61 : [2242]                              ENDIF
 2243/DA61 : (MACRO)                    	TSTSTR	ON1,T_GOSUB		; ..GOSUB
 2243/DA61 : 9A                                  DB     H(ON1 - TSTBITH)
 2243/DA62 : 6A                                  DB     L(ON1)
 2243/DA63 : 91                                  DB     T_GOSUB
 2244/DA64 : (MACRO)                    	ILCALL	REXPR
 2244/DA64 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2244/DA65 : C6                                  DB     L(REXPR)
 2245/DA66 : (MACRO)                    	DO	GTO
 2245/DA66 : =>NOT BLANK                         IFNB   GTO
 2245/DA66 : E9                                   DB    H(GTO)
 2245/DA67 : 7D                                   DB    L(GTO)
 2245/DA68 :                                      SHIFT
 2245/DA68 :  (MACRO-2)                           DO    
 2245/DA68 : =>BLANK                             IFNB   
 2245/DA68 :                                      DB    H()
 2245/DA68 :                                      DB    L()
 2245/DA68 :                                      SHIFT
 2245/DA68 :                                      DO    
 2245/DA68 : [2245]                              ENDIF
 2245/DA68 : [2245]                              ENDIF
 2246/DA68 : (MACRO)                    	GOTO	GOSUB1
 2246/DA68 : 5A                                  DB     H(GOSUB1 - JMPBITH)
 2246/DA69 : 7D                                  DB     L(GOSUB1)
 2247/DA6A : (MACRO)                    ON1:	TSTSTR	SYNTAX,T_GOTO		; ..GOTO
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 81 - 2024年05月30日 19時01分01秒


 2247/DA6A : 99                                  DB     H(SYNTAX - TSTBITH)
 2247/DA6B : 42                                  DB     L(SYNTAX)
 2247/DA6C : 92                                  DB     T_GOTO
 2248/DA6D : (MACRO)                    	ILCALL	REXPR
 2248/DA6D : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2248/DA6E : C6                                  DB     L(REXPR)
 2249/DA6F : (MACRO)                    	DO	GTO
 2249/DA6F : =>NOT BLANK                         IFNB   GTO
 2249/DA6F : E9                                   DB    H(GTO)
 2249/DA70 : 7D                                   DB    L(GTO)
 2249/DA71 :                                      SHIFT
 2249/DA71 :  (MACRO-2)                           DO    
 2249/DA71 : =>BLANK                             IFNB   
 2249/DA71 :                                      DB    H()
 2249/DA71 :                                      DB    L()
 2249/DA71 :                                      SHIFT
 2249/DA71 :                                      DO    
 2249/DA71 : [2249]                              ENDIF
 2249/DA71 : [2249]                              ENDIF
 2250/DA71 : (MACRO)                    	GOTO	GOTO1
 2250/DA71 : 5A                                  DB     H(GOTO1 - JMPBITH)
 2250/DA72 : 7F                                  DB     L(GOTO1)
 2251/DA73 : (MACRO)                    GOTO:	ILCALL	REXPR			; handle GOTO
 2251/DA73 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2251/DA74 : C6                                  DB     L(REXPR)
 2252/DA75 : (MACRO)                    	DO	DONE
 2252/DA75 : =>NOT BLANK                         IFNB   DONE
 2252/DA75 : E3                                   DB    H(DONE)
 2252/DA76 : 71                                   DB    L(DONE)
 2252/DA77 :                                      SHIFT
 2252/DA77 :  (MACRO-2)                           DO    
 2252/DA77 : =>BLANK                             IFNB   
 2252/DA77 :                                      DB    H()
 2252/DA77 :                                      DB    L()
 2252/DA77 :                                      SHIFT
 2252/DA77 :                                      DO    
 2252/DA77 : [2252]                              ENDIF
 2252/DA77 : [2252]                              ENDIF
 2253/DA77 : (MACRO)                    	GOTO	GOTO1
 2253/DA77 : 5A                                  DB     H(GOTO1 - JMPBITH)
 2253/DA78 : 7F                                  DB     L(GOTO1)
 2254/DA79 : (MACRO)                    GOSUB:	ILCALL	REXPR			; handle GOSUB
 2254/DA79 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2254/DA7A : C6                                  DB     L(REXPR)
 2255/DA7B : (MACRO)                    	DO	DONE
 2255/DA7B : =>NOT BLANK                         IFNB   DONE
 2255/DA7B : E3                                   DB    H(DONE)
 2255/DA7C : 71                                   DB    L(DONE)
 2255/DA7D :                                      SHIFT
 2255/DA7D :  (MACRO-2)                           DO    
 2255/DA7D : =>BLANK                             IFNB   
 2255/DA7D :                                      DB    H()
 2255/DA7D :                                      DB    L()
 2255/DA7D :                                      SHIFT
 2255/DA7D :                                      DO    
 2255/DA7D : [2255]                              ENDIF
 2255/DA7D : [2255]                              ENDIF
 2256/DA7D : (MACRO)                    GOSUB1:	DO	SAV
 2256/DA7D : =>NOT BLANK                         IFNB   SAV
 2256/DA7D : E3                                   DB    H(SAV)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 82 - 2024年05月30日 19時01分01秒


 2256/DA7E : 50                                   DB    L(SAV)
 2256/DA7F :                                      SHIFT
 2256/DA7F :  (MACRO-2)                           DO    
 2256/DA7F : =>BLANK                             IFNB   
 2256/DA7F :                                      DB    H()
 2256/DA7F :                                      DB    L()
 2256/DA7F :                                      SHIFT
 2256/DA7F :                                      DO    
 2256/DA7F : [2256]                              ENDIF
 2256/DA7F : [2256]                              ENDIF
 2257/DA7F : (MACRO)                    GOTO1:	DO	POPAE
 2257/DA7F : =>NOT BLANK                         IFNB   POPAE
 2257/DA7F : E1                                   DB    H(POPAE)
 2257/DA80 : BD                                   DB    L(POPAE)
 2257/DA81 :                                      SHIFT
 2257/DA81 :  (MACRO-2)                           DO    
 2257/DA81 : =>BLANK                             IFNB   
 2257/DA81 :                                      DB    H()
 2257/DA81 :                                      DB    L()
 2257/DA81 :                                      SHIFT
 2257/DA81 :                                      DO    
 2257/DA81 : [2257]                              ENDIF
 2257/DA81 : [2257]                              ENDIF
 2258/DA81 : (MACRO)                    	DO	FNDLBL
 2258/DA81 : =>NOT BLANK                         IFNB   FNDLBL
 2258/DA81 : E5                                   DB    H(FNDLBL)
 2258/DA82 : 69                                   DB    L(FNDLBL)
 2258/DA83 :                                      SHIFT
 2258/DA83 :  (MACRO-2)                           DO    
 2258/DA83 : =>BLANK                             IFNB   
 2258/DA83 :                                      DB    H()
 2258/DA83 :                                      DB    L()
 2258/DA83 :                                      SHIFT
 2258/DA83 :                                      DO    
 2258/DA83 : [2258]                              ENDIF
 2258/DA83 : [2258]                              ENDIF
 2259/DA83 : (MACRO)                    	DO	XFER
 2259/DA83 : =>NOT BLANK                         IFNB   XFER
 2259/DA83 : E3                                   DB    H(XFER)
 2259/DA84 : 96                                   DB    L(XFER)
 2259/DA85 :                                      SHIFT
 2259/DA85 :  (MACRO-2)                           DO    
 2259/DA85 : =>BLANK                             IFNB   
 2259/DA85 :                                      DB    H()
 2259/DA85 :                                      DB    L()
 2259/DA85 :                                      SHIFT
 2259/DA85 :                                      DO    
 2259/DA85 : [2259]                              ENDIF
 2259/DA85 : [2259]                              ENDIF
 2260/DA85 : (MACRO)                    RETURN:	DO	DONE			; handle RETURN
 2260/DA85 : =>NOT BLANK                         IFNB   DONE
 2260/DA85 : E3                                   DB    H(DONE)
 2260/DA86 : 71                                   DB    L(DONE)
 2260/DA87 :                                      SHIFT
 2260/DA87 :  (MACRO-2)                           DO    
 2260/DA87 : =>BLANK                             IFNB   
 2260/DA87 :                                      DB    H()
 2260/DA87 :                                      DB    L()
 2260/DA87 :                                      SHIFT
 2260/DA87 :                                      DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 83 - 2024年05月30日 19時01分01秒


 2260/DA87 : [2260]                              ENDIF
 2260/DA87 : [2260]                              ENDIF
 2261/DA87 : (MACRO)                    	DO	RSTR
 2261/DA87 : =>NOT BLANK                         IFNB   RSTR
 2261/DA87 : E4                                   DB    H(RSTR)
 2261/DA88 : D4                                   DB    L(RSTR)
 2261/DA89 :                                      SHIFT
 2261/DA89 :  (MACRO-2)                           DO    
 2261/DA89 : =>BLANK                             IFNB   
 2261/DA89 :                                      DB    H()
 2261/DA89 :                                      DB    L()
 2261/DA89 :                                      SHIFT
 2261/DA89 :                                      DO    
 2261/DA89 : [2261]                              ENDIF
 2261/DA89 : [2261]                              ENDIF
 2262/DA89 : (MACRO)                    EDIT:	TSTNUM	SYNTAX			; handle EDIT
 2262/DA89 : D9                                  DB     H(SYNTAX)
 2262/DA8A : 42                                  DB     L(SYNTAX)
 2263/DA8B : (MACRO)                    	DO	POPAE
 2263/DA8B : =>NOT BLANK                         IFNB   POPAE
 2263/DA8B : E1                                   DB    H(POPAE)
 2263/DA8C : BD                                   DB    L(POPAE)
 2263/DA8D :                                      SHIFT
 2263/DA8D :  (MACRO-2)                           DO    
 2263/DA8D : =>BLANK                             IFNB   
 2263/DA8D :                                      DB    H()
 2263/DA8D :                                      DB    L()
 2263/DA8D :                                      SHIFT
 2263/DA8D :                                      DO    
 2263/DA8D : [2263]                              ENDIF
 2263/DA8D : [2263]                              ENDIF
 2264/DA8D : (MACRO)                    	DO	FNDLBL
 2264/DA8D : =>NOT BLANK                         IFNB   FNDLBL
 2264/DA8D : E5                                   DB    H(FNDLBL)
 2264/DA8E : 69                                   DB    L(FNDLBL)
 2264/DA8F :                                      SHIFT
 2264/DA8F :  (MACRO-2)                           DO    
 2264/DA8F : =>BLANK                             IFNB   
 2264/DA8F :                                      DB    H()
 2264/DA8F :                                      DB    L()
 2264/DA8F :                                      SHIFT
 2264/DA8F :                                      DO    
 2264/DA8F : [2264]                              ENDIF
 2264/DA8F : [2264]                              ENDIF
 2265/DA8F : (MACRO)                    	DO	EDITR
 2265/DA8F : =>NOT BLANK                         IFNB   EDITR
 2265/DA8F : E9                                   DB    H(EDITR)
 2265/DA90 : BD                                   DB    L(EDITR)
 2265/DA91 :                                      SHIFT
 2265/DA91 :  (MACRO-2)                           DO    
 2265/DA91 : =>BLANK                             IFNB   
 2265/DA91 :                                      DB    H()
 2265/DA91 :                                      DB    L()
 2265/DA91 :                                      SHIFT
 2265/DA91 :                                      DO    
 2265/DA91 : [2265]                              ENDIF
 2265/DA91 : [2265]                              ENDIF
 2266/DA91 : (MACRO)                    	DO	INPT
 2266/DA91 : =>NOT BLANK                         IFNB   INPT
 2266/DA91 : E0                                   DB    H(INPT)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 84 - 2024年05月30日 19時01分01秒


 2266/DA92 : 2B                                   DB    L(INPT)
 2266/DA93 :                                      SHIFT
 2266/DA93 :  (MACRO-2)                           DO    
 2266/DA93 : =>BLANK                             IFNB   
 2266/DA93 :                                      DB    H()
 2266/DA93 :                                      DB    L()
 2266/DA93 :                                      SHIFT
 2266/DA93 :                                      DO    
 2266/DA93 : [2266]                              ENDIF
 2266/DA93 : [2266]                              ENDIF
 2267/DA93 : (MACRO)                    	GOTO	ILTB1
 2267/DA93 : 58                                  DB     H(ILTB1 - JMPBITH)
 2267/DA94 : A4                                  DB     L(ILTB1)
 2268/DA95 : (MACRO)                    AUTO:	TSTNUM	SYNTAX			; handle AUTO
 2268/DA95 : D9                                  DB     H(SYNTAX)
 2268/DA96 : 42                                  DB     L(SYNTAX)
 2269/DA97 : (MACRO)                    	DO	POPAE
 2269/DA97 : =>NOT BLANK                         IFNB   POPAE
 2269/DA97 : E1                                   DB    H(POPAE)
 2269/DA98 : BD                                   DB    L(POPAE)
 2269/DA99 :                                      SHIFT
 2269/DA99 :  (MACRO-2)                           DO    
 2269/DA99 : =>BLANK                             IFNB   
 2269/DA99 :                                      DB    H()
 2269/DA99 :                                      DB    L()
 2269/DA99 :                                      SHIFT
 2269/DA99 :                                      DO    
 2269/DA99 : [2269]                              ENDIF
 2269/DA99 : [2269]                              ENDIF
 2270/DA99 : (MACRO)                    	TSTSTR	AUTO1,','
 2270/DA99 : 9A                                  DB     H(AUTO1 - TSTBITH)
 2270/DA9A : A0                                  DB     L(AUTO1)
 2270/DA9B : 2C                                  DB     ','
 2271/DA9C : (MACRO)                    	DO	NUMTST
 2271/DA9C : =>NOT BLANK                         IFNB   NUMTST
 2271/DA9C : EA                                   DB    H(NUMTST)
 2271/DA9D : 8D                                   DB    L(NUMTST)
 2271/DA9E :                                      SHIFT
 2271/DA9E :  (MACRO-2)                           DO    
 2271/DA9E : =>BLANK                             IFNB   
 2271/DA9E :                                      DB    H()
 2271/DA9E :                                      DB    L()
 2271/DA9E :                                      SHIFT
 2271/DA9E :                                      DO    
 2271/DA9E : [2271]                              ENDIF
 2271/DA9E : [2271]                              ENDIF
 2272/DA9E : (MACRO)                    	GOTO	AUTO2
 2272/DA9E : 5A                                  DB     H(AUTO2 - JMPBITH)
 2272/DA9F : A2                                  DB     L(AUTO2)
 2273/DAA0 : (MACRO)                    AUTO1:	DO	TEN
 2273/DAA0 : =>NOT BLANK                         IFNB   TEN
 2273/DAA0 : FA                                   DB    H(TEN)
 2273/DAA1 : BA                                   DB    L(TEN)
 2273/DAA2 :                                      SHIFT
 2273/DAA2 :  (MACRO-2)                           DO    
 2273/DAA2 : =>BLANK                             IFNB   
 2273/DAA2 :                                      DB    H()
 2273/DAA2 :                                      DB    L()
 2273/DAA2 :                                      SHIFT
 2273/DAA2 :                                      DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 85 - 2024年05月30日 19時01分01秒


 2273/DAA2 : [2273]                              ENDIF
 2273/DAA2 : [2273]                              ENDIF
 2274/DAA2 : (MACRO)                    AUTO2:	DO	AUTONM
 2274/DAA2 : =>NOT BLANK                         IFNB   AUTONM
 2274/DAA2 : EB                                   DB    H(AUTONM)
 2274/DAA3 : 05                                   DB    L(AUTONM)
 2274/DAA4 :                                      SHIFT
 2274/DAA4 :  (MACRO-2)                           DO    
 2274/DAA4 : =>BLANK                             IFNB   
 2274/DAA4 :                                      DB    H()
 2274/DAA4 :                                      DB    L()
 2274/DAA4 :                                      SHIFT
 2274/DAA4 :                                      DO    
 2274/DAA4 : [2274]                              ENDIF
 2274/DAA4 : [2274]                              ENDIF
 2275/DAA4 : (MACRO)                    	DO	GETLN1
 2275/DAA4 : =>NOT BLANK                         IFNB   GETLN1
 2275/DAA4 : E0                                   DB    H(GETLN1)
 2275/DAA5 : 0B                                   DB    L(GETLN1)
 2275/DAA6 :                                      SHIFT
 2275/DAA6 :  (MACRO-2)                           DO    
 2275/DAA6 : =>BLANK                             IFNB   
 2275/DAA6 :                                      DB    H()
 2275/DAA6 :                                      DB    L()
 2275/DAA6 :                                      SHIFT
 2275/DAA6 :                                      DO    
 2275/DAA6 : [2275]                              ENDIF
 2275/DAA6 : [2275]                              ENDIF
 2276/DAA6 : (MACRO)                    	DO	SCANR
 2276/DAA6 : =>NOT BLANK                         IFNB   SCANR
 2276/DAA6 : E1                                   DB    H(SCANR)
 2276/DAA7 : 2A                                   DB    L(SCANR)
 2276/DAA8 :                                      SHIFT
 2276/DAA8 :  (MACRO-2)                           DO    
 2276/DAA8 : =>BLANK                             IFNB   
 2276/DAA8 :                                      DB    H()
 2276/DAA8 :                                      DB    L()
 2276/DAA8 :                                      SHIFT
 2276/DAA8 :                                      DO    
 2276/DAA8 : [2276]                              ENDIF
 2276/DAA8 : [2276]                              ENDIF
 2277/DAA8 : (MACRO)                    	TSTNUM	AUTO3
 2277/DAA8 : DA                                  DB     H(AUTO3)
 2277/DAA9 : AC                                  DB     L(AUTO3)
 2278/DAAA : (MACRO)                    	DO	POPAE
 2278/DAAA : =>NOT BLANK                         IFNB   POPAE
 2278/DAAA : E1                                   DB    H(POPAE)
 2278/DAAB : BD                                   DB    L(POPAE)
 2278/DAAC :                                      SHIFT
 2278/DAAC :  (MACRO-2)                           DO    
 2278/DAAC : =>BLANK                             IFNB   
 2278/DAAC :                                      DB    H()
 2278/DAAC :                                      DB    L()
 2278/DAAC :                                      SHIFT
 2278/DAAC :                                      DO    
 2278/DAAC : [2278]                              ENDIF
 2278/DAAC : [2278]                              ENDIF
 2279/DAAC : (MACRO)                    AUTO3:	DO	FNDLBL
 2279/DAAC : =>NOT BLANK                         IFNB   FNDLBL
 2279/DAAC : E5                                   DB    H(FNDLBL)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 86 - 2024年05月30日 19時01分01秒


 2279/DAAD : 69                                   DB    L(FNDLBL)
 2279/DAAE :                                      SHIFT
 2279/DAAE :  (MACRO-2)                           DO    
 2279/DAAE : =>BLANK                             IFNB   
 2279/DAAE :                                      DB    H()
 2279/DAAE :                                      DB    L()
 2279/DAAE :                                      SHIFT
 2279/DAAE :                                      DO    
 2279/DAAE : [2279]                              ENDIF
 2279/DAAE : [2279]                              ENDIF
 2280/DAAE : (MACRO)                    	DO	INSRT
 2280/DAAE : =>NOT BLANK                         IFNB   INSRT
 2280/DAAE : E2                                   DB    H(INSRT)
 2280/DAAF : 09                                   DB    L(INSRT)
 2280/DAB0 :                                      SHIFT
 2280/DAB0 :  (MACRO-2)                           DO    
 2280/DAB0 : =>BLANK                             IFNB   
 2280/DAB0 :                                      DB    H()
 2280/DAB0 :                                      DB    L()
 2280/DAB0 :                                      SHIFT
 2280/DAB0 :                                      DO    
 2280/DAB0 : [2280]                              ENDIF
 2280/DAB0 : [2280]                              ENDIF
 2281/DAB0 : (MACRO)                    	DO	AUTON
 2281/DAB0 : =>NOT BLANK                         IFNB   AUTON
 2281/DAB0 : EB                                   DB    H(AUTON)
 2281/DAB1 : 16                                   DB    L(AUTON)
 2281/DAB2 :                                      SHIFT
 2281/DAB2 :  (MACRO-2)                           DO    
 2281/DAB2 : =>BLANK                             IFNB   
 2281/DAB2 :                                      DB    H()
 2281/DAB2 :                                      DB    L()
 2281/DAB2 :                                      SHIFT
 2281/DAB2 :                                      DO    
 2281/DAB2 : [2281]                              ENDIF
 2281/DAB2 : [2281]                              ENDIF
 2282/DAB2 : (MACRO)                    	GOTO	AUTO2
 2282/DAB2 : 5A                                  DB     H(AUTO2 - JMPBITH)
 2282/DAB3 : A2                                  DB     L(AUTO2)
 2283/DAB4 : (MACRO)                    IF:	ILCALL	RELSTR			; handle IF
 2283/DAB4 : 1C                                  DB     H(RELSTR - (JMPBITH + TSTBITH))
 2283/DAB5 : 72                                  DB     L(RELSTR)
 2284/DAB6 : (MACRO)                    	DO	CMPRE
 2284/DAB6 : =>NOT BLANK                         IFNB   CMPRE
 2284/DAB6 : E3                                   DB    H(CMPRE)
 2284/DAB7 : C5                                   DB    L(CMPRE)
 2284/DAB8 :                                      SHIFT
 2284/DAB8 :  (MACRO-2)                           DO    
 2284/DAB8 : =>BLANK                             IFNB   
 2284/DAB8 :                                      DB    H()
 2284/DAB8 :                                      DB    L()
 2284/DAB8 :                                      SHIFT
 2284/DAB8 :                                      DO    
 2284/DAB8 : [2284]                              ENDIF
 2284/DAB8 : [2284]                              ENDIF
 2285/DAB8 : (MACRO)                    	TSTNUM	RUN1
 2285/DAB8 : D9                                  DB     H(RUN1)
 2285/DAB9 : A6                                  DB     L(RUN1)
 2286/DABA : (MACRO)                    	DO	POPAE
 2286/DABA : =>NOT BLANK                         IFNB   POPAE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 87 - 2024年05月30日 19時01分01秒


 2286/DABA : E1                                   DB    H(POPAE)
 2286/DABB : BD                                   DB    L(POPAE)
 2286/DABC :                                      SHIFT
 2286/DABC :  (MACRO-2)                           DO    
 2286/DABC : =>BLANK                             IFNB   
 2286/DABC :                                      DB    H()
 2286/DABC :                                      DB    L()
 2286/DABC :                                      SHIFT
 2286/DABC :                                      DO    
 2286/DABC : [2286]                              ENDIF
 2286/DABC : [2286]                              ENDIF
 2287/DABC : (MACRO)                    	DO	FNDLBL
 2287/DABC : =>NOT BLANK                         IFNB   FNDLBL
 2287/DABC : E5                                   DB    H(FNDLBL)
 2287/DABD : 69                                   DB    L(FNDLBL)
 2287/DABE :                                      SHIFT
 2287/DABE :  (MACRO-2)                           DO    
 2287/DABE : =>BLANK                             IFNB   
 2287/DABE :                                      DB    H()
 2287/DABE :                                      DB    L()
 2287/DABE :                                      SHIFT
 2287/DABE :                                      DO    
 2287/DABE : [2287]                              ENDIF
 2287/DABE : [2287]                              ENDIF
 2288/DABE : (MACRO)                    	DO	XFER
 2288/DABE : =>NOT BLANK                         IFNB   XFER
 2288/DABE : E3                                   DB    H(XFER)
 2288/DABF : 96                                   DB    L(XFER)
 2288/DAC0 :                                      SHIFT
 2288/DAC0 :  (MACRO-2)                           DO    
 2288/DAC0 : =>BLANK                             IFNB   
 2288/DAC0 :                                      DB    H()
 2288/DAC0 :                                      DB    L()
 2288/DAC0 :                                      SHIFT
 2288/DAC0 :                                      DO    
 2288/DAC0 : [2288]                              ENDIF
 2288/DAC0 : [2288]                              ENDIF
 2289/DAC0 : (MACRO)                    POKE:	ILCALL	REXPR			; handle POKE
 2289/DAC0 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2289/DAC1 : C6                                  DB     L(REXPR)
 2290/DAC2 : (MACRO)                    	DO	FIX
 2290/DAC2 : =>NOT BLANK                         IFNB   FIX
 2290/DAC2 : EB                                   DB    H(FIX)
 2290/DAC3 : 2F                                   DB    L(FIX)
 2290/DAC4 :                                      SHIFT
 2290/DAC4 :  (MACRO-2)                           DO    
 2290/DAC4 : =>BLANK                             IFNB   
 2290/DAC4 :                                      DB    H()
 2290/DAC4 :                                      DB    L()
 2290/DAC4 :                                      SHIFT
 2290/DAC4 :                                      DO    
 2290/DAC4 : [2290]                              ENDIF
 2290/DAC4 : [2290]                              ENDIF
 2291/DAC4 : (MACRO)                    	TSTSTR	SYNTAX,','
 2291/DAC4 : 99                                  DB     H(SYNTAX - TSTBITH)
 2291/DAC5 : 42                                  DB     L(SYNTAX)
 2291/DAC6 : 2C                                  DB     ','
 2292/DAC7 : (MACRO)                    	ILCALL	REXPR
 2292/DAC7 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2292/DAC8 : C6                                  DB     L(REXPR)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 88 - 2024年05月30日 19時01分01秒


 2293/DAC9 : (MACRO)                    	DO	FIX
 2293/DAC9 : =>NOT BLANK                         IFNB   FIX
 2293/DAC9 : EB                                   DB    H(FIX)
 2293/DACA : 2F                                   DB    L(FIX)
 2293/DACB :                                      SHIFT
 2293/DACB :  (MACRO-2)                           DO    
 2293/DACB : =>BLANK                             IFNB   
 2293/DACB :                                      DB    H()
 2293/DACB :                                      DB    L()
 2293/DACB :                                      SHIFT
 2293/DACB :                                      DO    
 2293/DACB : [2293]                              ENDIF
 2293/DACB : [2293]                              ENDIF
 2294/DACB : (MACRO)                    	DO	PUTBYT
 2294/DACB : =>NOT BLANK                         IFNB   PUTBYT
 2294/DACB : ED                                   DB    H(PUTBYT)
 2294/DACC : CC                                   DB    L(PUTBYT)
 2294/DACD :                                      SHIFT
 2294/DACD :  (MACRO-2)                           DO    
 2294/DACD : =>BLANK                             IFNB   
 2294/DACD :                                      DB    H()
 2294/DACD :                                      DB    L()
 2294/DACD :                                      SHIFT
 2294/DACD :                                      DO    
 2294/DACD : [2294]                              ENDIF
 2294/DACD : [2294]                              ENDIF
 2295/DACD : (MACRO)                    	DO	DNE
 2295/DACD : =>NOT BLANK                         IFNB   DNE
 2295/DACD : E3                                   DB    H(DNE)
 2295/DACE : B3                                   DB    L(DNE)
 2295/DACF :                                      SHIFT
 2295/DACF :  (MACRO-2)                           DO    
 2295/DACF : =>BLANK                             IFNB   
 2295/DACF :                                      DB    H()
 2295/DACF :                                      DB    L()
 2295/DACF :                                      SHIFT
 2295/DACF :                                      DO    
 2295/DACF : [2295]                              ENDIF
 2295/DACF : [2295]                              ENDIF
 2296/DACF : (MACRO)                    DIM:	TSTVAR	SYNTAX			; handle DIM
 2296/DACF : B9                                  DB     H(SYNTAX - CALBITH)
 2296/DAD0 : 42                                  DB     L(SYNTAX)
 2297/DAD1 : (MACRO)                    	DO	FNDVAR
 2297/DAD1 : =>NOT BLANK                         IFNB   FNDVAR
 2297/DAD1 : E2                                   DB    H(FNDVAR)
 2297/DAD2 : E1                                   DB    L(FNDVAR)
 2297/DAD3 :                                      SHIFT
 2297/DAD3 :  (MACRO-2)                           DO    
 2297/DAD3 : =>BLANK                             IFNB   
 2297/DAD3 :                                      DB    H()
 2297/DAD3 :                                      DB    L()
 2297/DAD3 :                                      SHIFT
 2297/DAD3 :                                      DO    
 2297/DAD3 : [2297]                              ENDIF
 2297/DAD3 : [2297]                              ENDIF
 2298/DAD3 : (MACRO)                    	DO	LODVAR
 2298/DAD3 : =>NOT BLANK                         IFNB   LODVAR
 2298/DAD3 : FC                                   DB    H(LODVAR)
 2298/DAD4 : 0F                                   DB    L(LODVAR)
 2298/DAD5 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 89 - 2024年05月30日 19時01分01秒


 2298/DAD5 :  (MACRO-2)                           DO    
 2298/DAD5 : =>BLANK                             IFNB   
 2298/DAD5 :                                      DB    H()
 2298/DAD5 :                                      DB    L()
 2298/DAD5 :                                      SHIFT
 2298/DAD5 :                                      DO    
 2298/DAD5 : [2298]                              ENDIF
 2298/DAD5 : [2298]                              ENDIF
 2299/DAD5 : (MACRO)                    	DO	FIX
 2299/DAD5 : =>NOT BLANK                         IFNB   FIX
 2299/DAD5 : EB                                   DB    H(FIX)
 2299/DAD6 : 2F                                   DB    L(FIX)
 2299/DAD7 :                                      SHIFT
 2299/DAD7 :  (MACRO-2)                           DO    
 2299/DAD7 : =>BLANK                             IFNB   
 2299/DAD7 :                                      DB    H()
 2299/DAD7 :                                      DB    L()
 2299/DAD7 :                                      SHIFT
 2299/DAD7 :                                      DO    
 2299/DAD7 : [2299]                              ENDIF
 2299/DAD7 : [2299]                              ENDIF
 2300/DAD7 : (MACRO)                    	DO	STFLD
 2300/DAD7 : =>NOT BLANK                         IFNB   STFLD
 2300/DAD7 : FC                                   DB    H(STFLD)
 2300/DAD8 : 51                                   DB    L(STFLD)
 2300/DAD9 :                                      SHIFT
 2300/DAD9 :  (MACRO-2)                           DO    
 2300/DAD9 : =>BLANK                             IFNB   
 2300/DAD9 :                                      DB    H()
 2300/DAD9 :                                      DB    L()
 2300/DAD9 :                                      SHIFT
 2300/DAD9 :                                      DO    
 2300/DAD9 : [2300]                              ENDIF
 2300/DAD9 : [2300]                              ENDIF
 2301/DAD9 : (MACRO)                    	ILCALL	REXPR
 2301/DAD9 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2301/DADA : C6                                  DB     L(REXPR)
 2302/DADB : (MACRO)                    	DO	FIX
 2302/DADB : =>NOT BLANK                         IFNB   FIX
 2302/DADB : EB                                   DB    H(FIX)
 2302/DADC : 2F                                   DB    L(FIX)
 2302/DADD :                                      SHIFT
 2302/DADD :  (MACRO-2)                           DO    
 2302/DADD : =>BLANK                             IFNB   
 2302/DADD :                                      DB    H()
 2302/DADD :                                      DB    L()
 2302/DADD :                                      SHIFT
 2302/DADD :                                      DO    
 2302/DADD : [2302]                              ENDIF
 2302/DADD : [2302]                              ENDIF
 2303/DADD : (MACRO)                    	DO	DIMSN
 2303/DADD : =>NOT BLANK                         IFNB   DIMSN
 2303/DADD : FC                                   DB    H(DIMSN)
 2303/DADE : 79                                   DB    L(DIMSN)
 2303/DADF :                                      SHIFT
 2303/DADF :  (MACRO-2)                           DO    
 2303/DADF : =>BLANK                             IFNB   
 2303/DADF :                                      DB    H()
 2303/DADF :                                      DB    L()
 2303/DADF :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 90 - 2024年05月30日 19時01分01秒


 2303/DADF :                                      DO    
 2303/DADF : [2303]                              ENDIF
 2303/DADF : [2303]                              ENDIF
 2304/DADF : (MACRO)                    	TSTSTR	ENDPAR,')'
 2304/DADF : 99                                  DB     H(ENDPAR - TSTBITH)
 2304/DAE0 : 2F                                  DB     L(ENDPAR)
 2304/DAE1 : 29                                  DB     ')'
 2305/DAE2 : (MACRO)                    	TSTSTR	INPUT2,','
 2305/DAE2 : 9A                                  DB     H(INPUT2 - TSTBITH)
 2305/DAE3 : 1E                                  DB     L(INPUT2)
 2305/DAE4 : 2C                                  DB     ','
 2306/DAE5 : (MACRO)                    	GOTO	DIM
 2306/DAE5 : 5A                                  DB     H(DIM - JMPBITH)
 2306/DAE6 : CF                                  DB     L(DIM)
 2307/DAE7 : (MACRO)                    NEG:	DO	STACK
 2307/DAE7 : =>NOT BLANK                         IFNB   STACK
 2307/DAE7 : F2                                   DB    H(STACK)
 2307/DAE8 : 8E                                   DB    L(STACK)
 2307/DAE9 :                                      SHIFT
 2307/DAE9 :  (MACRO-2)                           DO    
 2307/DAE9 : =>BLANK                             IFNB   
 2307/DAE9 :                                      DB    H()
 2307/DAE9 :                                      DB    L()
 2307/DAE9 :                                      SHIFT
 2307/DAE9 :                                      DO    
 2307/DAE9 : [2307]                              ENDIF
 2307/DAE9 : [2307]                              ENDIF
 2308/DAE9 : (MACRO)                    	DO	FNEG
 2308/DAE9 : =>NOT BLANK                         IFNB   FNEG
 2308/DAE9 : F1                                   DB    H(FNEG)
 2308/DAEA : AC                                   DB    L(FNEG)
 2308/DAEB :                                      SHIFT
 2308/DAEB :  (MACRO-2)                           DO    
 2308/DAEB : =>BLANK                             IFNB   
 2308/DAEB :                                      DB    H()
 2308/DAEB :                                      DB    L()
 2308/DAEB :                                      SHIFT
 2308/DAEB :                                      DO    
 2308/DAEB : [2308]                              ENDIF
 2308/DAEB : [2308]                              ENDIF
 2309/DAEB : (MACRO)                    	DO	STBCK
 2309/DAEB : =>NOT BLANK                         IFNB   STBCK
 2309/DAEB : E6                                   DB    H(STBCK)
 2309/DAEC : 74                                   DB    L(STBCK)
 2309/DAED :                                      SHIFT
 2309/DAED :  (MACRO-2)                           DO    
 2309/DAED : =>BLANK                             IFNB   
 2309/DAED :                                      DB    H()
 2309/DAED :                                      DB    L()
 2309/DAED :                                      SHIFT
 2309/DAED :                                      DO    
 2309/DAED : [2309]                              ENDIF
 2309/DAED : [2309]                              ENDIF
 2310/DAED :                            
 2311/DAED :                            
 2312/DAED :                            ; Handle the PRINT commands.
 2313/DAED :                            ;
 2314/DAED :                            ; We use PREXP for both USING/formatted and unformatted printing. 
 2315/DAED :                            ; Since we moved the number printing out of the ILCALL procedure,
 2316/DAED :                            ; it is now called every time the loop is executed. So number
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 91 - 2024年05月30日 19時01分01秒


 2317/DAED :                            ; printing only takes place IF a number is found on the STACK. 
 2318/DAED :                            ;
 2319/DAED : (MACRO)                    PRINT:	TSTSTR	PRNT2,T_USING		; handle PR[INT] and USING
 2319/DAED : 9A                                  DB     H(PRNT2 - TSTBITH)
 2319/DAEE : FE                                  DB     L(PRNT2)
 2319/DAEF : CC                                  DB     T_USING
 2320/DAF0 : (MACRO)                    	TSTSTR	SYNTAX,'"'		; do we have a literal?
 2320/DAF0 : 99                                  DB     H(SYNTAX - TSTBITH)
 2320/DAF1 : 42                                  DB     L(SYNTAX)
 2320/DAF2 : 22                                  DB     '"'
 2321/DAF3 : (MACRO)                    	DO	USING			; yes, handle format for USING
 2321/DAF3 : =>NOT BLANK                         IFNB   USING
 2321/DAF3 : FE                                   DB    H(USING)
 2321/DAF4 : 9D                                   DB    L(USING)
 2321/DAF5 :                                      SHIFT
 2321/DAF5 :  (MACRO-2)                           DO    
 2321/DAF5 : =>BLANK                             IFNB   
 2321/DAF5 :                                      DB    H()
 2321/DAF5 :                                      DB    L()
 2321/DAF5 :                                      SHIFT
 2321/DAF5 :                                      DO    
 2321/DAF5 : [2321]                              ENDIF
 2321/DAF5 : [2321]                              ENDIF
 2322/DAF5 : (MACRO)                    PRNT1:	ILCALL	PREXP			; handle the expression
 2322/DAF5 : 1B                                  DB     H(PREXP - (JMPBITH + TSTBITH))
 2322/DAF6 : 41                                  DB     L(PREXP)
 2323/DAF7 : (MACRO)                    	DO	USING2			; format the result
 2323/DAF7 : =>NOT BLANK                         IFNB   USING2
 2323/DAF7 : FE                                   DB    H(USING2)
 2323/DAF8 : DB                                   DB    L(USING2)
 2323/DAF9 :                                      SHIFT
 2323/DAF9 :  (MACRO-2)                           DO    
 2323/DAF9 : =>BLANK                             IFNB   
 2323/DAF9 :                                      DB    H()
 2323/DAF9 :                                      DB    L()
 2323/DAF9 :                                      SHIFT
 2323/DAF9 :                                      DO    
 2323/DAF9 : [2323]                              ENDIF
 2323/DAF9 : [2323]                              ENDIF
 2324/DAF9 : (MACRO)                    	TSTSTR	PRNT6,','		; test if next is comma
 2324/DAF9 : 9B                                  DB     H(PRNT6 - TSTBITH)
 2324/DAFA : 13                                  DB     L(PRNT6)
 2324/DAFB : 2C                                  DB     ','
 2325/DAFC : (MACRO)                    	GOTO	PRNT1			; yes, do again
 2325/DAFC : 5A                                  DB     H(PRNT1 - JMPBITH)
 2325/DAFD : F5                                  DB     L(PRNT1)
 2326/DAFE : (MACRO)                    PRNT2:	TSTSTR	PRNT3,':'		; test if next is colon
 2326/DAFE : 9B                                  DB     H(PRNT3 - TSTBITH)
 2326/DAFF : 03                                  DB     L(PRNT3)
 2326/DB00 : 3A                                  DB     ':'
 2327/DB01 : (MACRO)                    	GOTO	PRNT4			; yes, all done
 2327/DB01 : 5B                                  DB     H(PRNT4 - JMPBITH)
 2327/DB02 : 06                                  DB     L(PRNT4)
 2328/DB03 : (MACRO)                    PRNT3:	TSTSTR	PRNT5,_CR		; test if next is <cr>
 2328/DB03 : 9B                                  DB     H(PRNT5 - TSTBITH)
 2328/DB04 : 0A                                  DB     L(PRNT5)
 2328/DB05 : 0D                                  DB     _CR
 2329/DB06 : (MACRO)                    PRNT4:	DO	LINE			; print newline
 2329/DB06 : =>NOT BLANK                         IFNB   LINE
 2329/DB06 : E0                                   DB    H(LINE)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 92 - 2024年05月30日 19時01分01秒


 2329/DB07 : FE                                   DB    L(LINE)
 2329/DB08 :                                      SHIFT
 2329/DB08 :  (MACRO-2)                           DO    
 2329/DB08 : =>BLANK                             IFNB   
 2329/DB08 :                                      DB    H()
 2329/DB08 :                                      DB    L()
 2329/DB08 :                                      SHIFT
 2329/DB08 :                                      DO    
 2329/DB08 : [2329]                              ENDIF
 2329/DB08 : [2329]                              ENDIF
 2330/DB08 : (MACRO)                    	DO	NXT			; end of statement
 2330/DB08 : =>NOT BLANK                         IFNB   NXT
 2330/DB08 : E4                                   DB    H(NXT)
 2330/DB09 : 0E                                   DB    L(NXT)
 2330/DB0A :                                      SHIFT
 2330/DB0A :  (MACRO-2)                           DO    
 2330/DB0A : =>BLANK                             IFNB   
 2330/DB0A :                                      DB    H()
 2330/DB0A :                                      DB    L()
 2330/DB0A :                                      SHIFT
 2330/DB0A :                                      DO    
 2330/DB0A : [2330]                              ENDIF
 2330/DB0A : [2330]                              ENDIF
 2331/DB0A : (MACRO)                    PRNT5:	ILCALL	PREXP			; handle the expression
 2331/DB0A : 1B                                  DB     H(PREXP - (JMPBITH + TSTBITH))
 2331/DB0B : 41                                  DB     L(PREXP)
 2332/DB0C : (MACRO)                    	DO	PRFNUM			; print the result
 2332/DB0C : =>NOT BLANK                         IFNB   PRFNUM
 2332/DB0C : FF                                   DB    H(PRFNUM)
 2332/DB0D : 65                                   DB    L(PRFNUM)
 2332/DB0E :                                      SHIFT
 2332/DB0E :  (MACRO-2)                           DO    
 2332/DB0E : =>BLANK                             IFNB   
 2332/DB0E :                                      DB    H()
 2332/DB0E :                                      DB    L()
 2332/DB0E :                                      SHIFT
 2332/DB0E :                                      DO    
 2332/DB0E : [2332]                              ENDIF
 2332/DB0E : [2332]                              ENDIF
 2333/DB0E : (MACRO)                    	TSTSTR	PRNT6,','		; test if next is comma
 2333/DB0E : 9B                                  DB     H(PRNT6 - TSTBITH)
 2333/DB0F : 13                                  DB     L(PRNT6)
 2333/DB10 : 2C                                  DB     ','
 2334/DB11 : (MACRO)                    	GOTO	PRNT5			; yes, do again
 2334/DB11 : 5B                                  DB     H(PRNT5 - JMPBITH)
 2334/DB12 : 0A                                  DB     L(PRNT5)
 2335/DB13 : (MACRO)                    PRNT6:	TSTSTR	PRNT7,';'		; test if semicolon
 2335/DB13 : 9B                                  DB     H(PRNT7 - TSTBITH)
 2335/DB14 : 18                                  DB     L(PRNT7)
 2335/DB15 : 3B                                  DB     ';'
 2336/DB16 : (MACRO)                    	DO	DNE			; yes, done
 2336/DB16 : =>NOT BLANK                         IFNB   DNE
 2336/DB16 : E3                                   DB    H(DNE)
 2336/DB17 : B3                                   DB    L(DNE)
 2336/DB18 :                                      SHIFT
 2336/DB18 :  (MACRO-2)                           DO    
 2336/DB18 : =>BLANK                             IFNB   
 2336/DB18 :                                      DB    H()
 2336/DB18 :                                      DB    L()
 2336/DB18 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 93 - 2024年05月30日 19時01分01秒


 2336/DB18 :                                      DO    
 2336/DB18 : [2336]                              ENDIF
 2336/DB18 : [2336]                              ENDIF
 2337/DB18 : (MACRO)                    PRNT7:	DO	LINE			; print newline
 2337/DB18 : =>NOT BLANK                         IFNB   LINE
 2337/DB18 : E0                                   DB    H(LINE)
 2337/DB19 : FE                                   DB    L(LINE)
 2337/DB1A :                                      SHIFT
 2337/DB1A :  (MACRO-2)                           DO    
 2337/DB1A : =>BLANK                             IFNB   
 2337/DB1A :                                      DB    H()
 2337/DB1A :                                      DB    L()
 2337/DB1A :                                      SHIFT
 2337/DB1A :                                      DO    
 2337/DB1A : [2337]                              ENDIF
 2337/DB1A : [2337]                              ENDIF
 2338/DB1A : (MACRO)                    	DO	DNE			; done
 2338/DB1A : =>NOT BLANK                         IFNB   DNE
 2338/DB1A : E3                                   DB    H(DNE)
 2338/DB1B : B3                                   DB    L(DNE)
 2338/DB1C :                                      SHIFT
 2338/DB1C :  (MACRO-2)                           DO    
 2338/DB1C : =>BLANK                             IFNB   
 2338/DB1C :                                      DB    H()
 2338/DB1C :                                      DB    L()
 2338/DB1C :                                      SHIFT
 2338/DB1C :                                      DO    
 2338/DB1C : [2338]                              ENDIF
 2338/DB1C : [2338]                              ENDIF
 2339/DB1C : (MACRO)                    	ILRTRN				; return
 2339/DB1C : 00                                  DB     0
 2340/DB1D :                            
 2341/DB1D :                            ; PRINT USING routine (part 3.)
 2342/DB1D : C5 FF                      USING3:	LD	@-1(P1)			; decr P1 and load prev program byte
 2343/DB1F : E4 2E                      	XRI	'.'			; is it <dot> ?
 2344/DB21 : 98 FA                      	JZ	USING3
 2345/DB23 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 2346/DB25 : E4 45                      	XRI	'E'			; is it 'E' ?
 2347/DB27 : 98 04                      	JZ	USNG31
 2348/DB29 : C1 FF                      	LD	-1(P1)
 2349/DB2B : 9C 0A                      	JNZ	USNG32			; jump if not terminated by <null>
 2350/DB2D : C4 30                      USNG31:	LDI	'0'
 2351/DB2F : =>DEFINED                  	IFDEF	SCALLS
 2352/DB2F : (MACRO)                    	 SYSCALL	2
 2352/DB2F : 3F                                  XPPC   P3
 2352/DB30 : 02                                  DB     2
 2353/DB31 : =>FALSE                    	ELSE
 2354/DB31 :                            	 CALL	PUTASC
 2355/DB31 : [2351]                     	ENDIF
 2356/DB31 : BA EB                      	DLD	COUNTR(P2)
 2357/DB33 : 9C F8                      	JNZ	USNG31
 2358/DB35 : 93 38                      	JMP	SV_RTRN(P3)
 2359/DB37 : C5 FF                      USNG32:	LD	@-1(P1)
 2360/DB39 : =>DEFINED                  	IFDEF	SCALLS
 2361/DB39 : (MACRO)                    	 SYSCALL	2
 2361/DB39 : 3F                                  XPPC   P3
 2361/DB3A : 02                                  DB     2
 2362/DB3B : =>FALSE                    	ELSE
 2363/DB3B :                            	 CALL	PUTASC
 2364/DB3B : [2360]                     	ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 94 - 2024年05月30日 19時01分01秒


 2365/DB3B : BA EB                      	DLD	COUNTR(P2)
 2366/DB3D : 9C DE                      	JNZ	USING3
 2367/DB3F : 93 38                      	JMP	SV_RTRN(P3)
 2368/DB41 :                            
 2369/DB41 :                            ; Handle expression to print.
 2370/DB41 : (MACRO)                    PREXP:	TSTSTR	PREX1,'"'		; do we have a literal?
 2370/DB41 : 9B                                  DB     H(PREX1 - TSTBITH)
 2370/DB42 : 46                                  DB     L(PREX1)
 2370/DB43 : 22                                  DB     '"'
 2371/DB44 : (MACRO)                    	DO	PRSTRG			; yes, print it
 2371/DB44 : =>NOT BLANK                         IFNB   PRSTRG
 2371/DB44 : E5                                   DB    H(PRSTRG)
 2371/DB45 : D0                                   DB    L(PRSTRG)
 2371/DB46 :                                      SHIFT
 2371/DB46 :  (MACRO-2)                           DO    
 2371/DB46 : =>BLANK                             IFNB   
 2371/DB46 :                                      DB    H()
 2371/DB46 :                                      DB    L()
 2371/DB46 :                                      SHIFT
 2371/DB46 :                                      DO    
 2371/DB46 : [2371]                              ENDIF
 2371/DB46 : [2371]                              ENDIF
 2372/DB46 : (MACRO)                    PREX1:	TSTSTR	PREX2,T_CHR		; handle CHR$(x)
 2372/DB46 : 9B                                  DB     H(PREX2 - TSTBITH)
 2372/DB47 : 4F                                  DB     L(PREX2)
 2372/DB48 : C5                                  DB     T_CHR
 2373/DB49 : (MACRO)                    	ILCALL	SNGL
 2373/DB49 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2373/DB4A : 70                                  DB     L(SNGL)
 2374/DB4B : (MACRO)                    	DO	POPAE
 2374/DB4B : =>NOT BLANK                         IFNB   POPAE
 2374/DB4B : E1                                   DB    H(POPAE)
 2374/DB4C : BD                                   DB    L(POPAE)
 2374/DB4D :                                      SHIFT
 2374/DB4D :  (MACRO-2)                           DO    
 2374/DB4D : =>BLANK                             IFNB   
 2374/DB4D :                                      DB    H()
 2374/DB4D :                                      DB    L()
 2374/DB4D :                                      SHIFT
 2374/DB4D :                                      DO    
 2374/DB4D : [2374]                              ENDIF
 2374/DB4D : [2374]                              ENDIF
 2375/DB4D : (MACRO)                    	DO	PRCHAR
 2375/DB4D : =>NOT BLANK                         IFNB   PRCHAR
 2375/DB4D : EE                                   DB    H(PRCHAR)
 2375/DB4E : 9D                                   DB    L(PRCHAR)
 2375/DB4F :                                      SHIFT
 2375/DB4F :  (MACRO-2)                           DO    
 2375/DB4F : =>BLANK                             IFNB   
 2375/DB4F :                                      DB    H()
 2375/DB4F :                                      DB    L()
 2375/DB4F :                                      SHIFT
 2375/DB4F :                                      DO    
 2375/DB4F : [2375]                              ENDIF
 2375/DB4F : [2375]                              ENDIF
 2376/DB4F : (MACRO)                    PREX2:	TSTSTR	PREX3,T_SPC		; handle SPC(x)
 2376/DB4F : 9B                                  DB     H(PREX3 - TSTBITH)
 2376/DB50 : 58                                  DB     L(PREX3)
 2376/DB51 : C9                                  DB     T_SPC
 2377/DB52 : (MACRO)                    	ILCALL	SNGL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 95 - 2024年05月30日 19時01分01秒


 2377/DB52 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2377/DB53 : 70                                  DB     L(SNGL)
 2378/DB54 : (MACRO)                    	DO	POPAE
 2378/DB54 : =>NOT BLANK                         IFNB   POPAE
 2378/DB54 : E1                                   DB    H(POPAE)
 2378/DB55 : BD                                   DB    L(POPAE)
 2378/DB56 :                                      SHIFT
 2378/DB56 :  (MACRO-2)                           DO    
 2378/DB56 : =>BLANK                             IFNB   
 2378/DB56 :                                      DB    H()
 2378/DB56 :                                      DB    L()
 2378/DB56 :                                      SHIFT
 2378/DB56 :                                      DO    
 2378/DB56 : [2378]                              ENDIF
 2378/DB56 : [2378]                              ENDIF
 2379/DB56 : (MACRO)                    	DO	SPC
 2379/DB56 : =>NOT BLANK                         IFNB   SPC
 2379/DB56 : E5                                   DB    H(SPC)
 2379/DB57 : C2                                   DB    L(SPC)
 2379/DB58 :                                      SHIFT
 2379/DB58 :  (MACRO-2)                           DO    
 2379/DB58 : =>BLANK                             IFNB   
 2379/DB58 :                                      DB    H()
 2379/DB58 :                                      DB    L()
 2379/DB58 :                                      SHIFT
 2379/DB58 :                                      DO    
 2379/DB58 : [2379]                              ENDIF
 2379/DB58 : [2379]                              ENDIF
 2380/DB58 : (MACRO)                    PREX3:	TSTSTR	PREX4,T_STR		; handle STR$(x)
 2380/DB58 : 9B                                  DB     H(PREX4 - TSTBITH)
 2380/DB59 : 5F                                  DB     L(PREX4)
 2380/DB5A : CA                                  DB     T_STR
 2381/DB5B : (MACRO)                    	ILCALL	SNGL
 2381/DB5B : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2381/DB5C : 70                                  DB     L(SNGL)
 2382/DB5D : (MACRO)                    	GOTO	PREX10
 2382/DB5D : 5B                                  DB     H(PREX10 - JMPBITH)
 2382/DB5E : 8B                                  DB     L(PREX10)
 2383/DB5F : (MACRO)                    PREX4:	TSTSTR	PREX5,T_TAB		; handle TAB(x)
 2383/DB5F : 9B                                  DB     H(PREX5 - TSTBITH)
 2383/DB60 : 68                                  DB     L(PREX5)
 2383/DB61 : CB                                  DB     T_TAB
 2384/DB62 : (MACRO)                    	ILCALL	SNGL
 2384/DB62 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2384/DB63 : 70                                  DB     L(SNGL)
 2385/DB64 : (MACRO)                    	DO	POPAE
 2385/DB64 : =>NOT BLANK                         IFNB   POPAE
 2385/DB64 : E1                                   DB    H(POPAE)
 2385/DB65 : BD                                   DB    L(POPAE)
 2385/DB66 :                                      SHIFT
 2385/DB66 :  (MACRO-2)                           DO    
 2385/DB66 : =>BLANK                             IFNB   
 2385/DB66 :                                      DB    H()
 2385/DB66 :                                      DB    L()
 2385/DB66 :                                      SHIFT
 2385/DB66 :                                      DO    
 2385/DB66 : [2385]                              ENDIF
 2385/DB66 : [2385]                              ENDIF
 2386/DB66 : (MACRO)                    	DO	TAB
 2386/DB66 : =>NOT BLANK                         IFNB   TAB
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 96 - 2024年05月30日 19時01分01秒


 2386/DB66 : FD                                   DB    H(TAB)
 2386/DB67 : CB                                   DB    L(TAB)
 2386/DB68 :                                      SHIFT
 2386/DB68 :  (MACRO-2)                           DO    
 2386/DB68 : =>BLANK                             IFNB   
 2386/DB68 :                                      DB    H()
 2386/DB68 :                                      DB    L()
 2386/DB68 :                                      SHIFT
 2386/DB68 :                                      DO    
 2386/DB68 : [2386]                              ENDIF
 2386/DB68 : [2386]                              ENDIF
 2387/DB68 : (MACRO)                    PREX5:	TSTSTR	PREX6,T_VER		; handle VER$
 2387/DB68 : 9B                                  DB     H(PREX6 - TSTBITH)
 2387/DB69 : 6D                                  DB     L(PREX6)
 2387/DB6A : CD                                  DB     T_VER
 2388/DB6B : (MACRO)                    	DO	VSTRNG
 2388/DB6B : =>NOT BLANK                         IFNB   VSTRNG
 2388/DB6B : FD                                   DB    H(VSTRNG)
 2388/DB6C : A2                                   DB    L(VSTRNG)
 2388/DB6D :                                      SHIFT
 2388/DB6D :  (MACRO-2)                           DO    
 2388/DB6D : =>BLANK                             IFNB   
 2388/DB6D :                                      DB    H()
 2388/DB6D :                                      DB    L()
 2388/DB6D :                                      SHIFT
 2388/DB6D :                                      DO    
 2388/DB6D : [2388]                              ENDIF
 2388/DB6D : [2388]                              ENDIF
 2389/DB6D : (MACRO)                    PREX6:	TSTSTR	PREX7,T_VERT		; handle VERT(x)
 2389/DB6D : 9B                                  DB     H(PREX7 - TSTBITH)
 2389/DB6E : 76                                  DB     L(PREX7)
 2389/DB6F : CE                                  DB     T_VERT
 2390/DB70 : (MACRO)                    	ILCALL	SNGL
 2390/DB70 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2390/DB71 : 70                                  DB     L(SNGL)
 2391/DB72 : (MACRO)                    	DO	POPAE
 2391/DB72 : =>NOT BLANK                         IFNB   POPAE
 2391/DB72 : E1                                   DB    H(POPAE)
 2391/DB73 : BD                                   DB    L(POPAE)
 2391/DB74 :                                      SHIFT
 2391/DB74 :  (MACRO-2)                           DO    
 2391/DB74 : =>BLANK                             IFNB   
 2391/DB74 :                                      DB    H()
 2391/DB74 :                                      DB    L()
 2391/DB74 :                                      SHIFT
 2391/DB74 :                                      DO    
 2391/DB74 : [2391]                              ENDIF
 2391/DB74 : [2391]                              ENDIF
 2392/DB74 : (MACRO)                    	DO	VERT
 2392/DB74 : =>NOT BLANK                         IFNB   VERT
 2392/DB74 : F2                                   DB    H(VERT)
 2392/DB75 : 3F                                   DB    L(VERT)
 2392/DB76 :                                      SHIFT
 2392/DB76 :  (MACRO-2)                           DO    
 2392/DB76 : =>BLANK                             IFNB   
 2392/DB76 :                                      DB    H()
 2392/DB76 :                                      DB    L()
 2392/DB76 :                                      SHIFT
 2392/DB76 :                                      DO    
 2392/DB76 : [2392]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 97 - 2024年05月30日 19時01分01秒


 2392/DB76 : [2392]                              ENDIF
 2393/DB76 : (MACRO)                    PREX7:	DO	STRPNT
 2393/DB76 : =>NOT BLANK                         IFNB   STRPNT
 2393/DB76 : ED                                   DB    H(STRPNT)
 2393/DB77 : 42                                   DB    L(STRPNT)
 2393/DB78 :                                      SHIFT
 2393/DB78 :  (MACRO-2)                           DO    
 2393/DB78 : =>BLANK                             IFNB   
 2393/DB78 :                                      DB    H()
 2393/DB78 :                                      DB    L()
 2393/DB78 :                                      SHIFT
 2393/DB78 :                                      DO    
 2393/DB78 : [2393]                              ENDIF
 2393/DB78 : [2393]                              ENDIF
 2394/DB78 : (MACRO)                    	TSTVAR	PREX9
 2394/DB78 : BB                                  DB     H(PREX9 - CALBITH)
 2394/DB79 : 89                                  DB     L(PREX9)
 2395/DB7A : (MACRO)                    	DO	FNDVAR
 2395/DB7A : =>NOT BLANK                         IFNB   FNDVAR
 2395/DB7A : E2                                   DB    H(FNDVAR)
 2395/DB7B : E1                                   DB    L(FNDVAR)
 2395/DB7C :                                      SHIFT
 2395/DB7C :  (MACRO-2)                           DO    
 2395/DB7C : =>BLANK                             IFNB   
 2395/DB7C :                                      DB    H()
 2395/DB7C :                                      DB    L()
 2395/DB7C :                                      SHIFT
 2395/DB7C :                                      DO    
 2395/DB7C : [2395]                              ENDIF
 2395/DB7C : [2395]                              ENDIF
 2396/DB7C : (MACRO)                    	DO	POPDLR
 2396/DB7C : =>NOT BLANK                         IFNB   POPDLR
 2396/DB7C : FD                                   DB    H(POPDLR)
 2396/DB7D : 90                                   DB    L(POPDLR)
 2396/DB7E :                                      SHIFT
 2396/DB7E :  (MACRO-2)                           DO    
 2396/DB7E : =>BLANK                             IFNB   
 2396/DB7E :                                      DB    H()
 2396/DB7E :                                      DB    L()
 2396/DB7E :                                      SHIFT
 2396/DB7E :                                      DO    
 2396/DB7E : [2396]                              ENDIF
 2396/DB7E : [2396]                              ENDIF
 2397/DB7E : (MACRO)                    	TSTSTR	PREX8,'$'
 2397/DB7E : 9B                                  DB     H(PREX8 - TSTBITH)
 2397/DB7F : 87                                  DB     L(PREX8)
 2397/DB80 : 24                                  DB     '$'
 2398/DB81 : (MACRO)                    	DO	LDVAR
 2398/DB81 : =>NOT BLANK                         IFNB   LDVAR
 2398/DB81 : E8                                   DB    H(LDVAR)
 2398/DB82 : 15                                   DB    L(LDVAR)
 2398/DB83 :                                      SHIFT
 2398/DB83 :  (MACRO-2)                           DO    
 2398/DB83 : =>BLANK                             IFNB   
 2398/DB83 :                                      DB    H()
 2398/DB83 :                                      DB    L()
 2398/DB83 :                                      SHIFT
 2398/DB83 :                                      DO    
 2398/DB83 : [2398]                              ENDIF
 2398/DB83 : [2398]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 98 - 2024年05月30日 19時01分01秒


 2399/DB83 : (MACRO)                    	DO	POPAE
 2399/DB83 : =>NOT BLANK                         IFNB   POPAE
 2399/DB83 : E1                                   DB    H(POPAE)
 2399/DB84 : BD                                   DB    L(POPAE)
 2399/DB85 :                                      SHIFT
 2399/DB85 :  (MACRO-2)                           DO    
 2399/DB85 : =>BLANK                             IFNB   
 2399/DB85 :                                      DB    H()
 2399/DB85 :                                      DB    L()
 2399/DB85 :                                      SHIFT
 2399/DB85 :                                      DO    
 2399/DB85 : [2399]                              ENDIF
 2399/DB85 : [2399]                              ENDIF
 2400/DB85 : (MACRO)                    	DO	PSTRNG
 2400/DB85 : =>NOT BLANK                         IFNB   PSTRNG
 2400/DB85 : FD                                   DB    H(PSTRNG)
 2400/DB86 : AA                                   DB    L(PSTRNG)
 2400/DB87 :                                      SHIFT
 2400/DB87 :  (MACRO-2)                           DO    
 2400/DB87 : =>BLANK                             IFNB   
 2400/DB87 :                                      DB    H()
 2400/DB87 :                                      DB    L()
 2400/DB87 :                                      SHIFT
 2400/DB87 :                                      DO    
 2400/DB87 : [2400]                              ENDIF
 2400/DB87 : [2400]                              ENDIF
 2401/DB87 : (MACRO)                    PREX8:	DO	XCHPNT
 2401/DB87 : =>NOT BLANK                         IFNB   XCHPNT
 2401/DB87 : E9                                   DB    H(XCHPNT)
 2401/DB88 : 1E                                   DB    L(XCHPNT)
 2401/DB89 :                                      SHIFT
 2401/DB89 :  (MACRO-2)                           DO    
 2401/DB89 : =>BLANK                             IFNB   
 2401/DB89 :                                      DB    H()
 2401/DB89 :                                      DB    L()
 2401/DB89 :                                      SHIFT
 2401/DB89 :                                      DO    
 2401/DB89 : [2401]                              ENDIF
 2401/DB89 : [2401]                              ENDIF
 2402/DB89 : (MACRO)                    PREX9:	ILCALL	REXPR			; handle numeric expression
 2402/DB89 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2402/DB8A : C6                                  DB     L(REXPR)
 2403/DB8B : (MACRO)                    PREX10:	DO	STACK
 2403/DB8B : =>NOT BLANK                         IFNB   STACK
 2403/DB8B : F2                                   DB    H(STACK)
 2403/DB8C : 8E                                   DB    L(STACK)
 2403/DB8D :                                      SHIFT
 2403/DB8D :  (MACRO-2)                           DO    
 2403/DB8D : =>BLANK                             IFNB   
 2403/DB8D :                                      DB    H()
 2403/DB8D :                                      DB    L()
 2403/DB8D :                                      SHIFT
 2403/DB8D :                                      DO    
 2403/DB8D : [2403]                              ENDIF
 2403/DB8D : [2403]                              ENDIF
 2404/DB8D : (MACRO)                    	DO	FNUM
 2404/DB8D : =>NOT BLANK                         IFNB   FNUM
 2404/DB8D : F2                                   DB    H(FNUM)
 2404/DB8E : 9A                                   DB    L(FNUM)
 2404/DB8F :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 99 - 2024年05月30日 19時01分01秒


 2404/DB8F :  (MACRO-2)                           DO    
 2404/DB8F : =>BLANK                             IFNB   
 2404/DB8F :                                      DB    H()
 2404/DB8F :                                      DB    L()
 2404/DB8F :                                      SHIFT
 2404/DB8F :                                      DO    
 2404/DB8F : [2404]                              ENDIF
 2404/DB8F : [2404]                              ENDIF
 2405/DB8F : (MACRO)                    	DO	STPBCK
 2405/DB8F : =>NOT BLANK                         IFNB   STPBCK
 2405/DB8F : F4                                   DB    H(STPBCK)
 2405/DB90 : AE                                   DB    L(STPBCK)
 2405/DB91 :                                      SHIFT
 2405/DB91 :  (MACRO-2)                           DO    
 2405/DB91 : =>BLANK                             IFNB   
 2405/DB91 :                                      DB    H()
 2405/DB91 :                                      DB    L()
 2405/DB91 :                                      SHIFT
 2405/DB91 :                                      DO    
 2405/DB91 : [2405]                              ENDIF
 2405/DB91 : [2405]                              ENDIF
 2406/DB91 : (MACRO)                    	ILRTRN
 2406/DB91 : 00                                  DB     0
 2407/DB92 :                            
 2408/DB92 :                            ; Handle string expressions
 2409/DB92 : (MACRO)                    STREXP:	ILCALL	STRF
 2409/DB92 : 1B                                  DB     H(STRF - (JMPBITH + TSTBITH))
 2409/DB93 : 9D                                  DB     L(STRF)
 2410/DB94 : (MACRO)                    STREX1:	TSTSTR	STREX2,'&'
 2410/DB94 : 9B                                  DB     H(STREX2 - TSTBITH)
 2410/DB95 : 9B                                  DB     L(STREX2)
 2410/DB96 : 26                                  DB     '&'
 2411/DB97 : (MACRO)                    	ILCALL	STRF
 2411/DB97 : 1B                                  DB     H(STRF - (JMPBITH + TSTBITH))
 2411/DB98 : 9D                                  DB     L(STRF)
 2412/DB99 : (MACRO)                    	GOTO	STREX1
 2412/DB99 : 5B                                  DB     H(STREX1 - JMPBITH)
 2412/DB9A : 94                                  DB     L(STREX1)
 2413/DB9B : (MACRO)                    STREX2:	DO	POPSTR
 2413/DB9B : =>NOT BLANK                         IFNB   POPSTR
 2413/DB9B : ED                                   DB    H(POPSTR)
 2413/DB9C : 3C                                   DB    L(POPSTR)
 2413/DB9D :                                      SHIFT
 2413/DB9D :  (MACRO-2)                           DO    
 2413/DB9D : =>BLANK                             IFNB   
 2413/DB9D :                                      DB    H()
 2413/DB9D :                                      DB    L()
 2413/DB9D :                                      SHIFT
 2413/DB9D :                                      DO    
 2413/DB9D : [2413]                              ENDIF
 2413/DB9D : [2413]                              ENDIF
 2414/DB9D : (MACRO)                    STRF:	TSTSTR	STRF1,'"'
 2414/DB9D : 9B                                  DB     H(STRF1 - TSTBITH)
 2414/DB9E : A2                                  DB     L(STRF1)
 2414/DB9F : 22                                  DB     '"'
 2415/DBA0 : (MACRO)                    	DO	PUTST
 2415/DBA0 : =>NOT BLANK                         IFNB   PUTST
 2415/DBA0 : EC                                   DB    H(PUTST)
 2415/DBA1 : 19                                   DB    L(PUTST)
 2415/DBA2 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 100 - 2024年05月30日 19時01分01秒


 2415/DBA2 :  (MACRO-2)                           DO    
 2415/DBA2 : =>BLANK                             IFNB   
 2415/DBA2 :                                      DB    H()
 2415/DBA2 :                                      DB    L()
 2415/DBA2 :                                      SHIFT
 2415/DBA2 :                                      DO    
 2415/DBA2 : [2415]                              ENDIF
 2415/DBA2 : [2415]                              ENDIF
 2416/DBA2 : (MACRO)                    STRF1:	TSTSTR	STRF2,T_CHR		; handle CHR$(x)
 2416/DBA2 : 9B                                  DB     H(STRF2 - TSTBITH)
 2416/DBA3 : AB                                  DB     L(STRF2)
 2416/DBA4 : C5                                  DB     T_CHR
 2417/DBA5 : (MACRO)                    	ILCALL	SNGL
 2417/DBA5 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2417/DBA6 : 70                                  DB     L(SNGL)
 2418/DBA7 : (MACRO)                    	DO	FIX
 2418/DBA7 : =>NOT BLANK                         IFNB   FIX
 2418/DBA7 : EB                                   DB    H(FIX)
 2418/DBA8 : 2F                                   DB    L(FIX)
 2418/DBA9 :                                      SHIFT
 2418/DBA9 :  (MACRO-2)                           DO    
 2418/DBA9 : =>BLANK                             IFNB   
 2418/DBA9 :                                      DB    H()
 2418/DBA9 :                                      DB    L()
 2418/DBA9 :                                      SHIFT
 2418/DBA9 :                                      DO    
 2418/DBA9 : [2418]                              ENDIF
 2418/DBA9 : [2418]                              ENDIF
 2419/DBA9 : (MACRO)                    	DO	CHRSTR
 2419/DBA9 : =>NOT BLANK                         IFNB   CHRSTR
 2419/DBA9 : EC                                   DB    H(CHRSTR)
 2419/DBAA : 07                                   DB    L(CHRSTR)
 2419/DBAB :                                      SHIFT
 2419/DBAB :  (MACRO-2)                           DO    
 2419/DBAB : =>BLANK                             IFNB   
 2419/DBAB :                                      DB    H()
 2419/DBAB :                                      DB    L()
 2419/DBAB :                                      SHIFT
 2419/DBAB :                                      DO    
 2419/DBAB : [2419]                              ENDIF
 2419/DBAB : [2419]                              ENDIF
 2420/DBAB : (MACRO)                    STRF2:	TSTSTR	STRF4,T_LEFT		; handle LEFT$(x$,y)
 2420/DBAB : 9B                                  DB     H(STRF4 - TSTBITH)
 2420/DBAC : DD                                  DB     L(STRF4)
 2420/DBAD : C6                                  DB     T_LEFT
 2421/DBAE : (MACRO)                    	TSTSTR	SYNTAX,'('
 2421/DBAE : 99                                  DB     H(SYNTAX - TSTBITH)
 2421/DBAF : 42                                  DB     L(SYNTAX)
 2421/DBB0 : 28                                  DB     '('
 2422/DBB1 : (MACRO)                    	TSTSTR	STRF3,'"'
 2422/DBB1 : 9B                                  DB     H(STRF3 - TSTBITH)
 2422/DBB2 : C4                                  DB     L(STRF3)
 2422/DBB3 : 22                                  DB     '"'
 2423/DBB4 : (MACRO)                    	DO	STPNT
 2423/DBB4 : =>NOT BLANK                         IFNB   STPNT
 2423/DBB4 : E4                                   DB    H(STPNT)
 2423/DBB5 : F4                                   DB    L(STPNT)
 2423/DBB6 :                                      SHIFT
 2423/DBB6 :  (MACRO-2)                           DO    
 2423/DBB6 : =>BLANK                             IFNB   
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 101 - 2024年05月30日 19時01分01秒


 2423/DBB6 :                                      DB    H()
 2423/DBB6 :                                      DB    L()
 2423/DBB6 :                                      SHIFT
 2423/DBB6 :                                      DO    
 2423/DBB6 : [2423]                              ENDIF
 2423/DBB6 : [2423]                              ENDIF
 2424/DBB6 : (MACRO)                    	TSTSTR	SYNTAX,','
 2424/DBB6 : 99                                  DB     H(SYNTAX - TSTBITH)
 2424/DBB7 : 42                                  DB     L(SYNTAX)
 2424/DBB8 : 2C                                  DB     ','
 2425/DBB9 : (MACRO)                    	ILCALL	REXPR
 2425/DBB9 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2425/DBBA : C6                                  DB     L(REXPR)
 2426/DBBB : (MACRO)                    	DO	FIX
 2426/DBBB : =>NOT BLANK                         IFNB   FIX
 2426/DBBB : EB                                   DB    H(FIX)
 2426/DBBC : 2F                                   DB    L(FIX)
 2426/DBBD :                                      SHIFT
 2426/DBBD :  (MACRO-2)                           DO    
 2426/DBBD : =>BLANK                             IFNB   
 2426/DBBD :                                      DB    H()
 2426/DBBD :                                      DB    L()
 2426/DBBD :                                      SHIFT
 2426/DBBD :                                      DO    
 2426/DBBD : [2426]                              ENDIF
 2426/DBBD : [2426]                              ENDIF
 2427/DBBD : (MACRO)                    	TSTSTR	ENDPAR,')'
 2427/DBBD : 99                                  DB     H(ENDPAR - TSTBITH)
 2427/DBBE : 2F                                  DB     L(ENDPAR)
 2427/DBBF : 29                                  DB     ')'
 2428/DBC0 : (MACRO)                    	DO	XCHPNT
 2428/DBC0 : =>NOT BLANK                         IFNB   XCHPNT
 2428/DBC0 : E9                                   DB    H(XCHPNT)
 2428/DBC1 : 1E                                   DB    L(XCHPNT)
 2428/DBC2 :                                      SHIFT
 2428/DBC2 :  (MACRO-2)                           DO    
 2428/DBC2 : =>BLANK                             IFNB   
 2428/DBC2 :                                      DB    H()
 2428/DBC2 :                                      DB    L()
 2428/DBC2 :                                      SHIFT
 2428/DBC2 :                                      DO    
 2428/DBC2 : [2428]                              ENDIF
 2428/DBC2 : [2428]                              ENDIF
 2429/DBC2 : (MACRO)                    	DO	LEFTST
 2429/DBC2 : =>NOT BLANK                         IFNB   LEFTST
 2429/DBC2 : EB                                   DB    H(LEFTST)
 2429/DBC3 : 99                                   DB    L(LEFTST)
 2429/DBC4 :                                      SHIFT
 2429/DBC4 :  (MACRO-2)                           DO    
 2429/DBC4 : =>BLANK                             IFNB   
 2429/DBC4 :                                      DB    H()
 2429/DBC4 :                                      DB    L()
 2429/DBC4 :                                      SHIFT
 2429/DBC4 :                                      DO    
 2429/DBC4 : [2429]                              ENDIF
 2429/DBC4 : [2429]                              ENDIF
 2430/DBC4 : (MACRO)                    STRF3:	TSTVAR	SYNTAX
 2430/DBC4 : B9                                  DB     H(SYNTAX - CALBITH)
 2430/DBC5 : 42                                  DB     L(SYNTAX)
 2431/DBC6 : (MACRO)                    	DO	FNDVAR
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 102 - 2024年05月30日 19時01分01秒


 2431/DBC6 : =>NOT BLANK                         IFNB   FNDVAR
 2431/DBC6 : E2                                   DB    H(FNDVAR)
 2431/DBC7 : E1                                   DB    L(FNDVAR)
 2431/DBC8 :                                      SHIFT
 2431/DBC8 :  (MACRO-2)                           DO    
 2431/DBC8 : =>BLANK                             IFNB   
 2431/DBC8 :                                      DB    H()
 2431/DBC8 :                                      DB    L()
 2431/DBC8 :                                      SHIFT
 2431/DBC8 :                                      DO    
 2431/DBC8 : [2431]                              ENDIF
 2431/DBC8 : [2431]                              ENDIF
 2432/DBC8 : (MACRO)                    	DO	DEFVAR
 2432/DBC8 : =>NOT BLANK                         IFNB   DEFVAR
 2432/DBC8 : E5                                   DB    H(DEFVAR)
 2432/DBC9 : 0E                                   DB    L(DEFVAR)
 2432/DBCA :                                      SHIFT
 2432/DBCA :  (MACRO-2)                           DO    
 2432/DBCA : =>BLANK                             IFNB   
 2432/DBCA :                                      DB    H()
 2432/DBCA :                                      DB    L()
 2432/DBCA :                                      SHIFT
 2432/DBCA :                                      DO    
 2432/DBCA : [2432]                              ENDIF
 2432/DBCA : [2432]                              ENDIF
 2433/DBCA : (MACRO)                    	TSTSTR	SYNTAX,'$'
 2433/DBCA : 99                                  DB     H(SYNTAX - TSTBITH)
 2433/DBCB : 42                                  DB     L(SYNTAX)
 2433/DBCC : 24                                  DB     '$'
 2434/DBCD : (MACRO)                    	DO	LDVAR
 2434/DBCD : =>NOT BLANK                         IFNB   LDVAR
 2434/DBCD : E8                                   DB    H(LDVAR)
 2434/DBCE : 15                                   DB    L(LDVAR)
 2434/DBCF :                                      SHIFT
 2434/DBCF :  (MACRO-2)                           DO    
 2434/DBCF : =>BLANK                             IFNB   
 2434/DBCF :                                      DB    H()
 2434/DBCF :                                      DB    L()
 2434/DBCF :                                      SHIFT
 2434/DBCF :                                      DO    
 2434/DBCF : [2434]                              ENDIF
 2434/DBCF : [2434]                              ENDIF
 2435/DBCF : (MACRO)                    	DO	FIX
 2435/DBCF : =>NOT BLANK                         IFNB   FIX
 2435/DBCF : EB                                   DB    H(FIX)
 2435/DBD0 : 2F                                   DB    L(FIX)
 2435/DBD1 :                                      SHIFT
 2435/DBD1 :  (MACRO-2)                           DO    
 2435/DBD1 : =>BLANK                             IFNB   
 2435/DBD1 :                                      DB    H()
 2435/DBD1 :                                      DB    L()
 2435/DBD1 :                                      SHIFT
 2435/DBD1 :                                      DO    
 2435/DBD1 : [2435]                              ENDIF
 2435/DBD1 : [2435]                              ENDIF
 2436/DBD1 : (MACRO)                    	TSTSTR	SYNTAX,','
 2436/DBD1 : 99                                  DB     H(SYNTAX - TSTBITH)
 2436/DBD2 : 42                                  DB     L(SYNTAX)
 2436/DBD3 : 2C                                  DB     ','
 2437/DBD4 : (MACRO)                    	ILCALL	REXPR
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 103 - 2024年05月30日 19時01分01秒


 2437/DBD4 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2437/DBD5 : C6                                  DB     L(REXPR)
 2438/DBD6 : (MACRO)                    	DO	FIX
 2438/DBD6 : =>NOT BLANK                         IFNB   FIX
 2438/DBD6 : EB                                   DB    H(FIX)
 2438/DBD7 : 2F                                   DB    L(FIX)
 2438/DBD8 :                                      SHIFT
 2438/DBD8 :  (MACRO-2)                           DO    
 2438/DBD8 : =>BLANK                             IFNB   
 2438/DBD8 :                                      DB    H()
 2438/DBD8 :                                      DB    L()
 2438/DBD8 :                                      SHIFT
 2438/DBD8 :                                      DO    
 2438/DBD8 : [2438]                              ENDIF
 2438/DBD8 : [2438]                              ENDIF
 2439/DBD8 : (MACRO)                    	TSTSTR	ENDPAR,')'
 2439/DBD8 : 99                                  DB     H(ENDPAR - TSTBITH)
 2439/DBD9 : 2F                                  DB     L(ENDPAR)
 2439/DBDA : 29                                  DB     ')'
 2440/DBDB : (MACRO)                    	DO	LFTSTR
 2440/DBDB : =>NOT BLANK                         IFNB   LFTSTR
 2440/DBDB : EC                                   DB    H(LFTSTR)
 2440/DBDC : 6C                                   DB    L(LFTSTR)
 2440/DBDD :                                      SHIFT
 2440/DBDD :  (MACRO-2)                           DO    
 2440/DBDD : =>BLANK                             IFNB   
 2440/DBDD :                                      DB    H()
 2440/DBDD :                                      DB    L()
 2440/DBDD :                                      SHIFT
 2440/DBDD :                                      DO    
 2440/DBDD : [2440]                              ENDIF
 2440/DBDD : [2440]                              ENDIF
 2441/DBDD : (MACRO)                    STRF4:	TSTSTR	STRF6,T_MID		; handle MID$(x$,y,z)
 2441/DBDD : 9C                                  DB     H(STRF6 - TSTBITH)
 2441/DBDE : 1D                                  DB     L(STRF6)
 2441/DBDF : C7                                  DB     T_MID
 2442/DBE0 : (MACRO)                    	TSTSTR	SYNTAX,'('
 2442/DBE0 : 99                                  DB     H(SYNTAX - TSTBITH)
 2442/DBE1 : 42                                  DB     L(SYNTAX)
 2442/DBE2 : 28                                  DB     '('
 2443/DBE3 : (MACRO)                    	TSTSTR	STRF5,'"'
 2443/DBE3 : 9B                                  DB     H(STRF5 - TSTBITH)
 2443/DBE4 : FD                                  DB     L(STRF5)
 2443/DBE5 : 22                                  DB     '"'
 2444/DBE6 : (MACRO)                    	DO	STPNT
 2444/DBE6 : =>NOT BLANK                         IFNB   STPNT
 2444/DBE6 : E4                                   DB    H(STPNT)
 2444/DBE7 : F4                                   DB    L(STPNT)
 2444/DBE8 :                                      SHIFT
 2444/DBE8 :  (MACRO-2)                           DO    
 2444/DBE8 : =>BLANK                             IFNB   
 2444/DBE8 :                                      DB    H()
 2444/DBE8 :                                      DB    L()
 2444/DBE8 :                                      SHIFT
 2444/DBE8 :                                      DO    
 2444/DBE8 : [2444]                              ENDIF
 2444/DBE8 : [2444]                              ENDIF
 2445/DBE8 : (MACRO)                    	TSTSTR	SYNTAX,','
 2445/DBE8 : 99                                  DB     H(SYNTAX - TSTBITH)
 2445/DBE9 : 42                                  DB     L(SYNTAX)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 104 - 2024年05月30日 19時01分01秒


 2445/DBEA : 2C                                  DB     ','
 2446/DBEB : (MACRO)                    	ILCALL	REXPR
 2446/DBEB : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2446/DBEC : C6                                  DB     L(REXPR)
 2447/DBED : (MACRO)                    	DO	FIX
 2447/DBED : =>NOT BLANK                         IFNB   FIX
 2447/DBED : EB                                   DB    H(FIX)
 2447/DBEE : 2F                                   DB    L(FIX)
 2447/DBEF :                                      SHIFT
 2447/DBEF :  (MACRO-2)                           DO    
 2447/DBEF : =>BLANK                             IFNB   
 2447/DBEF :                                      DB    H()
 2447/DBEF :                                      DB    L()
 2447/DBEF :                                      SHIFT
 2447/DBEF :                                      DO    
 2447/DBEF : [2447]                              ENDIF
 2447/DBEF : [2447]                              ENDIF
 2448/DBEF : (MACRO)                    	TSTSTR	SYNTAX,','
 2448/DBEF : 99                                  DB     H(SYNTAX - TSTBITH)
 2448/DBF0 : 42                                  DB     L(SYNTAX)
 2448/DBF1 : 2C                                  DB     ','
 2449/DBF2 : (MACRO)                    	ILCALL	REXPR
 2449/DBF2 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2449/DBF3 : C6                                  DB     L(REXPR)
 2450/DBF4 : (MACRO)                    	DO	FIX
 2450/DBF4 : =>NOT BLANK                         IFNB   FIX
 2450/DBF4 : EB                                   DB    H(FIX)
 2450/DBF5 : 2F                                   DB    L(FIX)
 2450/DBF6 :                                      SHIFT
 2450/DBF6 :  (MACRO-2)                           DO    
 2450/DBF6 : =>BLANK                             IFNB   
 2450/DBF6 :                                      DB    H()
 2450/DBF6 :                                      DB    L()
 2450/DBF6 :                                      SHIFT
 2450/DBF6 :                                      DO    
 2450/DBF6 : [2450]                              ENDIF
 2450/DBF6 : [2450]                              ENDIF
 2451/DBF6 : (MACRO)                    	TSTSTR	ENDPAR,')'
 2451/DBF6 : 99                                  DB     H(ENDPAR - TSTBITH)
 2451/DBF7 : 2F                                  DB     L(ENDPAR)
 2451/DBF8 : 29                                  DB     ')'
 2452/DBF9 : (MACRO)                    	DO	XCHPNT
 2452/DBF9 : =>NOT BLANK                         IFNB   XCHPNT
 2452/DBF9 : E9                                   DB    H(XCHPNT)
 2452/DBFA : 1E                                   DB    L(XCHPNT)
 2452/DBFB :                                      SHIFT
 2452/DBFB :  (MACRO-2)                           DO    
 2452/DBFB : =>BLANK                             IFNB   
 2452/DBFB :                                      DB    H()
 2452/DBFB :                                      DB    L()
 2452/DBFB :                                      SHIFT
 2452/DBFB :                                      DO    
 2452/DBFB : [2452]                              ENDIF
 2452/DBFB : [2452]                              ENDIF
 2453/DBFB : (MACRO)                    	DO	MIDST
 2453/DBFB : =>NOT BLANK                         IFNB   MIDST
 2453/DBFB : EB                                   DB    H(MIDST)
 2453/DBFC : 75                                   DB    L(MIDST)
 2453/DBFD :                                      SHIFT
 2453/DBFD :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 105 - 2024年05月30日 19時01分01秒


 2453/DBFD : =>BLANK                             IFNB   
 2453/DBFD :                                      DB    H()
 2453/DBFD :                                      DB    L()
 2453/DBFD :                                      SHIFT
 2453/DBFD :                                      DO    
 2453/DBFD : [2453]                              ENDIF
 2453/DBFD : [2453]                              ENDIF
 2454/DBFD : (MACRO)                    STRF5:	TSTVAR	SYNTAX
 2454/DBFD : B9                                  DB     H(SYNTAX - CALBITH)
 2454/DBFE : 42                                  DB     L(SYNTAX)
 2455/DBFF : (MACRO)                    	DO	FNDVAR
 2455/DBFF : =>NOT BLANK                         IFNB   FNDVAR
 2455/DBFF : E2                                   DB    H(FNDVAR)
 2455/DC00 : E1                                   DB    L(FNDVAR)
 2455/DC01 :                                      SHIFT
 2455/DC01 :  (MACRO-2)                           DO    
 2455/DC01 : =>BLANK                             IFNB   
 2455/DC01 :                                      DB    H()
 2455/DC01 :                                      DB    L()
 2455/DC01 :                                      SHIFT
 2455/DC01 :                                      DO    
 2455/DC01 : [2455]                              ENDIF
 2455/DC01 : [2455]                              ENDIF
 2456/DC01 : (MACRO)                    	DO	DEFVAR
 2456/DC01 : =>NOT BLANK                         IFNB   DEFVAR
 2456/DC01 : E5                                   DB    H(DEFVAR)
 2456/DC02 : 0E                                   DB    L(DEFVAR)
 2456/DC03 :                                      SHIFT
 2456/DC03 :  (MACRO-2)                           DO    
 2456/DC03 : =>BLANK                             IFNB   
 2456/DC03 :                                      DB    H()
 2456/DC03 :                                      DB    L()
 2456/DC03 :                                      SHIFT
 2456/DC03 :                                      DO    
 2456/DC03 : [2456]                              ENDIF
 2456/DC03 : [2456]                              ENDIF
 2457/DC03 : (MACRO)                    	TSTSTR	SYNTAX,'$'
 2457/DC03 : 99                                  DB     H(SYNTAX - TSTBITH)
 2457/DC04 : 42                                  DB     L(SYNTAX)
 2457/DC05 : 24                                  DB     '$'
 2458/DC06 : (MACRO)                    	DO	LDVAR
 2458/DC06 : =>NOT BLANK                         IFNB   LDVAR
 2458/DC06 : E8                                   DB    H(LDVAR)
 2458/DC07 : 15                                   DB    L(LDVAR)
 2458/DC08 :                                      SHIFT
 2458/DC08 :  (MACRO-2)                           DO    
 2458/DC08 : =>BLANK                             IFNB   
 2458/DC08 :                                      DB    H()
 2458/DC08 :                                      DB    L()
 2458/DC08 :                                      SHIFT
 2458/DC08 :                                      DO    
 2458/DC08 : [2458]                              ENDIF
 2458/DC08 : [2458]                              ENDIF
 2459/DC08 : (MACRO)                    	DO	FIX
 2459/DC08 : =>NOT BLANK                         IFNB   FIX
 2459/DC08 : EB                                   DB    H(FIX)
 2459/DC09 : 2F                                   DB    L(FIX)
 2459/DC0A :                                      SHIFT
 2459/DC0A :  (MACRO-2)                           DO    
 2459/DC0A : =>BLANK                             IFNB   
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 106 - 2024年05月30日 19時01分01秒


 2459/DC0A :                                      DB    H()
 2459/DC0A :                                      DB    L()
 2459/DC0A :                                      SHIFT
 2459/DC0A :                                      DO    
 2459/DC0A : [2459]                              ENDIF
 2459/DC0A : [2459]                              ENDIF
 2460/DC0A : (MACRO)                    	TSTSTR	SYNTAX,','
 2460/DC0A : 99                                  DB     H(SYNTAX - TSTBITH)
 2460/DC0B : 42                                  DB     L(SYNTAX)
 2460/DC0C : 2C                                  DB     ','
 2461/DC0D : (MACRO)                    	ILCALL	REXPR
 2461/DC0D : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2461/DC0E : C6                                  DB     L(REXPR)
 2462/DC0F : (MACRO)                    	DO	FIX
 2462/DC0F : =>NOT BLANK                         IFNB   FIX
 2462/DC0F : EB                                   DB    H(FIX)
 2462/DC10 : 2F                                   DB    L(FIX)
 2462/DC11 :                                      SHIFT
 2462/DC11 :  (MACRO-2)                           DO    
 2462/DC11 : =>BLANK                             IFNB   
 2462/DC11 :                                      DB    H()
 2462/DC11 :                                      DB    L()
 2462/DC11 :                                      SHIFT
 2462/DC11 :                                      DO    
 2462/DC11 : [2462]                              ENDIF
 2462/DC11 : [2462]                              ENDIF
 2463/DC11 : (MACRO)                    	TSTSTR	SYNTAX,','
 2463/DC11 : 99                                  DB     H(SYNTAX - TSTBITH)
 2463/DC12 : 42                                  DB     L(SYNTAX)
 2463/DC13 : 2C                                  DB     ','
 2464/DC14 : (MACRO)                    	ILCALL	REXPR
 2464/DC14 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2464/DC15 : C6                                  DB     L(REXPR)
 2465/DC16 : (MACRO)                    	DO	FIX
 2465/DC16 : =>NOT BLANK                         IFNB   FIX
 2465/DC16 : EB                                   DB    H(FIX)
 2465/DC17 : 2F                                   DB    L(FIX)
 2465/DC18 :                                      SHIFT
 2465/DC18 :  (MACRO-2)                           DO    
 2465/DC18 : =>BLANK                             IFNB   
 2465/DC18 :                                      DB    H()
 2465/DC18 :                                      DB    L()
 2465/DC18 :                                      SHIFT
 2465/DC18 :                                      DO    
 2465/DC18 : [2465]                              ENDIF
 2465/DC18 : [2465]                              ENDIF
 2466/DC18 : (MACRO)                    	TSTSTR	ENDPAR,')'
 2466/DC18 : 99                                  DB     H(ENDPAR - TSTBITH)
 2466/DC19 : 2F                                  DB     L(ENDPAR)
 2466/DC1A : 29                                  DB     ')'
 2467/DC1B : (MACRO)                    	DO	MIDSTR
 2467/DC1B : =>NOT BLANK                         IFNB   MIDSTR
 2467/DC1B : EC                                   DB    H(MIDSTR)
 2467/DC1C : 41                                   DB    L(MIDSTR)
 2467/DC1D :                                      SHIFT
 2467/DC1D :  (MACRO-2)                           DO    
 2467/DC1D : =>BLANK                             IFNB   
 2467/DC1D :                                      DB    H()
 2467/DC1D :                                      DB    L()
 2467/DC1D :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 107 - 2024年05月30日 19時01分01秒


 2467/DC1D :                                      DO    
 2467/DC1D : [2467]                              ENDIF
 2467/DC1D : [2467]                              ENDIF
 2468/DC1D : (MACRO)                    STRF6:	TSTSTR	STRF8,T_RIGHT		; handle RIGHT$(x$,y)
 2468/DC1D : 9C                                  DB     H(STRF8 - TSTBITH)
 2468/DC1E : 4F                                  DB     L(STRF8)
 2468/DC1F : C8                                  DB     T_RIGHT
 2469/DC20 : (MACRO)                    	TSTSTR	SYNTAX,'('
 2469/DC20 : 99                                  DB     H(SYNTAX - TSTBITH)
 2469/DC21 : 42                                  DB     L(SYNTAX)
 2469/DC22 : 28                                  DB     '('
 2470/DC23 : (MACRO)                    	TSTSTR	STRF7,'"'
 2470/DC23 : 9C                                  DB     H(STRF7 - TSTBITH)
 2470/DC24 : 36                                  DB     L(STRF7)
 2470/DC25 : 22                                  DB     '"'
 2471/DC26 : (MACRO)                    	DO	STPNT
 2471/DC26 : =>NOT BLANK                         IFNB   STPNT
 2471/DC26 : E4                                   DB    H(STPNT)
 2471/DC27 : F4                                   DB    L(STPNT)
 2471/DC28 :                                      SHIFT
 2471/DC28 :  (MACRO-2)                           DO    
 2471/DC28 : =>BLANK                             IFNB   
 2471/DC28 :                                      DB    H()
 2471/DC28 :                                      DB    L()
 2471/DC28 :                                      SHIFT
 2471/DC28 :                                      DO    
 2471/DC28 : [2471]                              ENDIF
 2471/DC28 : [2471]                              ENDIF
 2472/DC28 : (MACRO)                    	TSTSTR	SYNTAX,','
 2472/DC28 : 99                                  DB     H(SYNTAX - TSTBITH)
 2472/DC29 : 42                                  DB     L(SYNTAX)
 2472/DC2A : 2C                                  DB     ','
 2473/DC2B : (MACRO)                    	ILCALL	REXPR
 2473/DC2B : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2473/DC2C : C6                                  DB     L(REXPR)
 2474/DC2D : (MACRO)                    	DO	FIX
 2474/DC2D : =>NOT BLANK                         IFNB   FIX
 2474/DC2D : EB                                   DB    H(FIX)
 2474/DC2E : 2F                                   DB    L(FIX)
 2474/DC2F :                                      SHIFT
 2474/DC2F :  (MACRO-2)                           DO    
 2474/DC2F : =>BLANK                             IFNB   
 2474/DC2F :                                      DB    H()
 2474/DC2F :                                      DB    L()
 2474/DC2F :                                      SHIFT
 2474/DC2F :                                      DO    
 2474/DC2F : [2474]                              ENDIF
 2474/DC2F : [2474]                              ENDIF
 2475/DC2F : (MACRO)                    	TSTSTR	ENDPAR,')'
 2475/DC2F : 99                                  DB     H(ENDPAR - TSTBITH)
 2475/DC30 : 2F                                  DB     L(ENDPAR)
 2475/DC31 : 29                                  DB     ')'
 2476/DC32 : (MACRO)                    	DO	XCHPNT
 2476/DC32 : =>NOT BLANK                         IFNB   XCHPNT
 2476/DC32 : E9                                   DB    H(XCHPNT)
 2476/DC33 : 1E                                   DB    L(XCHPNT)
 2476/DC34 :                                      SHIFT
 2476/DC34 :  (MACRO-2)                           DO    
 2476/DC34 : =>BLANK                             IFNB   
 2476/DC34 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 108 - 2024年05月30日 19時01分01秒


 2476/DC34 :                                      DB    L()
 2476/DC34 :                                      SHIFT
 2476/DC34 :                                      DO    
 2476/DC34 : [2476]                              ENDIF
 2476/DC34 : [2476]                              ENDIF
 2477/DC34 : (MACRO)                    	DO	RGHTST
 2477/DC34 : =>NOT BLANK                         IFNB   RGHTST
 2477/DC34 : EB                                   DB    H(RGHTST)
 2477/DC35 : D3                                   DB    L(RGHTST)
 2477/DC36 :                                      SHIFT
 2477/DC36 :  (MACRO-2)                           DO    
 2477/DC36 : =>BLANK                             IFNB   
 2477/DC36 :                                      DB    H()
 2477/DC36 :                                      DB    L()
 2477/DC36 :                                      SHIFT
 2477/DC36 :                                      DO    
 2477/DC36 : [2477]                              ENDIF
 2477/DC36 : [2477]                              ENDIF
 2478/DC36 : (MACRO)                    STRF7:	TSTVAR	SYNTAX
 2478/DC36 : B9                                  DB     H(SYNTAX - CALBITH)
 2478/DC37 : 42                                  DB     L(SYNTAX)
 2479/DC38 : (MACRO)                    	DO	FNDVAR
 2479/DC38 : =>NOT BLANK                         IFNB   FNDVAR
 2479/DC38 : E2                                   DB    H(FNDVAR)
 2479/DC39 : E1                                   DB    L(FNDVAR)
 2479/DC3A :                                      SHIFT
 2479/DC3A :  (MACRO-2)                           DO    
 2479/DC3A : =>BLANK                             IFNB   
 2479/DC3A :                                      DB    H()
 2479/DC3A :                                      DB    L()
 2479/DC3A :                                      SHIFT
 2479/DC3A :                                      DO    
 2479/DC3A : [2479]                              ENDIF
 2479/DC3A : [2479]                              ENDIF
 2480/DC3A : (MACRO)                    	DO	DEFVAR
 2480/DC3A : =>NOT BLANK                         IFNB   DEFVAR
 2480/DC3A : E5                                   DB    H(DEFVAR)
 2480/DC3B : 0E                                   DB    L(DEFVAR)
 2480/DC3C :                                      SHIFT
 2480/DC3C :  (MACRO-2)                           DO    
 2480/DC3C : =>BLANK                             IFNB   
 2480/DC3C :                                      DB    H()
 2480/DC3C :                                      DB    L()
 2480/DC3C :                                      SHIFT
 2480/DC3C :                                      DO    
 2480/DC3C : [2480]                              ENDIF
 2480/DC3C : [2480]                              ENDIF
 2481/DC3C : (MACRO)                    	TSTSTR	SYNTAX,'$'
 2481/DC3C : 99                                  DB     H(SYNTAX - TSTBITH)
 2481/DC3D : 42                                  DB     L(SYNTAX)
 2481/DC3E : 24                                  DB     '$'
 2482/DC3F : (MACRO)                    	DO	LDVAR
 2482/DC3F : =>NOT BLANK                         IFNB   LDVAR
 2482/DC3F : E8                                   DB    H(LDVAR)
 2482/DC40 : 15                                   DB    L(LDVAR)
 2482/DC41 :                                      SHIFT
 2482/DC41 :  (MACRO-2)                           DO    
 2482/DC41 : =>BLANK                             IFNB   
 2482/DC41 :                                      DB    H()
 2482/DC41 :                                      DB    L()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 109 - 2024年05月30日 19時01分01秒


 2482/DC41 :                                      SHIFT
 2482/DC41 :                                      DO    
 2482/DC41 : [2482]                              ENDIF
 2482/DC41 : [2482]                              ENDIF
 2483/DC41 : (MACRO)                    	DO	FIX
 2483/DC41 : =>NOT BLANK                         IFNB   FIX
 2483/DC41 : EB                                   DB    H(FIX)
 2483/DC42 : 2F                                   DB    L(FIX)
 2483/DC43 :                                      SHIFT
 2483/DC43 :  (MACRO-2)                           DO    
 2483/DC43 : =>BLANK                             IFNB   
 2483/DC43 :                                      DB    H()
 2483/DC43 :                                      DB    L()
 2483/DC43 :                                      SHIFT
 2483/DC43 :                                      DO    
 2483/DC43 : [2483]                              ENDIF
 2483/DC43 : [2483]                              ENDIF
 2484/DC43 : (MACRO)                    	TSTSTR	SYNTAX,','
 2484/DC43 : 99                                  DB     H(SYNTAX - TSTBITH)
 2484/DC44 : 42                                  DB     L(SYNTAX)
 2484/DC45 : 2C                                  DB     ','
 2485/DC46 : (MACRO)                    	ILCALL	REXPR
 2485/DC46 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2485/DC47 : C6                                  DB     L(REXPR)
 2486/DC48 : (MACRO)                    	DO	FIX
 2486/DC48 : =>NOT BLANK                         IFNB   FIX
 2486/DC48 : EB                                   DB    H(FIX)
 2486/DC49 : 2F                                   DB    L(FIX)
 2486/DC4A :                                      SHIFT
 2486/DC4A :  (MACRO-2)                           DO    
 2486/DC4A : =>BLANK                             IFNB   
 2486/DC4A :                                      DB    H()
 2486/DC4A :                                      DB    L()
 2486/DC4A :                                      SHIFT
 2486/DC4A :                                      DO    
 2486/DC4A : [2486]                              ENDIF
 2486/DC4A : [2486]                              ENDIF
 2487/DC4A : (MACRO)                    	TSTSTR	ENDPAR,')'
 2487/DC4A : 99                                  DB     H(ENDPAR - TSTBITH)
 2487/DC4B : 2F                                  DB     L(ENDPAR)
 2487/DC4C : 29                                  DB     ')'
 2488/DC4D : (MACRO)                    	DO	RGHSTR
 2488/DC4D : =>NOT BLANK                         IFNB   RGHSTR
 2488/DC4D : EC                                   DB    H(RGHSTR)
 2488/DC4E : 9E                                   DB    L(RGHSTR)
 2488/DC4F :                                      SHIFT
 2488/DC4F :  (MACRO-2)                           DO    
 2488/DC4F : =>BLANK                             IFNB   
 2488/DC4F :                                      DB    H()
 2488/DC4F :                                      DB    L()
 2488/DC4F :                                      SHIFT
 2488/DC4F :                                      DO    
 2488/DC4F : [2488]                              ENDIF
 2488/DC4F : [2488]                              ENDIF
 2489/DC4F : (MACRO)                    STRF8:	TSTSTR	STRF9,T_STR		; handle STR$(x)
 2489/DC4F : 9C                                  DB     H(STRF9 - TSTBITH)
 2489/DC50 : 5C                                  DB     L(STRF9)
 2489/DC51 : CA                                  DB     T_STR
 2490/DC52 : (MACRO)                    	ILCALL	SNGL
 2490/DC52 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 110 - 2024年05月30日 19時01分01秒


 2490/DC53 : 70                                  DB     L(SNGL)
 2491/DC54 : (MACRO)                    	DO	STACK
 2491/DC54 : =>NOT BLANK                         IFNB   STACK
 2491/DC54 : F2                                   DB    H(STACK)
 2491/DC55 : 8E                                   DB    L(STACK)
 2491/DC56 :                                      SHIFT
 2491/DC56 :  (MACRO-2)                           DO    
 2491/DC56 : =>BLANK                             IFNB   
 2491/DC56 :                                      DB    H()
 2491/DC56 :                                      DB    L()
 2491/DC56 :                                      SHIFT
 2491/DC56 :                                      DO    
 2491/DC56 : [2491]                              ENDIF
 2491/DC56 : [2491]                              ENDIF
 2492/DC56 : (MACRO)                    	DO	FNUM
 2492/DC56 : =>NOT BLANK                         IFNB   FNUM
 2492/DC56 : F2                                   DB    H(FNUM)
 2492/DC57 : 9A                                   DB    L(FNUM)
 2492/DC58 :                                      SHIFT
 2492/DC58 :  (MACRO-2)                           DO    
 2492/DC58 : =>BLANK                             IFNB   
 2492/DC58 :                                      DB    H()
 2492/DC58 :                                      DB    L()
 2492/DC58 :                                      SHIFT
 2492/DC58 :                                      DO    
 2492/DC58 : [2492]                              ENDIF
 2492/DC58 : [2492]                              ENDIF
 2493/DC58 : (MACRO)                    	DO	FSTRNG
 2493/DC58 : =>NOT BLANK                         IFNB   FSTRNG
 2493/DC58 : ED                                   DB    H(FSTRNG)
 2493/DC59 : 18                                   DB    L(FSTRNG)
 2493/DC5A :                                      SHIFT
 2493/DC5A :  (MACRO-2)                           DO    
 2493/DC5A : =>BLANK                             IFNB   
 2493/DC5A :                                      DB    H()
 2493/DC5A :                                      DB    L()
 2493/DC5A :                                      SHIFT
 2493/DC5A :                                      DO    
 2493/DC5A : [2493]                              ENDIF
 2493/DC5A : [2493]                              ENDIF
 2494/DC5A : (MACRO)                    	DO	STBCK
 2494/DC5A : =>NOT BLANK                         IFNB   STBCK
 2494/DC5A : E6                                   DB    H(STBCK)
 2494/DC5B : 74                                   DB    L(STBCK)
 2494/DC5C :                                      SHIFT
 2494/DC5C :  (MACRO-2)                           DO    
 2494/DC5C : =>BLANK                             IFNB   
 2494/DC5C :                                      DB    H()
 2494/DC5C :                                      DB    L()
 2494/DC5C :                                      SHIFT
 2494/DC5C :                                      DO    
 2494/DC5C : [2494]                              ENDIF
 2494/DC5C : [2494]                              ENDIF
 2495/DC5C : (MACRO)                    STRF9:	TSTSTR	STRF10,T_VER		; handle VER$
 2495/DC5C : 9C                                  DB     H(STRF10 - TSTBITH)
 2495/DC5D : 63                                  DB     L(STRF10)
 2495/DC5E : CD                                  DB     T_VER
 2496/DC5F : (MACRO)                    	DO	LDVER
 2496/DC5F : =>NOT BLANK                         IFNB   LDVER
 2496/DC5F : E8                                   DB    H(LDVER)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 111 - 2024年05月30日 19時01分01秒


 2496/DC60 : 3B                                   DB    L(LDVER)
 2496/DC61 :                                      SHIFT
 2496/DC61 :  (MACRO-2)                           DO    
 2496/DC61 : =>BLANK                             IFNB   
 2496/DC61 :                                      DB    H()
 2496/DC61 :                                      DB    L()
 2496/DC61 :                                      SHIFT
 2496/DC61 :                                      DO    
 2496/DC61 : [2496]                              ENDIF
 2496/DC61 : [2496]                              ENDIF
 2497/DC61 : (MACRO)                    	DO	MOVSTR
 2497/DC61 : =>NOT BLANK                         IFNB   MOVSTR
 2497/DC61 : EC                                   DB    H(MOVSTR)
 2497/DC62 : E4                                   DB    L(MOVSTR)
 2497/DC63 :                                      SHIFT
 2497/DC63 :  (MACRO-2)                           DO    
 2497/DC63 : =>BLANK                             IFNB   
 2497/DC63 :                                      DB    H()
 2497/DC63 :                                      DB    L()
 2497/DC63 :                                      SHIFT
 2497/DC63 :                                      DO    
 2497/DC63 : [2497]                              ENDIF
 2497/DC63 : [2497]                              ENDIF
 2498/DC63 : (MACRO)                    STRF10:	TSTVAR	SYNTAX			; test for variable
 2498/DC63 : B9                                  DB     H(SYNTAX - CALBITH)
 2498/DC64 : 42                                  DB     L(SYNTAX)
 2499/DC65 : (MACRO)                    	DO	FNDVAR
 2499/DC65 : =>NOT BLANK                         IFNB   FNDVAR
 2499/DC65 : E2                                   DB    H(FNDVAR)
 2499/DC66 : E1                                   DB    L(FNDVAR)
 2499/DC67 :                                      SHIFT
 2499/DC67 :  (MACRO-2)                           DO    
 2499/DC67 : =>BLANK                             IFNB   
 2499/DC67 :                                      DB    H()
 2499/DC67 :                                      DB    L()
 2499/DC67 :                                      SHIFT
 2499/DC67 :                                      DO    
 2499/DC67 : [2499]                              ENDIF
 2499/DC67 : [2499]                              ENDIF
 2500/DC67 : (MACRO)                    	DO	DEFVAR
 2500/DC67 : =>NOT BLANK                         IFNB   DEFVAR
 2500/DC67 : E5                                   DB    H(DEFVAR)
 2500/DC68 : 0E                                   DB    L(DEFVAR)
 2500/DC69 :                                      SHIFT
 2500/DC69 :  (MACRO-2)                           DO    
 2500/DC69 : =>BLANK                             IFNB   
 2500/DC69 :                                      DB    H()
 2500/DC69 :                                      DB    L()
 2500/DC69 :                                      SHIFT
 2500/DC69 :                                      DO    
 2500/DC69 : [2500]                              ENDIF
 2500/DC69 : [2500]                              ENDIF
 2501/DC69 : (MACRO)                    	TSTSTR	SYNTAX,'$'
 2501/DC69 : 99                                  DB     H(SYNTAX - TSTBITH)
 2501/DC6A : 42                                  DB     L(SYNTAX)
 2501/DC6B : 24                                  DB     '$'
 2502/DC6C : (MACRO)                    	DO	LDVAR
 2502/DC6C : =>NOT BLANK                         IFNB   LDVAR
 2502/DC6C : E8                                   DB    H(LDVAR)
 2502/DC6D : 15                                   DB    L(LDVAR)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 112 - 2024年05月30日 19時01分01秒


 2502/DC6E :                                      SHIFT
 2502/DC6E :  (MACRO-2)                           DO    
 2502/DC6E : =>BLANK                             IFNB   
 2502/DC6E :                                      DB    H()
 2502/DC6E :                                      DB    L()
 2502/DC6E :                                      SHIFT
 2502/DC6E :                                      DO    
 2502/DC6E : [2502]                              ENDIF
 2502/DC6E : [2502]                              ENDIF
 2503/DC6E : (MACRO)                    	DO	FIX
 2503/DC6E : =>NOT BLANK                         IFNB   FIX
 2503/DC6E : EB                                   DB    H(FIX)
 2503/DC6F : 2F                                   DB    L(FIX)
 2503/DC70 :                                      SHIFT
 2503/DC70 :  (MACRO-2)                           DO    
 2503/DC70 : =>BLANK                             IFNB   
 2503/DC70 :                                      DB    H()
 2503/DC70 :                                      DB    L()
 2503/DC70 :                                      SHIFT
 2503/DC70 :                                      DO    
 2503/DC70 : [2503]                              ENDIF
 2503/DC70 : [2503]                              ENDIF
 2504/DC70 : (MACRO)                    	DO	MOVSTR
 2504/DC70 : =>NOT BLANK                         IFNB   MOVSTR
 2504/DC70 : EC                                   DB    H(MOVSTR)
 2504/DC71 : E4                                   DB    L(MOVSTR)
 2504/DC72 :                                      SHIFT
 2504/DC72 :  (MACRO-2)                           DO    
 2504/DC72 : =>BLANK                             IFNB   
 2504/DC72 :                                      DB    H()
 2504/DC72 :                                      DB    L()
 2504/DC72 :                                      SHIFT
 2504/DC72 :                                      DO    
 2504/DC72 : [2504]                              ENDIF
 2504/DC72 : [2504]                              ENDIF
 2505/DC72 : (MACRO)                    RELSTR:	DO	STRPNT
 2505/DC72 : =>NOT BLANK                         IFNB   STRPNT
 2505/DC72 : ED                                   DB    H(STRPNT)
 2505/DC73 : 42                                   DB    L(STRPNT)
 2505/DC74 :                                      SHIFT
 2505/DC74 :  (MACRO-2)                           DO    
 2505/DC74 : =>BLANK                             IFNB   
 2505/DC74 :                                      DB    H()
 2505/DC74 :                                      DB    L()
 2505/DC74 :                                      SHIFT
 2505/DC74 :                                      DO    
 2505/DC74 : [2505]                              ENDIF
 2505/DC74 : [2505]                              ENDIF
 2506/DC74 : (MACRO)                    	TSTVAR	RELEXP
 2506/DC74 : BC                                  DB     H(RELEXP - CALBITH)
 2506/DC75 : 9A                                  DB     L(RELEXP)
 2507/DC76 : (MACRO)                    	DO	FNDVAR
 2507/DC76 : =>NOT BLANK                         IFNB   FNDVAR
 2507/DC76 : E2                                   DB    H(FNDVAR)
 2507/DC77 : E1                                   DB    L(FNDVAR)
 2507/DC78 :                                      SHIFT
 2507/DC78 :  (MACRO-2)                           DO    
 2507/DC78 : =>BLANK                             IFNB   
 2507/DC78 :                                      DB    H()
 2507/DC78 :                                      DB    L()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 113 - 2024年05月30日 19時01分01秒


 2507/DC78 :                                      SHIFT
 2507/DC78 :                                      DO    
 2507/DC78 : [2507]                              ENDIF
 2507/DC78 : [2507]                              ENDIF
 2508/DC78 : (MACRO)                    	DO	POPDLR
 2508/DC78 : =>NOT BLANK                         IFNB   POPDLR
 2508/DC78 : FD                                   DB    H(POPDLR)
 2508/DC79 : 90                                   DB    L(POPDLR)
 2508/DC7A :                                      SHIFT
 2508/DC7A :  (MACRO-2)                           DO    
 2508/DC7A : =>BLANK                             IFNB   
 2508/DC7A :                                      DB    H()
 2508/DC7A :                                      DB    L()
 2508/DC7A :                                      SHIFT
 2508/DC7A :                                      DO    
 2508/DC7A : [2508]                              ENDIF
 2508/DC7A : [2508]                              ENDIF
 2509/DC7A : (MACRO)                    	TSTSTR	RELXPR,'$'
 2509/DC7A : 9C                                  DB     H(RELXPR - TSTBITH)
 2509/DC7B : 98                                  DB     L(RELXPR)
 2509/DC7C : 24                                  DB     '$'
 2510/DC7D : (MACRO)                    	DO	LDVAR
 2510/DC7D : =>NOT BLANK                         IFNB   LDVAR
 2510/DC7D : E8                                   DB    H(LDVAR)
 2510/DC7E : 15                                   DB    L(LDVAR)
 2510/DC7F :                                      SHIFT
 2510/DC7F :  (MACRO-2)                           DO    
 2510/DC7F : =>BLANK                             IFNB   
 2510/DC7F :                                      DB    H()
 2510/DC7F :                                      DB    L()
 2510/DC7F :                                      SHIFT
 2510/DC7F :                                      DO    
 2510/DC7F : [2510]                              ENDIF
 2510/DC7F : [2510]                              ENDIF
 2511/DC7F : (MACRO)                    	DO	FIX
 2511/DC7F : =>NOT BLANK                         IFNB   FIX
 2511/DC7F : EB                                   DB    H(FIX)
 2511/DC80 : 2F                                   DB    L(FIX)
 2511/DC81 :                                      SHIFT
 2511/DC81 :  (MACRO-2)                           DO    
 2511/DC81 : =>BLANK                             IFNB   
 2511/DC81 :                                      DB    H()
 2511/DC81 :                                      DB    L()
 2511/DC81 :                                      SHIFT
 2511/DC81 :                                      DO    
 2511/DC81 : [2511]                              ENDIF
 2511/DC81 : [2511]                              ENDIF
 2512/DC81 : (MACRO)                    	TSTSTR	SYNTAX,'='
 2512/DC81 : 99                                  DB     H(SYNTAX - TSTBITH)
 2512/DC82 : 42                                  DB     L(SYNTAX)
 2512/DC83 : 3D                                  DB     '='
 2513/DC84 : (MACRO)                    	TSTSTR	RESTR,'"'
 2513/DC84 : 9C                                  DB     H(RESTR - TSTBITH)
 2513/DC85 : 89                                  DB     L(RESTR)
 2513/DC86 : 22                                  DB     '"'
 2514/DC87 : (MACRO)                    	DO	CMPRST
 2514/DC87 : =>NOT BLANK                         IFNB   CMPRST
 2514/DC87 : ED                                   DB    H(CMPRST)
 2514/DC88 : 4C                                   DB    L(CMPRST)
 2514/DC89 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 114 - 2024年05月30日 19時01分01秒


 2514/DC89 :  (MACRO-2)                           DO    
 2514/DC89 : =>BLANK                             IFNB   
 2514/DC89 :                                      DB    H()
 2514/DC89 :                                      DB    L()
 2514/DC89 :                                      SHIFT
 2514/DC89 :                                      DO    
 2514/DC89 : [2514]                              ENDIF
 2514/DC89 : [2514]                              ENDIF
 2515/DC89 : (MACRO)                    RESTR:	TSTVAR	SYNTAX
 2515/DC89 : B9                                  DB     H(SYNTAX - CALBITH)
 2515/DC8A : 42                                  DB     L(SYNTAX)
 2516/DC8B : (MACRO)                    	DO	FNDVAR
 2516/DC8B : =>NOT BLANK                         IFNB   FNDVAR
 2516/DC8B : E2                                   DB    H(FNDVAR)
 2516/DC8C : E1                                   DB    L(FNDVAR)
 2516/DC8D :                                      SHIFT
 2516/DC8D :  (MACRO-2)                           DO    
 2516/DC8D : =>BLANK                             IFNB   
 2516/DC8D :                                      DB    H()
 2516/DC8D :                                      DB    L()
 2516/DC8D :                                      SHIFT
 2516/DC8D :                                      DO    
 2516/DC8D : [2516]                              ENDIF
 2516/DC8D : [2516]                              ENDIF
 2517/DC8D : (MACRO)                    	DO	DEFVAR
 2517/DC8D : =>NOT BLANK                         IFNB   DEFVAR
 2517/DC8D : E5                                   DB    H(DEFVAR)
 2517/DC8E : 0E                                   DB    L(DEFVAR)
 2517/DC8F :                                      SHIFT
 2517/DC8F :  (MACRO-2)                           DO    
 2517/DC8F : =>BLANK                             IFNB   
 2517/DC8F :                                      DB    H()
 2517/DC8F :                                      DB    L()
 2517/DC8F :                                      SHIFT
 2517/DC8F :                                      DO    
 2517/DC8F : [2517]                              ENDIF
 2517/DC8F : [2517]                              ENDIF
 2518/DC8F : (MACRO)                    	TSTSTR	SYNTAX,'$'
 2518/DC8F : 99                                  DB     H(SYNTAX - TSTBITH)
 2518/DC90 : 42                                  DB     L(SYNTAX)
 2518/DC91 : 24                                  DB     '$'
 2519/DC92 : (MACRO)                    	DO	LDVAR
 2519/DC92 : =>NOT BLANK                         IFNB   LDVAR
 2519/DC92 : E8                                   DB    H(LDVAR)
 2519/DC93 : 15                                   DB    L(LDVAR)
 2519/DC94 :                                      SHIFT
 2519/DC94 :  (MACRO-2)                           DO    
 2519/DC94 : =>BLANK                             IFNB   
 2519/DC94 :                                      DB    H()
 2519/DC94 :                                      DB    L()
 2519/DC94 :                                      SHIFT
 2519/DC94 :                                      DO    
 2519/DC94 : [2519]                              ENDIF
 2519/DC94 : [2519]                              ENDIF
 2520/DC94 : (MACRO)                    	DO	FIX
 2520/DC94 : =>NOT BLANK                         IFNB   FIX
 2520/DC94 : EB                                   DB    H(FIX)
 2520/DC95 : 2F                                   DB    L(FIX)
 2520/DC96 :                                      SHIFT
 2520/DC96 :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 115 - 2024年05月30日 19時01分01秒


 2520/DC96 : =>BLANK                             IFNB   
 2520/DC96 :                                      DB    H()
 2520/DC96 :                                      DB    L()
 2520/DC96 :                                      SHIFT
 2520/DC96 :                                      DO    
 2520/DC96 : [2520]                              ENDIF
 2520/DC96 : [2520]                              ENDIF
 2521/DC96 : (MACRO)                    	DO	CMPSTR
 2521/DC96 : =>NOT BLANK                         IFNB   CMPSTR
 2521/DC96 : ED                                   DB    H(CMPSTR)
 2521/DC97 : 81                                   DB    L(CMPSTR)
 2521/DC98 :                                      SHIFT
 2521/DC98 :  (MACRO-2)                           DO    
 2521/DC98 : =>BLANK                             IFNB   
 2521/DC98 :                                      DB    H()
 2521/DC98 :                                      DB    L()
 2521/DC98 :                                      SHIFT
 2521/DC98 :                                      DO    
 2521/DC98 : [2521]                              ENDIF
 2521/DC98 : [2521]                              ENDIF
 2522/DC98 : (MACRO)                    RELXPR:	DO	XCHPNT
 2522/DC98 : =>NOT BLANK                         IFNB   XCHPNT
 2522/DC98 : E9                                   DB    H(XCHPNT)
 2522/DC99 : 1E                                   DB    L(XCHPNT)
 2522/DC9A :                                      SHIFT
 2522/DC9A :  (MACRO-2)                           DO    
 2522/DC9A : =>BLANK                             IFNB   
 2522/DC9A :                                      DB    H()
 2522/DC9A :                                      DB    L()
 2522/DC9A :                                      SHIFT
 2522/DC9A :                                      DO    
 2522/DC9A : [2522]                              ENDIF
 2522/DC9A : [2522]                              ENDIF
 2523/DC9A : (MACRO)                    RELEXP:	ILCALL	REXPR
 2523/DC9A : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2523/DC9B : C6                                  DB     L(REXPR)
 2524/DC9C : (MACRO)                    	TSTSTR	REL1,'='
 2524/DC9C : 9C                                  DB     H(REL1 - TSTBITH)
 2524/DC9D : A3                                  DB     L(REL1)
 2524/DC9E : 3D                                  DB     '='
 2525/DC9F : (MACRO)                    	ILCALL	REXPR
 2525/DC9F : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2525/DCA0 : C6                                  DB     L(REXPR)
 2526/DCA1 : (MACRO)                    	DO	EQU
 2526/DCA1 : =>NOT BLANK                         IFNB   EQU
 2526/DCA1 : E5                                   DB    H(EQU)
 2526/DCA2 : DC                                   DB    L(EQU)
 2526/DCA3 :                                      SHIFT
 2526/DCA3 :  (MACRO-2)                           DO    
 2526/DCA3 : =>BLANK                             IFNB   
 2526/DCA3 :                                      DB    H()
 2526/DCA3 :                                      DB    L()
 2526/DCA3 :                                      SHIFT
 2526/DCA3 :                                      DO    
 2526/DCA3 : [2526]                              ENDIF
 2526/DCA3 : [2526]                              ENDIF
 2527/DCA3 : (MACRO)                    REL1:	TSTSTR	REL2,T_NE		; handle <>
 2527/DCA3 : 9C                                  DB     H(REL2 - TSTBITH)
 2527/DCA4 : AA                                  DB     L(REL2)
 2527/DCA5 : AB                                  DB     T_NE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 116 - 2024年05月30日 19時01分01秒


 2528/DCA6 : (MACRO)                    	ILCALL	REXPR
 2528/DCA6 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2528/DCA7 : C6                                  DB     L(REXPR)
 2529/DCA8 : (MACRO)                    	DO	NEQ
 2529/DCA8 : =>NOT BLANK                         IFNB   NEQ
 2529/DCA8 : E5                                   DB    H(NEQ)
 2529/DCA9 : E0                                   DB    L(NEQ)
 2529/DCAA :                                      SHIFT
 2529/DCAA :  (MACRO-2)                           DO    
 2529/DCAA : =>BLANK                             IFNB   
 2529/DCAA :                                      DB    H()
 2529/DCAA :                                      DB    L()
 2529/DCAA :                                      SHIFT
 2529/DCAA :                                      DO    
 2529/DCAA : [2529]                              ENDIF
 2529/DCAA : [2529]                              ENDIF
 2530/DCAA : (MACRO)                    REL2:	TSTSTR	REL3,'<'		; handle <
 2530/DCAA : 9C                                  DB     H(REL3 - TSTBITH)
 2530/DCAB : B1                                  DB     L(REL3)
 2530/DCAC : 3C                                  DB     '<'
 2531/DCAD : (MACRO)                    	ILCALL	REXPR
 2531/DCAD : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2531/DCAE : C6                                  DB     L(REXPR)
 2532/DCAF : (MACRO)                    	DO	LSS
 2532/DCAF : =>NOT BLANK                         IFNB   LSS
 2532/DCAF : E5                                   DB    H(LSS)
 2532/DCB0 : E4                                   DB    L(LSS)
 2532/DCB1 :                                      SHIFT
 2532/DCB1 :  (MACRO-2)                           DO    
 2532/DCB1 : =>BLANK                             IFNB   
 2532/DCB1 :                                      DB    H()
 2532/DCB1 :                                      DB    L()
 2532/DCB1 :                                      SHIFT
 2532/DCB1 :                                      DO    
 2532/DCB1 : [2532]                              ENDIF
 2532/DCB1 : [2532]                              ENDIF
 2533/DCB1 : (MACRO)                    REL3:	TSTSTR	REL4,T_LE		; handle <=
 2533/DCB1 : 9C                                  DB     H(REL4 - TSTBITH)
 2533/DCB2 : B8                                  DB     L(REL4)
 2533/DCB3 : A9                                  DB     T_LE
 2534/DCB4 : (MACRO)                    	ILCALL	REXPR
 2534/DCB4 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2534/DCB5 : C6                                  DB     L(REXPR)
 2535/DCB6 : (MACRO)                    	DO	LEQ
 2535/DCB6 : =>NOT BLANK                         IFNB   LEQ
 2535/DCB6 : E5                                   DB    H(LEQ)
 2535/DCB7 : E8                                   DB    L(LEQ)
 2535/DCB8 :                                      SHIFT
 2535/DCB8 :  (MACRO-2)                           DO    
 2535/DCB8 : =>BLANK                             IFNB   
 2535/DCB8 :                                      DB    H()
 2535/DCB8 :                                      DB    L()
 2535/DCB8 :                                      SHIFT
 2535/DCB8 :                                      DO    
 2535/DCB8 : [2535]                              ENDIF
 2535/DCB8 : [2535]                              ENDIF
 2536/DCB8 : (MACRO)                    REL4:	TSTSTR	REL5,'>'		; handle >
 2536/DCB8 : 9C                                  DB     H(REL5 - TSTBITH)
 2536/DCB9 : BF                                  DB     L(REL5)
 2536/DCBA : 3E                                  DB     '>'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 117 - 2024年05月30日 19時01分01秒


 2537/DCBB : (MACRO)                    	ILCALL	REXPR
 2537/DCBB : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2537/DCBC : C6                                  DB     L(REXPR)
 2538/DCBD : (MACRO)                    	DO	GTR
 2538/DCBD : =>NOT BLANK                         IFNB   GTR
 2538/DCBD : E5                                   DB    H(GTR)
 2538/DCBE : EC                                   DB    L(GTR)
 2538/DCBF :                                      SHIFT
 2538/DCBF :  (MACRO-2)                           DO    
 2538/DCBF : =>BLANK                             IFNB   
 2538/DCBF :                                      DB    H()
 2538/DCBF :                                      DB    L()
 2538/DCBF :                                      SHIFT
 2538/DCBF :                                      DO    
 2538/DCBF : [2538]                              ENDIF
 2538/DCBF : [2538]                              ENDIF
 2539/DCBF : (MACRO)                    REL5:	TSTSTR	RTRN,T_GE		; handle >=
 2539/DCBF : 9D                                  DB     H(RTRN - TSTBITH)
 2539/DCC0 : 78                                  DB     L(RTRN)
 2539/DCC1 : AA                                  DB     T_GE
 2540/DCC2 : (MACRO)                    	ILCALL	REXPR
 2540/DCC2 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2540/DCC3 : C6                                  DB     L(REXPR)
 2541/DCC4 : (MACRO)                    	DO	GEQ
 2541/DCC4 : =>NOT BLANK                         IFNB   GEQ
 2541/DCC4 : E5                                   DB    H(GEQ)
 2541/DCC5 : F0                                   DB    L(GEQ)
 2541/DCC6 :                                      SHIFT
 2541/DCC6 :  (MACRO-2)                           DO    
 2541/DCC6 : =>BLANK                             IFNB   
 2541/DCC6 :                                      DB    H()
 2541/DCC6 :                                      DB    L()
 2541/DCC6 :                                      SHIFT
 2541/DCC6 :                                      DO    
 2541/DCC6 : [2541]                              ENDIF
 2541/DCC6 : [2541]                              ENDIF
 2542/DCC6 : (MACRO)                    REXPR:	TSTSTR	REX1,'-'		; handle - (subtraction)
 2542/DCC6 : 9C                                  DB     H(REX1 - TSTBITH)
 2542/DCC7 : D3                                  DB     L(REX1)
 2542/DCC8 : 2D                                  DB     '-'
 2543/DCC9 : (MACRO)                    	ILCALL	RTERM
 2543/DCC9 : 1D                                  DB     H(RTERM - (JMPBITH + TSTBITH))
 2543/DCCA : 10                                  DB     L(RTERM)
 2544/DCCB : (MACRO)                    	DO	STACK
 2544/DCCB : =>NOT BLANK                         IFNB   STACK
 2544/DCCB : F2                                   DB    H(STACK)
 2544/DCCC : 8E                                   DB    L(STACK)
 2544/DCCD :                                      SHIFT
 2544/DCCD :  (MACRO-2)                           DO    
 2544/DCCD : =>BLANK                             IFNB   
 2544/DCCD :                                      DB    H()
 2544/DCCD :                                      DB    L()
 2544/DCCD :                                      SHIFT
 2544/DCCD :                                      DO    
 2544/DCCD : [2544]                              ENDIF
 2544/DCCD : [2544]                              ENDIF
 2545/DCCD : (MACRO)                    	DO	FNEG
 2545/DCCD : =>NOT BLANK                         IFNB   FNEG
 2545/DCCD : F1                                   DB    H(FNEG)
 2545/DCCE : AC                                   DB    L(FNEG)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 118 - 2024年05月30日 19時01分01秒


 2545/DCCF :                                      SHIFT
 2545/DCCF :  (MACRO-2)                           DO    
 2545/DCCF : =>BLANK                             IFNB   
 2545/DCCF :                                      DB    H()
 2545/DCCF :                                      DB    L()
 2545/DCCF :                                      SHIFT
 2545/DCCF :                                      DO    
 2545/DCCF : [2545]                              ENDIF
 2545/DCCF : [2545]                              ENDIF
 2546/DCCF : (MACRO)                    	DO	STBACK
 2546/DCCF : =>NOT BLANK                         IFNB   STBACK
 2546/DCCF : FF                                   DB    H(STBACK)
 2546/DCD0 : 80                                   DB    L(STBACK)
 2546/DCD1 :                                      SHIFT
 2546/DCD1 :  (MACRO-2)                           DO    
 2546/DCD1 : =>BLANK                             IFNB   
 2546/DCD1 :                                      DB    H()
 2546/DCD1 :                                      DB    L()
 2546/DCD1 :                                      SHIFT
 2546/DCD1 :                                      DO    
 2546/DCD1 : [2546]                              ENDIF
 2546/DCD1 : [2546]                              ENDIF
 2547/DCD1 : (MACRO)                    	GOTO	REX3
 2547/DCD1 : 5C                                  DB     H(REX3 - JMPBITH)
 2547/DCD2 : D8                                  DB     L(REX3)
 2548/DCD3 : (MACRO)                    REX1:	TSTSTR	REX2,'+'
 2548/DCD3 : 9C                                  DB     H(REX2 - TSTBITH)
 2548/DCD4 : D6                                  DB     L(REX2)
 2548/DCD5 : 2B                                  DB     '+'
 2549/DCD6 : (MACRO)                    REX2:	ILCALL	RTERM
 2549/DCD6 : 1D                                  DB     H(RTERM - (JMPBITH + TSTBITH))
 2549/DCD7 : 10                                  DB     L(RTERM)
 2550/DCD8 : (MACRO)                    REX3:	TSTSTR	REX4,'-'
 2550/DCD8 : 9C                                  DB     H(REX4 - TSTBITH)
 2550/DCD9 : E5                                  DB     L(REX4)
 2550/DCDA : 2D                                  DB     '-'
 2551/DCDB : (MACRO)                    	ILCALL	RTERM
 2551/DCDB : 1D                                  DB     H(RTERM - (JMPBITH + TSTBITH))
 2551/DCDC : 10                                  DB     L(RTERM)
 2552/DCDD : (MACRO)                    	DO	STACK
 2552/DCDD : =>NOT BLANK                         IFNB   STACK
 2552/DCDD : F2                                   DB    H(STACK)
 2552/DCDE : 8E                                   DB    L(STACK)
 2552/DCDF :                                      SHIFT
 2552/DCDF :  (MACRO-2)                           DO    
 2552/DCDF : =>BLANK                             IFNB   
 2552/DCDF :                                      DB    H()
 2552/DCDF :                                      DB    L()
 2552/DCDF :                                      SHIFT
 2552/DCDF :                                      DO    
 2552/DCDF : [2552]                              ENDIF
 2552/DCDF : [2552]                              ENDIF
 2553/DCDF : (MACRO)                    	DO	FSUB
 2553/DCDF : =>NOT BLANK                         IFNB   FSUB
 2553/DCDF : F1                                   DB    H(FSUB)
 2553/DCE0 : 39                                   DB    L(FSUB)
 2553/DCE1 :                                      SHIFT
 2553/DCE1 :  (MACRO-2)                           DO    
 2553/DCE1 : =>BLANK                             IFNB   
 2553/DCE1 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 119 - 2024年05月30日 19時01分01秒


 2553/DCE1 :                                      DB    L()
 2553/DCE1 :                                      SHIFT
 2553/DCE1 :                                      DO    
 2553/DCE1 : [2553]                              ENDIF
 2553/DCE1 : [2553]                              ENDIF
 2554/DCE1 : (MACRO)                    	DO	STBACK
 2554/DCE1 : =>NOT BLANK                         IFNB   STBACK
 2554/DCE1 : FF                                   DB    H(STBACK)
 2554/DCE2 : 80                                   DB    L(STBACK)
 2554/DCE3 :                                      SHIFT
 2554/DCE3 :  (MACRO-2)                           DO    
 2554/DCE3 : =>BLANK                             IFNB   
 2554/DCE3 :                                      DB    H()
 2554/DCE3 :                                      DB    L()
 2554/DCE3 :                                      SHIFT
 2554/DCE3 :                                      DO    
 2554/DCE3 : [2554]                              ENDIF
 2554/DCE3 : [2554]                              ENDIF
 2555/DCE3 : (MACRO)                    	GOTO	REX3
 2555/DCE3 : 5C                                  DB     H(REX3 - JMPBITH)
 2555/DCE4 : D8                                  DB     L(REX3)
 2556/DCE5 : (MACRO)                    REX4:	TSTSTR	REX5,'+'		; handle + (addition)
 2556/DCE5 : 9C                                  DB     H(REX5 - TSTBITH)
 2556/DCE6 : F2                                  DB     L(REX5)
 2556/DCE7 : 2B                                  DB     '+'
 2557/DCE8 : (MACRO)                    	ILCALL	RTERM
 2557/DCE8 : 1D                                  DB     H(RTERM - (JMPBITH + TSTBITH))
 2557/DCE9 : 10                                  DB     L(RTERM)
 2558/DCEA : (MACRO)                    	DO	STACK
 2558/DCEA : =>NOT BLANK                         IFNB   STACK
 2558/DCEA : F2                                   DB    H(STACK)
 2558/DCEB : 8E                                   DB    L(STACK)
 2558/DCEC :                                      SHIFT
 2558/DCEC :  (MACRO-2)                           DO    
 2558/DCEC : =>BLANK                             IFNB   
 2558/DCEC :                                      DB    H()
 2558/DCEC :                                      DB    L()
 2558/DCEC :                                      SHIFT
 2558/DCEC :                                      DO    
 2558/DCEC : [2558]                              ENDIF
 2558/DCEC : [2558]                              ENDIF
 2559/DCEC : (MACRO)                    	DO	FADD
 2559/DCEC : =>NOT BLANK                         IFNB   FADD
 2559/DCEC : F1                                   DB    H(FADD)
 2559/DCED : 3C                                   DB    L(FADD)
 2559/DCEE :                                      SHIFT
 2559/DCEE :  (MACRO-2)                           DO    
 2559/DCEE : =>BLANK                             IFNB   
 2559/DCEE :                                      DB    H()
 2559/DCEE :                                      DB    L()
 2559/DCEE :                                      SHIFT
 2559/DCEE :                                      DO    
 2559/DCEE : [2559]                              ENDIF
 2559/DCEE : [2559]                              ENDIF
 2560/DCEE : (MACRO)                    	DO	STBACK
 2560/DCEE : =>NOT BLANK                         IFNB   STBACK
 2560/DCEE : FF                                   DB    H(STBACK)
 2560/DCEF : 80                                   DB    L(STBACK)
 2560/DCF0 :                                      SHIFT
 2560/DCF0 :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 120 - 2024年05月30日 19時01分01秒


 2560/DCF0 : =>BLANK                             IFNB   
 2560/DCF0 :                                      DB    H()
 2560/DCF0 :                                      DB    L()
 2560/DCF0 :                                      SHIFT
 2560/DCF0 :                                      DO    
 2560/DCF0 : [2560]                              ENDIF
 2560/DCF0 : [2560]                              ENDIF
 2561/DCF0 : (MACRO)                    	GOTO	REX3
 2561/DCF0 : 5C                                  DB     H(REX3 - JMPBITH)
 2561/DCF1 : D8                                  DB     L(REX3)
 2562/DCF2 : (MACRO)                    REX5:	TSTSTR	REX6,T_EXOR		; handle ^ (EXOR)
 2562/DCF2 : 9D                                  DB     H(REX6 - TSTBITH)
 2562/DCF3 : 01                                  DB     L(REX6)
 2562/DCF4 : A5                                  DB     T_EXOR
 2563/DCF5 : (MACRO)                    	ILCALL	RTERM
 2563/DCF5 : 1D                                  DB     H(RTERM - (JMPBITH + TSTBITH))
 2563/DCF6 : 10                                  DB     L(RTERM)
 2564/DCF7 : (MACRO)                    	DO	STACK
 2564/DCF7 : =>NOT BLANK                         IFNB   STACK
 2564/DCF7 : F2                                   DB    H(STACK)
 2564/DCF8 : 8E                                   DB    L(STACK)
 2564/DCF9 :                                      SHIFT
 2564/DCF9 :  (MACRO-2)                           DO    
 2564/DCF9 : =>BLANK                             IFNB   
 2564/DCF9 :                                      DB    H()
 2564/DCF9 :                                      DB    L()
 2564/DCF9 :                                      SHIFT
 2564/DCF9 :                                      DO    
 2564/DCF9 : [2564]                              ENDIF
 2564/DCF9 : [2564]                              ENDIF
 2565/DCF9 : (MACRO)                    	DO	ALGEXP
 2565/DCF9 : =>NOT BLANK                         IFNB   ALGEXP
 2565/DCF9 : F2                                   DB    H(ALGEXP)
 2565/DCFA : 59                                   DB    L(ALGEXP)
 2565/DCFB :                                      SHIFT
 2565/DCFB :  (MACRO-2)                           DO    
 2565/DCFB : =>BLANK                             IFNB   
 2565/DCFB :                                      DB    H()
 2565/DCFB :                                      DB    L()
 2565/DCFB :                                      SHIFT
 2565/DCFB :                                      DO    
 2565/DCFB : [2565]                              ENDIF
 2565/DCFB : [2565]                              ENDIF
 2566/DCFB : (MACRO)                    	DO	EXOR
 2566/DCFB : =>NOT BLANK                         IFNB   EXOR
 2566/DCFB : F1                                   DB    H(EXOR)
 2566/DCFC : 92                                   DB    L(EXOR)
 2566/DCFD :                                      SHIFT
 2566/DCFD :  (MACRO-2)                           DO    
 2566/DCFD : =>BLANK                             IFNB   
 2566/DCFD :                                      DB    H()
 2566/DCFD :                                      DB    L()
 2566/DCFD :                                      SHIFT
 2566/DCFD :                                      DO    
 2566/DCFD : [2566]                              ENDIF
 2566/DCFD : [2566]                              ENDIF
 2567/DCFD : (MACRO)                    	DO	STBACK
 2567/DCFD : =>NOT BLANK                         IFNB   STBACK
 2567/DCFD : FF                                   DB    H(STBACK)
 2567/DCFE : 80                                   DB    L(STBACK)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 121 - 2024年05月30日 19時01分01秒


 2567/DCFF :                                      SHIFT
 2567/DCFF :  (MACRO-2)                           DO    
 2567/DCFF : =>BLANK                             IFNB   
 2567/DCFF :                                      DB    H()
 2567/DCFF :                                      DB    L()
 2567/DCFF :                                      SHIFT
 2567/DCFF :                                      DO    
 2567/DCFF : [2567]                              ENDIF
 2567/DCFF : [2567]                              ENDIF
 2568/DCFF : (MACRO)                    	GOTO	REX3
 2568/DCFF : 5C                                  DB     H(REX3 - JMPBITH)
 2568/DD00 : D8                                  DB     L(REX3)
 2569/DD01 : (MACRO)                    REX6:	TSTSTR	RTRN,T_OR		; handle | (OR)
 2569/DD01 : 9D                                  DB     H(RTRN - TSTBITH)
 2569/DD02 : 78                                  DB     L(RTRN)
 2569/DD03 : A7                                  DB     T_OR
 2570/DD04 : (MACRO)                    	ILCALL	RTERM
 2570/DD04 : 1D                                  DB     H(RTERM - (JMPBITH + TSTBITH))
 2570/DD05 : 10                                  DB     L(RTERM)
 2571/DD06 : (MACRO)                    	DO	STACK
 2571/DD06 : =>NOT BLANK                         IFNB   STACK
 2571/DD06 : F2                                   DB    H(STACK)
 2571/DD07 : 8E                                   DB    L(STACK)
 2571/DD08 :                                      SHIFT
 2571/DD08 :  (MACRO-2)                           DO    
 2571/DD08 : =>BLANK                             IFNB   
 2571/DD08 :                                      DB    H()
 2571/DD08 :                                      DB    L()
 2571/DD08 :                                      SHIFT
 2571/DD08 :                                      DO    
 2571/DD08 : [2571]                              ENDIF
 2571/DD08 : [2571]                              ENDIF
 2572/DD08 : (MACRO)                    	DO	ALGEXP
 2572/DD08 : =>NOT BLANK                         IFNB   ALGEXP
 2572/DD08 : F2                                   DB    H(ALGEXP)
 2572/DD09 : 59                                   DB    L(ALGEXP)
 2572/DD0A :                                      SHIFT
 2572/DD0A :  (MACRO-2)                           DO    
 2572/DD0A : =>BLANK                             IFNB   
 2572/DD0A :                                      DB    H()
 2572/DD0A :                                      DB    L()
 2572/DD0A :                                      SHIFT
 2572/DD0A :                                      DO    
 2572/DD0A : [2572]                              ENDIF
 2572/DD0A : [2572]                              ENDIF
 2573/DD0A : (MACRO)                    	DO	OR
 2573/DD0A : =>NOT BLANK                         IFNB   OR
 2573/DD0A : F1                                   DB    H(OR)
 2573/DD0B : 6C                                   DB    L(OR)
 2573/DD0C :                                      SHIFT
 2573/DD0C :  (MACRO-2)                           DO    
 2573/DD0C : =>BLANK                             IFNB   
 2573/DD0C :                                      DB    H()
 2573/DD0C :                                      DB    L()
 2573/DD0C :                                      SHIFT
 2573/DD0C :                                      DO    
 2573/DD0C : [2573]                              ENDIF
 2573/DD0C : [2573]                              ENDIF
 2574/DD0C : (MACRO)                    	DO	STBACK
 2574/DD0C : =>NOT BLANK                         IFNB   STBACK
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 122 - 2024年05月30日 19時01分01秒


 2574/DD0C : FF                                   DB    H(STBACK)
 2574/DD0D : 80                                   DB    L(STBACK)
 2574/DD0E :                                      SHIFT
 2574/DD0E :  (MACRO-2)                           DO    
 2574/DD0E : =>BLANK                             IFNB   
 2574/DD0E :                                      DB    H()
 2574/DD0E :                                      DB    L()
 2574/DD0E :                                      SHIFT
 2574/DD0E :                                      DO    
 2574/DD0E : [2574]                              ENDIF
 2574/DD0E : [2574]                              ENDIF
 2575/DD0E : (MACRO)                    	GOTO	REX3
 2575/DD0E : 5C                                  DB     H(REX3 - JMPBITH)
 2575/DD0F : D8                                  DB     L(REX3)
 2576/DD10 :                            
 2577/DD10 :                            ; Evaluate expression with two terms
 2578/DD10 : (MACRO)                    RTERM:	ILCALL	REXPN
 2578/DD10 : 1D                                  DB     H(REXPN - (JMPBITH + TSTBITH))
 2578/DD11 : 5B                                  DB     L(REXPN)
 2579/DD12 : (MACRO)                    RT1:	TSTSTR	RT2,'*'			; handle * (multiplication)
 2579/DD12 : 9D                                  DB     H(RT2 - TSTBITH)
 2579/DD13 : 1F                                  DB     L(RT2)
 2579/DD14 : 2A                                  DB     '*'
 2580/DD15 : (MACRO)                    	ILCALL	REXPN
 2580/DD15 : 1D                                  DB     H(REXPN - (JMPBITH + TSTBITH))
 2580/DD16 : 5B                                  DB     L(REXPN)
 2581/DD17 : (MACRO)                    	DO	STACK
 2581/DD17 : =>NOT BLANK                         IFNB   STACK
 2581/DD17 : F2                                   DB    H(STACK)
 2581/DD18 : 8E                                   DB    L(STACK)
 2581/DD19 :                                      SHIFT
 2581/DD19 :  (MACRO-2)                           DO    
 2581/DD19 : =>BLANK                             IFNB   
 2581/DD19 :                                      DB    H()
 2581/DD19 :                                      DB    L()
 2581/DD19 :                                      SHIFT
 2581/DD19 :                                      DO    
 2581/DD19 : [2581]                              ENDIF
 2581/DD19 : [2581]                              ENDIF
 2582/DD19 : (MACRO)                    	DO	FMUL
 2582/DD19 : =>NOT BLANK                         IFNB   FMUL
 2582/DD19 : F0                                   DB    H(FMUL)
 2582/DD1A : E3                                   DB    L(FMUL)
 2582/DD1B :                                      SHIFT
 2582/DD1B :  (MACRO-2)                           DO    
 2582/DD1B : =>BLANK                             IFNB   
 2582/DD1B :                                      DB    H()
 2582/DD1B :                                      DB    L()
 2582/DD1B :                                      SHIFT
 2582/DD1B :                                      DO    
 2582/DD1B : [2582]                              ENDIF
 2582/DD1B : [2582]                              ENDIF
 2583/DD1B : (MACRO)                    	DO	STBACK
 2583/DD1B : =>NOT BLANK                         IFNB   STBACK
 2583/DD1B : FF                                   DB    H(STBACK)
 2583/DD1C : 80                                   DB    L(STBACK)
 2583/DD1D :                                      SHIFT
 2583/DD1D :  (MACRO-2)                           DO    
 2583/DD1D : =>BLANK                             IFNB   
 2583/DD1D :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 123 - 2024年05月30日 19時01分01秒


 2583/DD1D :                                      DB    L()
 2583/DD1D :                                      SHIFT
 2583/DD1D :                                      DO    
 2583/DD1D : [2583]                              ENDIF
 2583/DD1D : [2583]                              ENDIF
 2584/DD1D : (MACRO)                    	GOTO	RT1
 2584/DD1D : 5D                                  DB     H(RT1 - JMPBITH)
 2584/DD1E : 12                                  DB     L(RT1)
 2585/DD1F : (MACRO)                    RT2:	TSTSTR	RT3,'/'			; handle / (division)
 2585/DD1F : 9D                                  DB     H(RT3 - TSTBITH)
 2585/DD20 : 2C                                  DB     L(RT3)
 2585/DD21 : 2F                                  DB     '/'
 2586/DD22 : (MACRO)                    	ILCALL	REXPN
 2586/DD22 : 1D                                  DB     H(REXPN - (JMPBITH + TSTBITH))
 2586/DD23 : 5B                                  DB     L(REXPN)
 2587/DD24 : (MACRO)                    	DO	STACK
 2587/DD24 : =>NOT BLANK                         IFNB   STACK
 2587/DD24 : F2                                   DB    H(STACK)
 2587/DD25 : 8E                                   DB    L(STACK)
 2587/DD26 :                                      SHIFT
 2587/DD26 :  (MACRO-2)                           DO    
 2587/DD26 : =>BLANK                             IFNB   
 2587/DD26 :                                      DB    H()
 2587/DD26 :                                      DB    L()
 2587/DD26 :                                      SHIFT
 2587/DD26 :                                      DO    
 2587/DD26 : [2587]                              ENDIF
 2587/DD26 : [2587]                              ENDIF
 2588/DD26 : (MACRO)                    	DO	FDIV
 2588/DD26 : =>NOT BLANK                         IFNB   FDIV
 2588/DD26 : F0                                   DB    H(FDIV)
 2588/DD27 : 78                                   DB    L(FDIV)
 2588/DD28 :                                      SHIFT
 2588/DD28 :  (MACRO-2)                           DO    
 2588/DD28 : =>BLANK                             IFNB   
 2588/DD28 :                                      DB    H()
 2588/DD28 :                                      DB    L()
 2588/DD28 :                                      SHIFT
 2588/DD28 :                                      DO    
 2588/DD28 : [2588]                              ENDIF
 2588/DD28 : [2588]                              ENDIF
 2589/DD28 : (MACRO)                    	DO	STBACK
 2589/DD28 : =>NOT BLANK                         IFNB   STBACK
 2589/DD28 : FF                                   DB    H(STBACK)
 2589/DD29 : 80                                   DB    L(STBACK)
 2589/DD2A :                                      SHIFT
 2589/DD2A :  (MACRO-2)                           DO    
 2589/DD2A : =>BLANK                             IFNB   
 2589/DD2A :                                      DB    H()
 2589/DD2A :                                      DB    L()
 2589/DD2A :                                      SHIFT
 2589/DD2A :                                      DO    
 2589/DD2A : [2589]                              ENDIF
 2589/DD2A : [2589]                              ENDIF
 2590/DD2A : (MACRO)                    	GOTO	RT1
 2590/DD2A : 5D                                  DB     H(RT1 - JMPBITH)
 2590/DD2B : 12                                  DB     L(RT1)
 2591/DD2C : (MACRO)                    RT3:	TSTSTR	RT4,T_AND		; handle & (AND)
 2591/DD2C : 9D                                  DB     H(RT4 - TSTBITH)
 2591/DD2D : 3B                                  DB     L(RT4)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 124 - 2024年05月30日 19時01分01秒


 2591/DD2E : A3                                  DB     T_AND
 2592/DD2F : (MACRO)                    	ILCALL	REXPN
 2592/DD2F : 1D                                  DB     H(REXPN - (JMPBITH + TSTBITH))
 2592/DD30 : 5B                                  DB     L(REXPN)
 2593/DD31 : (MACRO)                    	DO	STACK
 2593/DD31 : =>NOT BLANK                         IFNB   STACK
 2593/DD31 : F2                                   DB    H(STACK)
 2593/DD32 : 8E                                   DB    L(STACK)
 2593/DD33 :                                      SHIFT
 2593/DD33 :  (MACRO-2)                           DO    
 2593/DD33 : =>BLANK                             IFNB   
 2593/DD33 :                                      DB    H()
 2593/DD33 :                                      DB    L()
 2593/DD33 :                                      SHIFT
 2593/DD33 :                                      DO    
 2593/DD33 : [2593]                              ENDIF
 2593/DD33 : [2593]                              ENDIF
 2594/DD33 : (MACRO)                    	DO	ALGEXP
 2594/DD33 : =>NOT BLANK                         IFNB   ALGEXP
 2594/DD33 : F2                                   DB    H(ALGEXP)
 2594/DD34 : 59                                   DB    L(ALGEXP)
 2594/DD35 :                                      SHIFT
 2594/DD35 :  (MACRO-2)                           DO    
 2594/DD35 : =>BLANK                             IFNB   
 2594/DD35 :                                      DB    H()
 2594/DD35 :                                      DB    L()
 2594/DD35 :                                      SHIFT
 2594/DD35 :                                      DO    
 2594/DD35 : [2594]                              ENDIF
 2594/DD35 : [2594]                              ENDIF
 2595/DD35 : (MACRO)                    	DO	AND
 2595/DD35 : =>NOT BLANK                         IFNB   AND
 2595/DD35 : F1                                   DB    H(AND)
 2595/DD36 : 56                                   DB    L(AND)
 2595/DD37 :                                      SHIFT
 2595/DD37 :  (MACRO-2)                           DO    
 2595/DD37 : =>BLANK                             IFNB   
 2595/DD37 :                                      DB    H()
 2595/DD37 :                                      DB    L()
 2595/DD37 :                                      SHIFT
 2595/DD37 :                                      DO    
 2595/DD37 : [2595]                              ENDIF
 2595/DD37 : [2595]                              ENDIF
 2596/DD37 : (MACRO)                    	DO	STBACK
 2596/DD37 : =>NOT BLANK                         IFNB   STBACK
 2596/DD37 : FF                                   DB    H(STBACK)
 2596/DD38 : 80                                   DB    L(STBACK)
 2596/DD39 :                                      SHIFT
 2596/DD39 :  (MACRO-2)                           DO    
 2596/DD39 : =>BLANK                             IFNB   
 2596/DD39 :                                      DB    H()
 2596/DD39 :                                      DB    L()
 2596/DD39 :                                      SHIFT
 2596/DD39 :                                      DO    
 2596/DD39 : [2596]                              ENDIF
 2596/DD39 : [2596]                              ENDIF
 2597/DD39 : (MACRO)                    	GOTO	RT1
 2597/DD39 : 5D                                  DB     H(RT1 - JMPBITH)
 2597/DD3A : 12                                  DB     L(RT1)
 2598/DD3B : (MACRO)                    RT4:	TSTSTR	RT5,T_DIV		; handle // (DIV)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 125 - 2024年05月30日 19時01分01秒


 2598/DD3B : 9D                                  DB     H(RT5 - TSTBITH)
 2598/DD3C : 4A                                  DB     L(RT5)
 2598/DD3D : A4                                  DB     T_DIV
 2599/DD3E : (MACRO)                    	ILCALL	REXPN
 2599/DD3E : 1D                                  DB     H(REXPN - (JMPBITH + TSTBITH))
 2599/DD3F : 5B                                  DB     L(REXPN)
 2600/DD40 : (MACRO)                    	DO	STACK
 2600/DD40 : =>NOT BLANK                         IFNB   STACK
 2600/DD40 : F2                                   DB    H(STACK)
 2600/DD41 : 8E                                   DB    L(STACK)
 2600/DD42 :                                      SHIFT
 2600/DD42 :  (MACRO-2)                           DO    
 2600/DD42 : =>BLANK                             IFNB   
 2600/DD42 :                                      DB    H()
 2600/DD42 :                                      DB    L()
 2600/DD42 :                                      SHIFT
 2600/DD42 :                                      DO    
 2600/DD42 : [2600]                              ENDIF
 2600/DD42 : [2600]                              ENDIF
 2601/DD42 : (MACRO)                    	DO	FDIV
 2601/DD42 : =>NOT BLANK                         IFNB   FDIV
 2601/DD42 : F0                                   DB    H(FDIV)
 2601/DD43 : 78                                   DB    L(FDIV)
 2601/DD44 :                                      SHIFT
 2601/DD44 :  (MACRO-2)                           DO    
 2601/DD44 : =>BLANK                             IFNB   
 2601/DD44 :                                      DB    H()
 2601/DD44 :                                      DB    L()
 2601/DD44 :                                      SHIFT
 2601/DD44 :                                      DO    
 2601/DD44 : [2601]                              ENDIF
 2601/DD44 : [2601]                              ENDIF
 2602/DD44 : (MACRO)                    	DO	INT
 2602/DD44 : =>NOT BLANK                         IFNB   INT
 2602/DD44 : F2                                   DB    H(INT)
 2602/DD45 : 02                                   DB    L(INT)
 2602/DD46 :                                      SHIFT
 2602/DD46 :  (MACRO-2)                           DO    
 2602/DD46 : =>BLANK                             IFNB   
 2602/DD46 :                                      DB    H()
 2602/DD46 :                                      DB    L()
 2602/DD46 :                                      SHIFT
 2602/DD46 :                                      DO    
 2602/DD46 : [2602]                              ENDIF
 2602/DD46 : [2602]                              ENDIF
 2603/DD46 : (MACRO)                    	DO	STBACK
 2603/DD46 : =>NOT BLANK                         IFNB   STBACK
 2603/DD46 : FF                                   DB    H(STBACK)
 2603/DD47 : 80                                   DB    L(STBACK)
 2603/DD48 :                                      SHIFT
 2603/DD48 :  (MACRO-2)                           DO    
 2603/DD48 : =>BLANK                             IFNB   
 2603/DD48 :                                      DB    H()
 2603/DD48 :                                      DB    L()
 2603/DD48 :                                      SHIFT
 2603/DD48 :                                      DO    
 2603/DD48 : [2603]                              ENDIF
 2603/DD48 : [2603]                              ENDIF
 2604/DD48 : (MACRO)                    	GOTO	RT1
 2604/DD48 : 5D                                  DB     H(RT1 - JMPBITH)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 126 - 2024年05月30日 19時01分01秒


 2604/DD49 : 12                                  DB     L(RT1)
 2605/DD4A : (MACRO)                    RT5:	TSTSTR	RTRN,T_MOD		; handle % (MOD)
 2605/DD4A : 9D                                  DB     H(RTRN - TSTBITH)
 2605/DD4B : 78                                  DB     L(RTRN)
 2605/DD4C : A6                                  DB     T_MOD
 2606/DD4D : (MACRO)                    	ILCALL	REXPN
 2606/DD4D : 1D                                  DB     H(REXPN - (JMPBITH + TSTBITH))
 2606/DD4E : 5B                                  DB     L(REXPN)
 2607/DD4F : (MACRO)                    	DO	STACK
 2607/DD4F : =>NOT BLANK                         IFNB   STACK
 2607/DD4F : F2                                   DB    H(STACK)
 2607/DD50 : 8E                                   DB    L(STACK)
 2607/DD51 :                                      SHIFT
 2607/DD51 :  (MACRO-2)                           DO    
 2607/DD51 : =>BLANK                             IFNB   
 2607/DD51 :                                      DB    H()
 2607/DD51 :                                      DB    L()
 2607/DD51 :                                      SHIFT
 2607/DD51 :                                      DO    
 2607/DD51 : [2607]                              ENDIF
 2607/DD51 : [2607]                              ENDIF
 2608/DD51 : (MACRO)                    	DO	FMOD
 2608/DD51 : =>NOT BLANK                         IFNB   FMOD
 2608/DD51 : F6                                   DB    H(FMOD)
 2608/DD52 : 8A                                   DB    L(FMOD)
 2608/DD53 :                                      SHIFT
 2608/DD53 :  (MACRO-2)                           DO    
 2608/DD53 : =>BLANK                             IFNB   
 2608/DD53 :                                      DB    H()
 2608/DD53 :                                      DB    L()
 2608/DD53 :                                      SHIFT
 2608/DD53 :                                      DO    
 2608/DD53 : [2608]                              ENDIF
 2608/DD53 : [2608]                              ENDIF
 2609/DD53 : (MACRO)                    	DO	PSHSWP
 2609/DD53 : =>NOT BLANK                         IFNB   PSHSWP
 2609/DD53 : F7                                   DB    H(PSHSWP)
 2609/DD54 : 21                                   DB    L(PSHSWP)
 2609/DD55 :                                      SHIFT
 2609/DD55 :  (MACRO-2)                           DO    
 2609/DD55 : =>BLANK                             IFNB   
 2609/DD55 :                                      DB    H()
 2609/DD55 :                                      DB    L()
 2609/DD55 :                                      SHIFT
 2609/DD55 :                                      DO    
 2609/DD55 : [2609]                              ENDIF
 2609/DD55 : [2609]                              ENDIF
 2610/DD55 : (MACRO)                    	DO	FMUL
 2610/DD55 : =>NOT BLANK                         IFNB   FMUL
 2610/DD55 : F0                                   DB    H(FMUL)
 2610/DD56 : E3                                   DB    L(FMUL)
 2610/DD57 :                                      SHIFT
 2610/DD57 :  (MACRO-2)                           DO    
 2610/DD57 : =>BLANK                             IFNB   
 2610/DD57 :                                      DB    H()
 2610/DD57 :                                      DB    L()
 2610/DD57 :                                      SHIFT
 2610/DD57 :                                      DO    
 2610/DD57 : [2610]                              ENDIF
 2610/DD57 : [2610]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 127 - 2024年05月30日 19時01分01秒


 2611/DD57 : (MACRO)                    	DO	STBACK
 2611/DD57 : =>NOT BLANK                         IFNB   STBACK
 2611/DD57 : FF                                   DB    H(STBACK)
 2611/DD58 : 80                                   DB    L(STBACK)
 2611/DD59 :                                      SHIFT
 2611/DD59 :  (MACRO-2)                           DO    
 2611/DD59 : =>BLANK                             IFNB   
 2611/DD59 :                                      DB    H()
 2611/DD59 :                                      DB    L()
 2611/DD59 :                                      SHIFT
 2611/DD59 :                                      DO    
 2611/DD59 : [2611]                              ENDIF
 2611/DD59 : [2611]                              ENDIF
 2612/DD59 : (MACRO)                    	GOTO	RT1
 2612/DD59 : 5D                                  DB     H(RT1 - JMPBITH)
 2612/DD5A : 12                                  DB     L(RT1)
 2613/DD5B :                            
 2614/DD5B : (MACRO)                    REXPN:	ILCALL	RFACTR
 2614/DD5B : 1D                                  DB     H(RFACTR - (JMPBITH + TSTBITH))
 2614/DD5C : 79                                  DB     L(RFACTR)
 2615/DD5D : (MACRO)                    REXPN1:	TSTSTR	RTRN,'^'		; handle exponentiation
 2615/DD5D : 9D                                  DB     H(RTRN - TSTBITH)
 2615/DD5E : 78                                  DB     L(RTRN)
 2615/DD5F : 5E                                  DB     '^'
 2616/DD60 : (MACRO)                    	ILCALL	RFACTR
 2616/DD60 : 1D                                  DB     H(RFACTR - (JMPBITH + TSTBITH))
 2616/DD61 : 79                                  DB     L(RFACTR)
 2617/DD62 : (MACRO)                    	DO	STACK
 2617/DD62 : =>NOT BLANK                         IFNB   STACK
 2617/DD62 : F2                                   DB    H(STACK)
 2617/DD63 : 8E                                   DB    L(STACK)
 2617/DD64 :                                      SHIFT
 2617/DD64 :  (MACRO-2)                           DO    
 2617/DD64 : =>BLANK                             IFNB   
 2617/DD64 :                                      DB    H()
 2617/DD64 :                                      DB    L()
 2617/DD64 :                                      SHIFT
 2617/DD64 :                                      DO    
 2617/DD64 : [2617]                              ENDIF
 2617/DD64 : [2617]                              ENDIF
 2618/DD64 : (MACRO)                    	DO	SWAP
 2618/DD64 : =>NOT BLANK                         IFNB   SWAP
 2618/DD64 : F0                                   DB    H(SWAP)
 2618/DD65 : 35                                   DB    L(SWAP)
 2618/DD66 :                                      SHIFT
 2618/DD66 :  (MACRO-2)                           DO    
 2618/DD66 : =>BLANK                             IFNB   
 2618/DD66 :                                      DB    H()
 2618/DD66 :                                      DB    L()
 2618/DD66 :                                      SHIFT
 2618/DD66 :                                      DO    
 2618/DD66 : [2618]                              ENDIF
 2618/DD66 : [2618]                              ENDIF
 2619/DD66 : (MACRO)                    	DO	LOG2
 2619/DD66 : =>NOT BLANK                         IFNB   LOG2
 2619/DD66 : F4                                   DB    H(LOG2)
 2619/DD67 : D8                                   DB    L(LOG2)
 2619/DD68 :                                      SHIFT
 2619/DD68 :  (MACRO-2)                           DO    
 2619/DD68 : =>BLANK                             IFNB   
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 128 - 2024年05月30日 19時01分01秒


 2619/DD68 :                                      DB    H()
 2619/DD68 :                                      DB    L()
 2619/DD68 :                                      SHIFT
 2619/DD68 :                                      DO    
 2619/DD68 : [2619]                              ENDIF
 2619/DD68 : [2619]                              ENDIF
 2620/DD68 : (MACRO)                    	DO	FMUL
 2620/DD68 : =>NOT BLANK                         IFNB   FMUL
 2620/DD68 : F0                                   DB    H(FMUL)
 2620/DD69 : E3                                   DB    L(FMUL)
 2620/DD6A :                                      SHIFT
 2620/DD6A :  (MACRO-2)                           DO    
 2620/DD6A : =>BLANK                             IFNB   
 2620/DD6A :                                      DB    H()
 2620/DD6A :                                      DB    L()
 2620/DD6A :                                      SHIFT
 2620/DD6A :                                      DO    
 2620/DD6A : [2620]                              ENDIF
 2620/DD6A : [2620]                              ENDIF
 2621/DD6A : (MACRO)                    	DO	EXP2
 2621/DD6A : =>NOT BLANK                         IFNB   EXP2
 2621/DD6A : F5                                   DB    H(EXP2)
 2621/DD6B : 98                                   DB    L(EXP2)
 2621/DD6C :                                      SHIFT
 2621/DD6C :  (MACRO-2)                           DO    
 2621/DD6C : =>BLANK                             IFNB   
 2621/DD6C :                                      DB    H()
 2621/DD6C :                                      DB    L()
 2621/DD6C :                                      SHIFT
 2621/DD6C :                                      DO    
 2621/DD6C : [2621]                              ENDIF
 2621/DD6C : [2621]                              ENDIF
 2622/DD6C : (MACRO)                    	DO	STBACK
 2622/DD6C : =>NOT BLANK                         IFNB   STBACK
 2622/DD6C : FF                                   DB    H(STBACK)
 2622/DD6D : 80                                   DB    L(STBACK)
 2622/DD6E :                                      SHIFT
 2622/DD6E :  (MACRO-2)                           DO    
 2622/DD6E : =>BLANK                             IFNB   
 2622/DD6E :                                      DB    H()
 2622/DD6E :                                      DB    L()
 2622/DD6E :                                      SHIFT
 2622/DD6E :                                      DO    
 2622/DD6E : [2622]                              ENDIF
 2622/DD6E : [2622]                              ENDIF
 2623/DD6E : (MACRO)                    	GOTO	REXPN1
 2623/DD6E : 5D                                  DB     H(REXPN1 - JMPBITH)
 2623/DD6F : 5D                                  DB     L(REXPN1)
 2624/DD70 :                            
 2625/DD70 : (MACRO)                    SNGL:	TSTSTR	SYNTAX,'('
 2625/DD70 : 99                                  DB     H(SYNTAX - TSTBITH)
 2625/DD71 : 42                                  DB     L(SYNTAX)
 2625/DD72 : 28                                  DB     '('
 2626/DD73 : (MACRO)                    	ILCALL	REXPR
 2626/DD73 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2626/DD74 : C6                                  DB     L(REXPR)
 2627/DD75 : (MACRO)                    	TSTSTR	ENDPAR,')'
 2627/DD75 : 99                                  DB     H(ENDPAR - TSTBITH)
 2627/DD76 : 2F                                  DB     L(ENDPAR)
 2627/DD77 : 29                                  DB     ')'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 129 - 2024年05月30日 19時01分01秒


 2628/DD78 : (MACRO)                    RTRN:	ILRTRN
 2628/DD78 : 00                                  DB     0
 2629/DD79 :                            
 2630/DD79 :                            ; NOTE:	Handle floating point numbers	
 2631/DD79 : (MACRO)                    RFACTR:	TSTNUM	RF1			; number before decimal point
 2631/DD79 : DD                                  DB     H(RF1)
 2631/DD7A : 99                                  DB     L(RF1)
 2632/DD7B : (MACRO)                    RNUM:	TSTSTR	RNUM1,'.'		; decimal point
 2632/DD7B : 9D                                  DB     H(RNUM1 - TSTBITH)
 2632/DD7C : 88                                  DB     L(RNUM1)
 2632/DD7D : 2E                                  DB     '.'
 2633/DD7E : (MACRO)                    	TSTNUM	RNUM1			; number after decimal point
 2633/DD7E : DD                                  DB     H(RNUM1)
 2633/DD7F : 88                                  DB     L(RNUM1)
 2634/DD80 : (MACRO)                    	DO	STACK
 2634/DD80 : =>NOT BLANK                         IFNB   STACK
 2634/DD80 : F2                                   DB    H(STACK)
 2634/DD81 : 8E                                   DB    L(STACK)
 2634/DD82 :                                      SHIFT
 2634/DD82 :  (MACRO-2)                           DO    
 2634/DD82 : =>BLANK                             IFNB   
 2634/DD82 :                                      DB    H()
 2634/DD82 :                                      DB    L()
 2634/DD82 :                                      SHIFT
 2634/DD82 :                                      DO    
 2634/DD82 : [2634]                              ENDIF
 2634/DD82 : [2634]                              ENDIF
 2635/DD82 : (MACRO)                    	DO	FD10			; transform fractional part into binary..
 2635/DD82 : =>NOT BLANK                         IFNB   FD10
 2635/DD82 : F7                                   DB    H(FD10)
 2635/DD83 : 39                                   DB    L(FD10)
 2635/DD84 :                                      SHIFT
 2635/DD84 :  (MACRO-2)                           DO    
 2635/DD84 : =>BLANK                             IFNB   
 2635/DD84 :                                      DB    H()
 2635/DD84 :                                      DB    L()
 2635/DD84 :                                      SHIFT
 2635/DD84 :                                      DO    
 2635/DD84 : [2635]                              ENDIF
 2635/DD84 : [2635]                              ENDIF
 2636/DD84 : (MACRO)                    	DO	FADD			; ..and add to integer part
 2636/DD84 : =>NOT BLANK                         IFNB   FADD
 2636/DD84 : F1                                   DB    H(FADD)
 2636/DD85 : 3C                                   DB    L(FADD)
 2636/DD86 :                                      SHIFT
 2636/DD86 :  (MACRO-2)                           DO    
 2636/DD86 : =>BLANK                             IFNB   
 2636/DD86 :                                      DB    H()
 2636/DD86 :                                      DB    L()
 2636/DD86 :                                      SHIFT
 2636/DD86 :                                      DO    
 2636/DD86 : [2636]                              ENDIF
 2636/DD86 : [2636]                              ENDIF
 2637/DD86 : (MACRO)                    	DO	STBACK
 2637/DD86 : =>NOT BLANK                         IFNB   STBACK
 2637/DD86 : FF                                   DB    H(STBACK)
 2637/DD87 : 80                                   DB    L(STBACK)
 2637/DD88 :                                      SHIFT
 2637/DD88 :  (MACRO-2)                           DO    
 2637/DD88 : =>BLANK                             IFNB   
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 130 - 2024年05月30日 19時01分01秒


 2637/DD88 :                                      DB    H()
 2637/DD88 :                                      DB    L()
 2637/DD88 :                                      SHIFT
 2637/DD88 :                                      DO    
 2637/DD88 : [2637]                              ENDIF
 2637/DD88 : [2637]                              ENDIF
 2638/DD88 : (MACRO)                    RNUM1:	TSTSTR	RTRN,'E'		; look for an exponent part
 2638/DD88 : 9D                                  DB     H(RTRN - TSTBITH)
 2638/DD89 : 78                                  DB     L(RTRN)
 2638/DD8A : 45                                  DB     'E'
 2639/DD8B : (MACRO)                    	TSTSTR	RNUM2,'-'
 2639/DD8B : 9D                                  DB     H(RNUM2 - TSTBITH)
 2639/DD8C : 92                                  DB     L(RNUM2)
 2639/DD8D : 2D                                  DB     '-'
 2640/DD8E : (MACRO)                    	DO	NUMTST
 2640/DD8E : =>NOT BLANK                         IFNB   NUMTST
 2640/DD8E : EA                                   DB    H(NUMTST)
 2640/DD8F : 8D                                   DB    L(NUMTST)
 2640/DD90 :                                      SHIFT
 2640/DD90 :  (MACRO-2)                           DO    
 2640/DD90 : =>BLANK                             IFNB   
 2640/DD90 :                                      DB    H()
 2640/DD90 :                                      DB    L()
 2640/DD90 :                                      SHIFT
 2640/DD90 :                                      DO    
 2640/DD90 : [2640]                              ENDIF
 2640/DD90 : [2640]                              ENDIF
 2641/DD90 : (MACRO)                    	DO	FDIV11
 2641/DD90 : =>NOT BLANK                         IFNB   FDIV11
 2641/DD90 : F7                                   DB    H(FDIV11)
 2641/DD91 : B8                                   DB    L(FDIV11)
 2641/DD92 :                                      SHIFT
 2641/DD92 :  (MACRO-2)                           DO    
 2641/DD92 : =>BLANK                             IFNB   
 2641/DD92 :                                      DB    H()
 2641/DD92 :                                      DB    L()
 2641/DD92 :                                      SHIFT
 2641/DD92 :                                      DO    
 2641/DD92 : [2641]                              ENDIF
 2641/DD92 : [2641]                              ENDIF
 2642/DD92 : (MACRO)                    RNUM2:	TSTSTR	RNUM3,'+'
 2642/DD92 : 9D                                  DB     H(RNUM3 - TSTBITH)
 2642/DD93 : 95                                  DB     L(RNUM3)
 2642/DD94 : 2B                                  DB     '+'
 2643/DD95 : (MACRO)                    RNUM3:	DO	NUMTST
 2643/DD95 : =>NOT BLANK                         IFNB   NUMTST
 2643/DD95 : EA                                   DB    H(NUMTST)
 2643/DD96 : 8D                                   DB    L(NUMTST)
 2643/DD97 :                                      SHIFT
 2643/DD97 :  (MACRO-2)                           DO    
 2643/DD97 : =>BLANK                             IFNB   
 2643/DD97 :                                      DB    H()
 2643/DD97 :                                      DB    L()
 2643/DD97 :                                      SHIFT
 2643/DD97 :                                      DO    
 2643/DD97 : [2643]                              ENDIF
 2643/DD97 : [2643]                              ENDIF
 2644/DD97 : (MACRO)                    	DO	FMUL11
 2644/DD97 : =>NOT BLANK                         IFNB   FMUL11
 2644/DD97 : F8                                   DB    H(FMUL11)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 131 - 2024年05月30日 19時01分01秒


 2644/DD98 : 45                                   DB    L(FMUL11)
 2644/DD99 :                                      SHIFT
 2644/DD99 :  (MACRO-2)                           DO    
 2644/DD99 : =>BLANK                             IFNB   
 2644/DD99 :                                      DB    H()
 2644/DD99 :                                      DB    L()
 2644/DD99 :                                      SHIFT
 2644/DD99 :                                      DO    
 2644/DD99 : [2644]                              ENDIF
 2644/DD99 : [2644]                              ENDIF
 2645/DD99 : (MACRO)                    RF1:	TSTVAR	RF2
 2645/DD99 : BD                                  DB     H(RF2 - CALBITH)
 2645/DD9A : A2                                  DB     L(RF2)
 2646/DD9B : (MACRO)                    	DO	FNDVAR
 2646/DD9B : =>NOT BLANK                         IFNB   FNDVAR
 2646/DD9B : E2                                   DB    H(FNDVAR)
 2646/DD9C : E1                                   DB    L(FNDVAR)
 2646/DD9D :                                      SHIFT
 2646/DD9D :  (MACRO-2)                           DO    
 2646/DD9D : =>BLANK                             IFNB   
 2646/DD9D :                                      DB    H()
 2646/DD9D :                                      DB    L()
 2646/DD9D :                                      SHIFT
 2646/DD9D :                                      DO    
 2646/DD9D : [2646]                              ENDIF
 2646/DD9D : [2646]                              ENDIF
 2647/DD9D : (MACRO)                    	ILCALL	RINDEX
 2647/DD9D : 1F                                  DB     H(RINDEX - (JMPBITH + TSTBITH))
 2647/DD9E : 4F                                  DB     L(RINDEX)
 2648/DD9F : (MACRO)                    	DO	LDVAR
 2648/DD9F : =>NOT BLANK                         IFNB   LDVAR
 2648/DD9F : E8                                   DB    H(LDVAR)
 2648/DDA0 : 15                                   DB    L(LDVAR)
 2648/DDA1 :                                      SHIFT
 2648/DDA1 :  (MACRO-2)                           DO    
 2648/DDA1 : =>BLANK                             IFNB   
 2648/DDA1 :                                      DB    H()
 2648/DDA1 :                                      DB    L()
 2648/DDA1 :                                      SHIFT
 2648/DDA1 :                                      DO    
 2648/DDA1 : [2648]                              ENDIF
 2648/DDA1 : [2648]                              ENDIF
 2649/DDA1 : (MACRO)                    	ILRTRN
 2649/DDA1 : 00                                  DB     0
 2650/DDA2 :                            
 2651/DDA2 : (MACRO)                    RF2:	TSTSTR	RF3,'('
 2651/DDA2 : 9D                                  DB     H(RF3 - TSTBITH)
 2651/DDA3 : AB                                  DB     L(RF3)
 2651/DDA4 : 28                                  DB     '('
 2652/DDA5 : (MACRO)                    	ILCALL	RELSTR
 2652/DDA5 : 1C                                  DB     H(RELSTR - (JMPBITH + TSTBITH))
 2652/DDA6 : 72                                  DB     L(RELSTR)
 2653/DDA7 : (MACRO)                    	TSTSTR	ENDPAR,')'
 2653/DDA7 : 99                                  DB     H(ENDPAR - TSTBITH)
 2653/DDA8 : 2F                                  DB     L(ENDPAR)
 2653/DDA9 : 29                                  DB     ')'
 2654/DDAA : (MACRO)                    	ILRTRN
 2654/DDAA : 00                                  DB     0
 2655/DDAB :                            
 2656/DDAB : (MACRO)                    RF3:	TSTSTR	RF4,T_ABS		; handle ABS(x)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 132 - 2024年05月30日 19時01分01秒


 2656/DDAB : 9D                                  DB     H(RF4 - TSTBITH)
 2656/DDAC : B6                                  DB     L(RF4)
 2656/DDAD : AC                                  DB     T_ABS
 2657/DDAE : (MACRO)                    	ILCALL	SNGL
 2657/DDAE : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2657/DDAF : 70                                  DB     L(SNGL)
 2658/DDB0 : (MACRO)                    	DO	STACK
 2658/DDB0 : =>NOT BLANK                         IFNB   STACK
 2658/DDB0 : F2                                   DB    H(STACK)
 2658/DDB1 : 8E                                   DB    L(STACK)
 2658/DDB2 :                                      SHIFT
 2658/DDB2 :  (MACRO-2)                           DO    
 2658/DDB2 : =>BLANK                             IFNB   
 2658/DDB2 :                                      DB    H()
 2658/DDB2 :                                      DB    L()
 2658/DDB2 :                                      SHIFT
 2658/DDB2 :                                      DO    
 2658/DDB2 : [2658]                              ENDIF
 2658/DDB2 : [2658]                              ENDIF
 2659/DDB2 : (MACRO)                    	DO	FABS
 2659/DDB2 : =>NOT BLANK                         IFNB   FABS
 2659/DDB2 : F1                                   DB    H(FABS)
 2659/DDB3 : A8                                   DB    L(FABS)
 2659/DDB4 :                                      SHIFT
 2659/DDB4 :  (MACRO-2)                           DO    
 2659/DDB4 : =>BLANK                             IFNB   
 2659/DDB4 :                                      DB    H()
 2659/DDB4 :                                      DB    L()
 2659/DDB4 :                                      SHIFT
 2659/DDB4 :                                      DO    
 2659/DDB4 : [2659]                              ENDIF
 2659/DDB4 : [2659]                              ENDIF
 2660/DDB4 : (MACRO)                    	DO	STBCK
 2660/DDB4 : =>NOT BLANK                         IFNB   STBCK
 2660/DDB4 : E6                                   DB    H(STBCK)
 2660/DDB5 : 74                                   DB    L(STBCK)
 2660/DDB6 :                                      SHIFT
 2660/DDB6 :  (MACRO-2)                           DO    
 2660/DDB6 : =>BLANK                             IFNB   
 2660/DDB6 :                                      DB    H()
 2660/DDB6 :                                      DB    L()
 2660/DDB6 :                                      SHIFT
 2660/DDB6 :                                      DO    
 2660/DDB6 : [2660]                              ENDIF
 2660/DDB6 : [2660]                              ENDIF
 2661/DDB6 : (MACRO)                    RF4:	TSTSTR	RF5,T_ATN		; handle ATN(x)
 2661/DDB6 : 9D                                  DB     H(RF5 - TSTBITH)
 2661/DDB7 : C1                                  DB     L(RF5)
 2661/DDB8 : AD                                  DB     T_ATN
 2662/DDB9 : (MACRO)                    	ILCALL	SNGL
 2662/DDB9 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2662/DDBA : 70                                  DB     L(SNGL)
 2663/DDBB : (MACRO)                    	DO	STACK
 2663/DDBB : =>NOT BLANK                         IFNB   STACK
 2663/DDBB : F2                                   DB    H(STACK)
 2663/DDBC : 8E                                   DB    L(STACK)
 2663/DDBD :                                      SHIFT
 2663/DDBD :  (MACRO-2)                           DO    
 2663/DDBD : =>BLANK                             IFNB   
 2663/DDBD :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 133 - 2024年05月30日 19時01分01秒


 2663/DDBD :                                      DB    L()
 2663/DDBD :                                      SHIFT
 2663/DDBD :                                      DO    
 2663/DDBD : [2663]                              ENDIF
 2663/DDBD : [2663]                              ENDIF
 2664/DDBD : (MACRO)                    	DO	ATN
 2664/DDBD : =>NOT BLANK                         IFNB   ATN
 2664/DDBD : F8                                   DB    H(ATN)
 2664/DDBE : AF                                   DB    L(ATN)
 2664/DDBF :                                      SHIFT
 2664/DDBF :  (MACRO-2)                           DO    
 2664/DDBF : =>BLANK                             IFNB   
 2664/DDBF :                                      DB    H()
 2664/DDBF :                                      DB    L()
 2664/DDBF :                                      SHIFT
 2664/DDBF :                                      DO    
 2664/DDBF : [2664]                              ENDIF
 2664/DDBF : [2664]                              ENDIF
 2665/DDBF : (MACRO)                    	DO	STBCK
 2665/DDBF : =>NOT BLANK                         IFNB   STBCK
 2665/DDBF : E6                                   DB    H(STBCK)
 2665/DDC0 : 74                                   DB    L(STBCK)
 2665/DDC1 :                                      SHIFT
 2665/DDC1 :  (MACRO-2)                           DO    
 2665/DDC1 : =>BLANK                             IFNB   
 2665/DDC1 :                                      DB    H()
 2665/DDC1 :                                      DB    L()
 2665/DDC1 :                                      SHIFT
 2665/DDC1 :                                      DO    
 2665/DDC1 : [2665]                              ENDIF
 2665/DDC1 : [2665]                              ENDIF
 2666/DDC1 : (MACRO)                    RF5:	TSTSTR	RF6,T_COS		; handle COS(x)
 2666/DDC1 : 9D                                  DB     H(RF6 - TSTBITH)
 2666/DDC2 : D0                                  DB     L(RF6)
 2666/DDC3 : AE                                  DB     T_COS
 2667/DDC4 : (MACRO)                    	ILCALL	SNGL
 2667/DDC4 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2667/DDC5 : 70                                  DB     L(SNGL)
 2668/DDC6 : (MACRO)                    	DO	STACK
 2668/DDC6 : =>NOT BLANK                         IFNB   STACK
 2668/DDC6 : F2                                   DB    H(STACK)
 2668/DDC7 : 8E                                   DB    L(STACK)
 2668/DDC8 :                                      SHIFT
 2668/DDC8 :  (MACRO-2)                           DO    
 2668/DDC8 : =>BLANK                             IFNB   
 2668/DDC8 :                                      DB    H()
 2668/DDC8 :                                      DB    L()
 2668/DDC8 :                                      SHIFT
 2668/DDC8 :                                      DO    
 2668/DDC8 : [2668]                              ENDIF
 2668/DDC8 : [2668]                              ENDIF
 2669/DDC8 : (MACRO)                    	DO	PI2
 2669/DDC8 : =>NOT BLANK                         IFNB   PI2
 2669/DDC8 : F9                                   DB    H(PI2)
 2669/DDC9 : A0                                   DB    L(PI2)
 2669/DDCA :                                      SHIFT
 2669/DDCA :  (MACRO-2)                           DO    
 2669/DDCA : =>BLANK                             IFNB   
 2669/DDCA :                                      DB    H()
 2669/DDCA :                                      DB    L()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 134 - 2024年05月30日 19時01分01秒


 2669/DDCA :                                      SHIFT
 2669/DDCA :                                      DO    
 2669/DDCA : [2669]                              ENDIF
 2669/DDCA : [2669]                              ENDIF
 2670/DDCA : (MACRO)                    	DO	FADD
 2670/DDCA : =>NOT BLANK                         IFNB   FADD
 2670/DDCA : F1                                   DB    H(FADD)
 2670/DDCB : 3C                                   DB    L(FADD)
 2670/DDCC :                                      SHIFT
 2670/DDCC :  (MACRO-2)                           DO    
 2670/DDCC : =>BLANK                             IFNB   
 2670/DDCC :                                      DB    H()
 2670/DDCC :                                      DB    L()
 2670/DDCC :                                      SHIFT
 2670/DDCC :                                      DO    
 2670/DDCC : [2670]                              ENDIF
 2670/DDCC : [2670]                              ENDIF
 2671/DDCC : (MACRO)                    	DO	SIN
 2671/DDCC : =>NOT BLANK                         IFNB   SIN
 2671/DDCC : F9                                   DB    H(SIN)
 2671/DDCD : C2                                   DB    L(SIN)
 2671/DDCE :                                      SHIFT
 2671/DDCE :  (MACRO-2)                           DO    
 2671/DDCE : =>BLANK                             IFNB   
 2671/DDCE :                                      DB    H()
 2671/DDCE :                                      DB    L()
 2671/DDCE :                                      SHIFT
 2671/DDCE :                                      DO    
 2671/DDCE : [2671]                              ENDIF
 2671/DDCE : [2671]                              ENDIF
 2672/DDCE : (MACRO)                    	DO	STBCK
 2672/DDCE : =>NOT BLANK                         IFNB   STBCK
 2672/DDCE : E6                                   DB    H(STBCK)
 2672/DDCF : 74                                   DB    L(STBCK)
 2672/DDD0 :                                      SHIFT
 2672/DDD0 :  (MACRO-2)                           DO    
 2672/DDD0 : =>BLANK                             IFNB   
 2672/DDD0 :                                      DB    H()
 2672/DDD0 :                                      DB    L()
 2672/DDD0 :                                      SHIFT
 2672/DDD0 :                                      DO    
 2672/DDD0 : [2672]                              ENDIF
 2672/DDD0 : [2672]                              ENDIF
 2673/DDD0 : (MACRO)                    RF6:	TSTSTR	RF7,T_EXP		; handle EXP(x)
 2673/DDD0 : 9D                                  DB     H(RF7 - TSTBITH)
 2673/DDD1 : DF                                  DB     L(RF7)
 2673/DDD2 : AF                                  DB     T_EXP
 2674/DDD3 : (MACRO)                    	ILCALL	SNGL
 2674/DDD3 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2674/DDD4 : 70                                  DB     L(SNGL)
 2675/DDD5 : (MACRO)                    	DO	STACK
 2675/DDD5 : =>NOT BLANK                         IFNB   STACK
 2675/DDD5 : F2                                   DB    H(STACK)
 2675/DDD6 : 8E                                   DB    L(STACK)
 2675/DDD7 :                                      SHIFT
 2675/DDD7 :  (MACRO-2)                           DO    
 2675/DDD7 : =>BLANK                             IFNB   
 2675/DDD7 :                                      DB    H()
 2675/DDD7 :                                      DB    L()
 2675/DDD7 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 135 - 2024年05月30日 19時01分01秒


 2675/DDD7 :                                      DO    
 2675/DDD7 : [2675]                              ENDIF
 2675/DDD7 : [2675]                              ENDIF
 2676/DDD7 : (MACRO)                    	DO	LN2
 2676/DDD7 : =>NOT BLANK                         IFNB   LN2
 2676/DDD7 : F4                                   DB    H(LN2)
 2676/DDD8 : C6                                   DB    L(LN2)
 2676/DDD9 :                                      SHIFT
 2676/DDD9 :  (MACRO-2)                           DO    
 2676/DDD9 : =>BLANK                             IFNB   
 2676/DDD9 :                                      DB    H()
 2676/DDD9 :                                      DB    L()
 2676/DDD9 :                                      SHIFT
 2676/DDD9 :                                      DO    
 2676/DDD9 : [2676]                              ENDIF
 2676/DDD9 : [2676]                              ENDIF
 2677/DDD9 : (MACRO)                    	DO	FDIV
 2677/DDD9 : =>NOT BLANK                         IFNB   FDIV
 2677/DDD9 : F0                                   DB    H(FDIV)
 2677/DDDA : 78                                   DB    L(FDIV)
 2677/DDDB :                                      SHIFT
 2677/DDDB :  (MACRO-2)                           DO    
 2677/DDDB : =>BLANK                             IFNB   
 2677/DDDB :                                      DB    H()
 2677/DDDB :                                      DB    L()
 2677/DDDB :                                      SHIFT
 2677/DDDB :                                      DO    
 2677/DDDB : [2677]                              ENDIF
 2677/DDDB : [2677]                              ENDIF
 2678/DDDB : (MACRO)                    	DO	EXP2
 2678/DDDB : =>NOT BLANK                         IFNB   EXP2
 2678/DDDB : F5                                   DB    H(EXP2)
 2678/DDDC : 98                                   DB    L(EXP2)
 2678/DDDD :                                      SHIFT
 2678/DDDD :  (MACRO-2)                           DO    
 2678/DDDD : =>BLANK                             IFNB   
 2678/DDDD :                                      DB    H()
 2678/DDDD :                                      DB    L()
 2678/DDDD :                                      SHIFT
 2678/DDDD :                                      DO    
 2678/DDDD : [2678]                              ENDIF
 2678/DDDD : [2678]                              ENDIF
 2679/DDDD : (MACRO)                    	DO	STBCK
 2679/DDDD : =>NOT BLANK                         IFNB   STBCK
 2679/DDDD : E6                                   DB    H(STBCK)
 2679/DDDE : 74                                   DB    L(STBCK)
 2679/DDDF :                                      SHIFT
 2679/DDDF :  (MACRO-2)                           DO    
 2679/DDDF : =>BLANK                             IFNB   
 2679/DDDF :                                      DB    H()
 2679/DDDF :                                      DB    L()
 2679/DDDF :                                      SHIFT
 2679/DDDF :                                      DO    
 2679/DDDF : [2679]                              ENDIF
 2679/DDDF : [2679]                              ENDIF
 2680/DDDF : (MACRO)                    RF7:	TSTSTR	RF8,T_FN		; handle FN
 2680/DDDF : 9E                                  DB     H(RF8 - TSTBITH)
 2680/DDE0 : 2F                                  DB     L(RF8)
 2680/DDE1 : B0                                  DB     T_FN
 2681/DDE2 : (MACRO)                    	TSTVAR	SYNTAX
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 136 - 2024年05月30日 19時01分01秒


 2681/DDE2 : B9                                  DB     H(SYNTAX - CALBITH)
 2681/DDE3 : 42                                  DB     L(SYNTAX)
 2682/DDE4 : (MACRO)                    	DO	FNDDEF
 2682/DDE4 : =>NOT BLANK                         IFNB   FNDDEF
 2682/DDE4 : FD                                   DB    H(FNDDEF)
 2682/DDE5 : F3                                   DB    L(FNDDEF)
 2682/DDE6 :                                      SHIFT
 2682/DDE6 :  (MACRO-2)                           DO    
 2682/DDE6 : =>BLANK                             IFNB   
 2682/DDE6 :                                      DB    H()
 2682/DDE6 :                                      DB    L()
 2682/DDE6 :                                      SHIFT
 2682/DDE6 :                                      DO    
 2682/DDE6 : [2682]                              ENDIF
 2682/DDE6 : [2682]                              ENDIF
 2683/DDE6 : (MACRO)                    	TSTSTR	FN6,'('
 2683/DDE6 : 9E                                  DB     H(FN6 - TSTBITH)
 2683/DDE7 : 24                                  DB     L(FN6)
 2683/DDE8 : 28                                  DB     '('
 2684/DDE9 : (MACRO)                    	DO	XCHPNT
 2684/DDE9 : =>NOT BLANK                         IFNB   XCHPNT
 2684/DDE9 : E9                                   DB    H(XCHPNT)
 2684/DDEA : 1E                                   DB    L(XCHPNT)
 2684/DDEB :                                      SHIFT
 2684/DDEB :  (MACRO-2)                           DO    
 2684/DDEB : =>BLANK                             IFNB   
 2684/DDEB :                                      DB    H()
 2684/DDEB :                                      DB    L()
 2684/DDEB :                                      SHIFT
 2684/DDEB :                                      DO    
 2684/DDEB : [2684]                              ENDIF
 2684/DDEB : [2684]                              ENDIF
 2685/DDEB : (MACRO)                    	TSTSTR	SYNTAX,'('
 2685/DDEB : 99                                  DB     H(SYNTAX - TSTBITH)
 2685/DDEC : 42                                  DB     L(SYNTAX)
 2685/DDED : 28                                  DB     '('
 2686/DDEE : (MACRO)                    FN1:	DO	XCHPNT
 2686/DDEE : =>NOT BLANK                         IFNB   XCHPNT
 2686/DDEE : E9                                   DB    H(XCHPNT)
 2686/DDEF : 1E                                   DB    L(XCHPNT)
 2686/DDF0 :                                      SHIFT
 2686/DDF0 :  (MACRO-2)                           DO    
 2686/DDF0 : =>BLANK                             IFNB   
 2686/DDF0 :                                      DB    H()
 2686/DDF0 :                                      DB    L()
 2686/DDF0 :                                      SHIFT
 2686/DDF0 :                                      DO    
 2686/DDF0 : [2686]                              ENDIF
 2686/DDF0 : [2686]                              ENDIF
 2687/DDF0 : (MACRO)                    	TSTVAR	FN7
 2687/DDF0 : BE                                  DB     H(FN7 - CALBITH)
 2687/DDF1 : 2D                                  DB     L(FN7)
 2688/DDF2 : (MACRO)                    	DO	FNDVAR
 2688/DDF2 : =>NOT BLANK                         IFNB   FNDVAR
 2688/DDF2 : E2                                   DB    H(FNDVAR)
 2688/DDF3 : E1                                   DB    L(FNDVAR)
 2688/DDF4 :                                      SHIFT
 2688/DDF4 :  (MACRO-2)                           DO    
 2688/DDF4 : =>BLANK                             IFNB   
 2688/DDF4 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 137 - 2024年05月30日 19時01分01秒


 2688/DDF4 :                                      DB    L()
 2688/DDF4 :                                      SHIFT
 2688/DDF4 :                                      DO    
 2688/DDF4 : [2688]                              ENDIF
 2688/DDF4 : [2688]                              ENDIF
 2689/DDF4 : (MACRO)                    	DO	DEFVAR
 2689/DDF4 : =>NOT BLANK                         IFNB   DEFVAR
 2689/DDF4 : E5                                   DB    H(DEFVAR)
 2689/DDF5 : 0E                                   DB    L(DEFVAR)
 2689/DDF6 :                                      SHIFT
 2689/DDF6 :  (MACRO-2)                           DO    
 2689/DDF6 : =>BLANK                             IFNB   
 2689/DDF6 :                                      DB    H()
 2689/DDF6 :                                      DB    L()
 2689/DDF6 :                                      SHIFT
 2689/DDF6 :                                      DO    
 2689/DDF6 : [2689]                              ENDIF
 2689/DDF6 : [2689]                              ENDIF
 2690/DDF6 : (MACRO)                    	TSTSTR	FN4,'('
 2690/DDF6 : 9E                                  DB     H(FN4 - TSTBITH)
 2690/DDF7 : 0D                                  DB     L(FN4)
 2690/DDF8 : 28                                  DB     '('
 2691/DDF9 : (MACRO)                    	ILCALL	INDEX
 2691/DDF9 : 1F                                  DB     H(INDEX - (JMPBITH + TSTBITH))
 2691/DDFA : 51                                  DB     L(INDEX)
 2692/DDFB : (MACRO)                    FN2:	DO	XCHPNT
 2692/DDFB : =>NOT BLANK                         IFNB   XCHPNT
 2692/DDFB : E9                                   DB    H(XCHPNT)
 2692/DDFC : 1E                                   DB    L(XCHPNT)
 2692/DDFD :                                      SHIFT
 2692/DDFD :  (MACRO-2)                           DO    
 2692/DDFD : =>BLANK                             IFNB   
 2692/DDFD :                                      DB    H()
 2692/DDFD :                                      DB    L()
 2692/DDFD :                                      SHIFT
 2692/DDFD :                                      DO    
 2692/DDFD : [2692]                              ENDIF
 2692/DDFD : [2692]                              ENDIF
 2693/DDFD : (MACRO)                    	ILCALL	REXPR
 2693/DDFD : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2693/DDFE : C6                                  DB     L(REXPR)
 2694/DDFF : (MACRO)                    	DO	STVAR
 2694/DDFF : =>NOT BLANK                         IFNB   STVAR
 2694/DDFF : E7                                   DB    H(STVAR)
 2694/DE00 : 8A                                   DB    L(STVAR)
 2694/DE01 :                                      SHIFT
 2694/DE01 :  (MACRO-2)                           DO    
 2694/DE01 : =>BLANK                             IFNB   
 2694/DE01 :                                      DB    H()
 2694/DE01 :                                      DB    L()
 2694/DE01 :                                      SHIFT
 2694/DE01 :                                      DO    
 2694/DE01 : [2694]                              ENDIF
 2694/DE01 : [2694]                              ENDIF
 2695/DE01 : (MACRO)                    FN3:	DO	XCHPNT
 2695/DE01 : =>NOT BLANK                         IFNB   XCHPNT
 2695/DE01 : E9                                   DB    H(XCHPNT)
 2695/DE02 : 1E                                   DB    L(XCHPNT)
 2695/DE03 :                                      SHIFT
 2695/DE03 :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 138 - 2024年05月30日 19時01分01秒


 2695/DE03 : =>BLANK                             IFNB   
 2695/DE03 :                                      DB    H()
 2695/DE03 :                                      DB    L()
 2695/DE03 :                                      SHIFT
 2695/DE03 :                                      DO    
 2695/DE03 : [2695]                              ENDIF
 2695/DE03 : [2695]                              ENDIF
 2696/DE03 : (MACRO)                    	TSTSTR	FN5,','
 2696/DE03 : 9E                                  DB     H(FN5 - TSTBITH)
 2696/DE04 : 1A                                  DB     L(FN5)
 2696/DE05 : 2C                                  DB     ','
 2697/DE06 : (MACRO)                    	DO	XCHPNT
 2697/DE06 : =>NOT BLANK                         IFNB   XCHPNT
 2697/DE06 : E9                                   DB    H(XCHPNT)
 2697/DE07 : 1E                                   DB    L(XCHPNT)
 2697/DE08 :                                      SHIFT
 2697/DE08 :  (MACRO-2)                           DO    
 2697/DE08 : =>BLANK                             IFNB   
 2697/DE08 :                                      DB    H()
 2697/DE08 :                                      DB    L()
 2697/DE08 :                                      SHIFT
 2697/DE08 :                                      DO    
 2697/DE08 : [2697]                              ENDIF
 2697/DE08 : [2697]                              ENDIF
 2698/DE08 : (MACRO)                    	TSTSTR	SYNTAX,','
 2698/DE08 : 99                                  DB     H(SYNTAX - TSTBITH)
 2698/DE09 : 42                                  DB     L(SYNTAX)
 2698/DE0A : 2C                                  DB     ','
 2699/DE0B : (MACRO)                    	GOTO	FN1
 2699/DE0B : 5D                                  DB     H(FN1 - JMPBITH)
 2699/DE0C : EE                                  DB     L(FN1)
 2700/DE0D : (MACRO)                    FN4:	TSTSTR	FN2,'$'
 2700/DE0D : 9D                                  DB     H(FN2 - TSTBITH)
 2700/DE0E : FB                                  DB     L(FN2)
 2700/DE0F : 24                                  DB     '$'
 2701/DE10 : (MACRO)                    	DO	LDVAR
 2701/DE10 : =>NOT BLANK                         IFNB   LDVAR
 2701/DE10 : E8                                   DB    H(LDVAR)
 2701/DE11 : 15                                   DB    L(LDVAR)
 2701/DE12 :                                      SHIFT
 2701/DE12 :  (MACRO-2)                           DO    
 2701/DE12 : =>BLANK                             IFNB   
 2701/DE12 :                                      DB    H()
 2701/DE12 :                                      DB    L()
 2701/DE12 :                                      SHIFT
 2701/DE12 :                                      DO    
 2701/DE12 : [2701]                              ENDIF
 2701/DE12 : [2701]                              ENDIF
 2702/DE12 : (MACRO)                    	DO	FIX
 2702/DE12 : =>NOT BLANK                         IFNB   FIX
 2702/DE12 : EB                                   DB    H(FIX)
 2702/DE13 : 2F                                   DB    L(FIX)
 2702/DE14 :                                      SHIFT
 2702/DE14 :  (MACRO-2)                           DO    
 2702/DE14 : =>BLANK                             IFNB   
 2702/DE14 :                                      DB    H()
 2702/DE14 :                                      DB    L()
 2702/DE14 :                                      SHIFT
 2702/DE14 :                                      DO    
 2702/DE14 : [2702]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 139 - 2024年05月30日 19時01分01秒


 2702/DE14 : [2702]                              ENDIF
 2703/DE14 : (MACRO)                    	DO	XCHPNT
 2703/DE14 : =>NOT BLANK                         IFNB   XCHPNT
 2703/DE14 : E9                                   DB    H(XCHPNT)
 2703/DE15 : 1E                                   DB    L(XCHPNT)
 2703/DE16 :                                      SHIFT
 2703/DE16 :  (MACRO-2)                           DO    
 2703/DE16 : =>BLANK                             IFNB   
 2703/DE16 :                                      DB    H()
 2703/DE16 :                                      DB    L()
 2703/DE16 :                                      SHIFT
 2703/DE16 :                                      DO    
 2703/DE16 : [2703]                              ENDIF
 2703/DE16 : [2703]                              ENDIF
 2704/DE16 : (MACRO)                    	ILCALL	STREXP
 2704/DE16 : 1B                                  DB     H(STREXP - (JMPBITH + TSTBITH))
 2704/DE17 : 92                                  DB     L(STREXP)
 2705/DE18 : (MACRO)                    	GOTO	FN3
 2705/DE18 : 5E                                  DB     H(FN3 - JMPBITH)
 2705/DE19 : 01                                  DB     L(FN3)
 2706/DE1A : (MACRO)                    FN5:	DO	XCHPNT
 2706/DE1A : =>NOT BLANK                         IFNB   XCHPNT
 2706/DE1A : E9                                   DB    H(XCHPNT)
 2706/DE1B : 1E                                   DB    L(XCHPNT)
 2706/DE1C :                                      SHIFT
 2706/DE1C :  (MACRO-2)                           DO    
 2706/DE1C : =>BLANK                             IFNB   
 2706/DE1C :                                      DB    H()
 2706/DE1C :                                      DB    L()
 2706/DE1C :                                      SHIFT
 2706/DE1C :                                      DO    
 2706/DE1C : [2706]                              ENDIF
 2706/DE1C : [2706]                              ENDIF
 2707/DE1C : (MACRO)                    	TSTSTR	ENDPAR,')'
 2707/DE1C : 99                                  DB     H(ENDPAR - TSTBITH)
 2707/DE1D : 2F                                  DB     L(ENDPAR)
 2707/DE1E : 29                                  DB     ')'
 2708/DE1F : (MACRO)                    	DO	XCHPNT
 2708/DE1F : =>NOT BLANK                         IFNB   XCHPNT
 2708/DE1F : E9                                   DB    H(XCHPNT)
 2708/DE20 : 1E                                   DB    L(XCHPNT)
 2708/DE21 :                                      SHIFT
 2708/DE21 :  (MACRO-2)                           DO    
 2708/DE21 : =>BLANK                             IFNB   
 2708/DE21 :                                      DB    H()
 2708/DE21 :                                      DB    L()
 2708/DE21 :                                      SHIFT
 2708/DE21 :                                      DO    
 2708/DE21 : [2708]                              ENDIF
 2708/DE21 : [2708]                              ENDIF
 2709/DE21 : (MACRO)                    	TSTSTR	FN7,')'
 2709/DE21 : 9E                                  DB     H(FN7 - TSTBITH)
 2709/DE22 : 2D                                  DB     L(FN7)
 2709/DE23 : 29                                  DB     ')'
 2710/DE24 : (MACRO)                    FN6:	TSTSTR	FN7,'='
 2710/DE24 : 9E                                  DB     H(FN7 - TSTBITH)
 2710/DE25 : 2D                                  DB     L(FN7)
 2710/DE26 : 3D                                  DB     '='
 2711/DE27 : (MACRO)                    	DO	FNT
 2711/DE27 : =>NOT BLANK                         IFNB   FNT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 140 - 2024年05月30日 19時01分01秒


 2711/DE27 : FE                                   DB    H(FNT)
 2711/DE28 : 5D                                   DB    L(FNT)
 2711/DE29 :                                      SHIFT
 2711/DE29 :  (MACRO-2)                           DO    
 2711/DE29 : =>BLANK                             IFNB   
 2711/DE29 :                                      DB    H()
 2711/DE29 :                                      DB    L()
 2711/DE29 :                                      SHIFT
 2711/DE29 :                                      DO    
 2711/DE29 : [2711]                              ENDIF
 2711/DE29 : [2711]                              ENDIF
 2712/DE29 : (MACRO)                    	ILCALL	REXPR
 2712/DE29 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2712/DE2A : C6                                  DB     L(REXPR)
 2713/DE2B : (MACRO)                    	DO	FNDNE
 2713/DE2B : =>NOT BLANK                         IFNB   FNDNE
 2713/DE2B : FE                                   DB    H(FNDNE)
 2713/DE2C : 6F                                   DB    L(FNDNE)
 2713/DE2D :                                      SHIFT
 2713/DE2D :  (MACRO-2)                           DO    
 2713/DE2D : =>BLANK                             IFNB   
 2713/DE2D :                                      DB    H()
 2713/DE2D :                                      DB    L()
 2713/DE2D :                                      SHIFT
 2713/DE2D :                                      DO    
 2713/DE2D : [2713]                              ENDIF
 2713/DE2D : [2713]                              ENDIF
 2714/DE2D : (MACRO)                    FN7:	DO	FNERR
 2714/DE2D : =>NOT BLANK                         IFNB   FNERR
 2714/DE2D : FE                                   DB    H(FNERR)
 2714/DE2E : 35                                   DB    L(FNERR)
 2714/DE2F :                                      SHIFT
 2714/DE2F :  (MACRO-2)                           DO    
 2714/DE2F : =>BLANK                             IFNB   
 2714/DE2F :                                      DB    H()
 2714/DE2F :                                      DB    L()
 2714/DE2F :                                      SHIFT
 2714/DE2F :                                      DO    
 2714/DE2F : [2714]                              ENDIF
 2714/DE2F : [2714]                              ENDIF
 2715/DE2F : (MACRO)                    RF8:	TSTSTR	RF9,T_INT		; handle INT(x)
 2715/DE2F : 9E                                  DB     H(RF9 - TSTBITH)
 2715/DE30 : 3A                                  DB     L(RF9)
 2715/DE31 : B1                                  DB     T_INT
 2716/DE32 : (MACRO)                    	ILCALL	SNGL
 2716/DE32 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2716/DE33 : 70                                  DB     L(SNGL)
 2717/DE34 : (MACRO)                    	DO	STACK
 2717/DE34 : =>NOT BLANK                         IFNB   STACK
 2717/DE34 : F2                                   DB    H(STACK)
 2717/DE35 : 8E                                   DB    L(STACK)
 2717/DE36 :                                      SHIFT
 2717/DE36 :  (MACRO-2)                           DO    
 2717/DE36 : =>BLANK                             IFNB   
 2717/DE36 :                                      DB    H()
 2717/DE36 :                                      DB    L()
 2717/DE36 :                                      SHIFT
 2717/DE36 :                                      DO    
 2717/DE36 : [2717]                              ENDIF
 2717/DE36 : [2717]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 141 - 2024年05月30日 19時01分01秒


 2718/DE36 : (MACRO)                    	DO	INT
 2718/DE36 : =>NOT BLANK                         IFNB   INT
 2718/DE36 : F2                                   DB    H(INT)
 2718/DE37 : 02                                   DB    L(INT)
 2718/DE38 :                                      SHIFT
 2718/DE38 :  (MACRO-2)                           DO    
 2718/DE38 : =>BLANK                             IFNB   
 2718/DE38 :                                      DB    H()
 2718/DE38 :                                      DB    L()
 2718/DE38 :                                      SHIFT
 2718/DE38 :                                      DO    
 2718/DE38 : [2718]                              ENDIF
 2718/DE38 : [2718]                              ENDIF
 2719/DE38 : (MACRO)                    	DO	STBCK
 2719/DE38 : =>NOT BLANK                         IFNB   STBCK
 2719/DE38 : E6                                   DB    H(STBCK)
 2719/DE39 : 74                                   DB    L(STBCK)
 2719/DE3A :                                      SHIFT
 2719/DE3A :  (MACRO-2)                           DO    
 2719/DE3A : =>BLANK                             IFNB   
 2719/DE3A :                                      DB    H()
 2719/DE3A :                                      DB    L()
 2719/DE3A :                                      SHIFT
 2719/DE3A :                                      DO    
 2719/DE3A : [2719]                              ENDIF
 2719/DE3A : [2719]                              ENDIF
 2720/DE3A : (MACRO)                    RF9:	TSTSTR	RF10,T_LB		; handle LB(x)
 2720/DE3A : 9E                                  DB     H(RF10 - TSTBITH)
 2720/DE3B : 45                                  DB     L(RF10)
 2720/DE3C : B2                                  DB     T_LB
 2721/DE3D : (MACRO)                    	ILCALL	SNGL
 2721/DE3D : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2721/DE3E : 70                                  DB     L(SNGL)
 2722/DE3F : (MACRO)                    	DO	STACK
 2722/DE3F : =>NOT BLANK                         IFNB   STACK
 2722/DE3F : F2                                   DB    H(STACK)
 2722/DE40 : 8E                                   DB    L(STACK)
 2722/DE41 :                                      SHIFT
 2722/DE41 :  (MACRO-2)                           DO    
 2722/DE41 : =>BLANK                             IFNB   
 2722/DE41 :                                      DB    H()
 2722/DE41 :                                      DB    L()
 2722/DE41 :                                      SHIFT
 2722/DE41 :                                      DO    
 2722/DE41 : [2722]                              ENDIF
 2722/DE41 : [2722]                              ENDIF
 2723/DE41 : (MACRO)                    	DO	LOG2
 2723/DE41 : =>NOT BLANK                         IFNB   LOG2
 2723/DE41 : F4                                   DB    H(LOG2)
 2723/DE42 : D8                                   DB    L(LOG2)
 2723/DE43 :                                      SHIFT
 2723/DE43 :  (MACRO-2)                           DO    
 2723/DE43 : =>BLANK                             IFNB   
 2723/DE43 :                                      DB    H()
 2723/DE43 :                                      DB    L()
 2723/DE43 :                                      SHIFT
 2723/DE43 :                                      DO    
 2723/DE43 : [2723]                              ENDIF
 2723/DE43 : [2723]                              ENDIF
 2724/DE43 : (MACRO)                    	DO	STBCK
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 142 - 2024年05月30日 19時01分01秒


 2724/DE43 : =>NOT BLANK                         IFNB   STBCK
 2724/DE43 : E6                                   DB    H(STBCK)
 2724/DE44 : 74                                   DB    L(STBCK)
 2724/DE45 :                                      SHIFT
 2724/DE45 :  (MACRO-2)                           DO    
 2724/DE45 : =>BLANK                             IFNB   
 2724/DE45 :                                      DB    H()
 2724/DE45 :                                      DB    L()
 2724/DE45 :                                      SHIFT
 2724/DE45 :                                      DO    
 2724/DE45 : [2724]                              ENDIF
 2724/DE45 : [2724]                              ENDIF
 2725/DE45 : (MACRO)                    RF10:	TSTSTR	RF11,T_LG		; handle LG(x)
 2725/DE45 : 9E                                  DB     H(RF11 - TSTBITH)
 2725/DE46 : 54                                  DB     L(RF11)
 2725/DE47 : B3                                  DB     T_LG
 2726/DE48 : (MACRO)                    	ILCALL	SNGL
 2726/DE48 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2726/DE49 : 70                                  DB     L(SNGL)
 2727/DE4A : (MACRO)                    	DO	STACK
 2727/DE4A : =>NOT BLANK                         IFNB   STACK
 2727/DE4A : F2                                   DB    H(STACK)
 2727/DE4B : 8E                                   DB    L(STACK)
 2727/DE4C :                                      SHIFT
 2727/DE4C :  (MACRO-2)                           DO    
 2727/DE4C : =>BLANK                             IFNB   
 2727/DE4C :                                      DB    H()
 2727/DE4C :                                      DB    L()
 2727/DE4C :                                      SHIFT
 2727/DE4C :                                      DO    
 2727/DE4C : [2727]                              ENDIF
 2727/DE4C : [2727]                              ENDIF
 2728/DE4C : (MACRO)                    	DO	LOG2
 2728/DE4C : =>NOT BLANK                         IFNB   LOG2
 2728/DE4C : F4                                   DB    H(LOG2)
 2728/DE4D : D8                                   DB    L(LOG2)
 2728/DE4E :                                      SHIFT
 2728/DE4E :  (MACRO-2)                           DO    
 2728/DE4E : =>BLANK                             IFNB   
 2728/DE4E :                                      DB    H()
 2728/DE4E :                                      DB    L()
 2728/DE4E :                                      SHIFT
 2728/DE4E :                                      DO    
 2728/DE4E : [2728]                              ENDIF
 2728/DE4E : [2728]                              ENDIF
 2729/DE4E : (MACRO)                    	DO	LG2
 2729/DE4E : =>NOT BLANK                         IFNB   LG2
 2729/DE4E : F4                                   DB    H(LG2)
 2729/DE4F : B6                                   DB    L(LG2)
 2729/DE50 :                                      SHIFT
 2729/DE50 :  (MACRO-2)                           DO    
 2729/DE50 : =>BLANK                             IFNB   
 2729/DE50 :                                      DB    H()
 2729/DE50 :                                      DB    L()
 2729/DE50 :                                      SHIFT
 2729/DE50 :                                      DO    
 2729/DE50 : [2729]                              ENDIF
 2729/DE50 : [2729]                              ENDIF
 2730/DE50 : (MACRO)                    	DO	FMUL
 2730/DE50 : =>NOT BLANK                         IFNB   FMUL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 143 - 2024年05月30日 19時01分01秒


 2730/DE50 : F0                                   DB    H(FMUL)
 2730/DE51 : E3                                   DB    L(FMUL)
 2730/DE52 :                                      SHIFT
 2730/DE52 :  (MACRO-2)                           DO    
 2730/DE52 : =>BLANK                             IFNB   
 2730/DE52 :                                      DB    H()
 2730/DE52 :                                      DB    L()
 2730/DE52 :                                      SHIFT
 2730/DE52 :                                      DO    
 2730/DE52 : [2730]                              ENDIF
 2730/DE52 : [2730]                              ENDIF
 2731/DE52 : (MACRO)                    	DO	STBCK
 2731/DE52 : =>NOT BLANK                         IFNB   STBCK
 2731/DE52 : E6                                   DB    H(STBCK)
 2731/DE53 : 74                                   DB    L(STBCK)
 2731/DE54 :                                      SHIFT
 2731/DE54 :  (MACRO-2)                           DO    
 2731/DE54 : =>BLANK                             IFNB   
 2731/DE54 :                                      DB    H()
 2731/DE54 :                                      DB    L()
 2731/DE54 :                                      SHIFT
 2731/DE54 :                                      DO    
 2731/DE54 : [2731]                              ENDIF
 2731/DE54 : [2731]                              ENDIF
 2732/DE54 : (MACRO)                    RF11:	TSTSTR	RF12,T_LN		; handle LN(x)
 2732/DE54 : 9E                                  DB     H(RF12 - TSTBITH)
 2732/DE55 : 63                                  DB     L(RF12)
 2732/DE56 : B4                                  DB     T_LN
 2733/DE57 : (MACRO)                    	ILCALL	SNGL
 2733/DE57 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2733/DE58 : 70                                  DB     L(SNGL)
 2734/DE59 : (MACRO)                    	DO	STACK
 2734/DE59 : =>NOT BLANK                         IFNB   STACK
 2734/DE59 : F2                                   DB    H(STACK)
 2734/DE5A : 8E                                   DB    L(STACK)
 2734/DE5B :                                      SHIFT
 2734/DE5B :  (MACRO-2)                           DO    
 2734/DE5B : =>BLANK                             IFNB   
 2734/DE5B :                                      DB    H()
 2734/DE5B :                                      DB    L()
 2734/DE5B :                                      SHIFT
 2734/DE5B :                                      DO    
 2734/DE5B : [2734]                              ENDIF
 2734/DE5B : [2734]                              ENDIF
 2735/DE5B : (MACRO)                    	DO	LOG2
 2735/DE5B : =>NOT BLANK                         IFNB   LOG2
 2735/DE5B : F4                                   DB    H(LOG2)
 2735/DE5C : D8                                   DB    L(LOG2)
 2735/DE5D :                                      SHIFT
 2735/DE5D :  (MACRO-2)                           DO    
 2735/DE5D : =>BLANK                             IFNB   
 2735/DE5D :                                      DB    H()
 2735/DE5D :                                      DB    L()
 2735/DE5D :                                      SHIFT
 2735/DE5D :                                      DO    
 2735/DE5D : [2735]                              ENDIF
 2735/DE5D : [2735]                              ENDIF
 2736/DE5D : (MACRO)                    	DO	LN2
 2736/DE5D : =>NOT BLANK                         IFNB   LN2
 2736/DE5D : F4                                   DB    H(LN2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 144 - 2024年05月30日 19時01分01秒


 2736/DE5E : C6                                   DB    L(LN2)
 2736/DE5F :                                      SHIFT
 2736/DE5F :  (MACRO-2)                           DO    
 2736/DE5F : =>BLANK                             IFNB   
 2736/DE5F :                                      DB    H()
 2736/DE5F :                                      DB    L()
 2736/DE5F :                                      SHIFT
 2736/DE5F :                                      DO    
 2736/DE5F : [2736]                              ENDIF
 2736/DE5F : [2736]                              ENDIF
 2737/DE5F : (MACRO)                    	DO	FMUL
 2737/DE5F : =>NOT BLANK                         IFNB   FMUL
 2737/DE5F : F0                                   DB    H(FMUL)
 2737/DE60 : E3                                   DB    L(FMUL)
 2737/DE61 :                                      SHIFT
 2737/DE61 :  (MACRO-2)                           DO    
 2737/DE61 : =>BLANK                             IFNB   
 2737/DE61 :                                      DB    H()
 2737/DE61 :                                      DB    L()
 2737/DE61 :                                      SHIFT
 2737/DE61 :                                      DO    
 2737/DE61 : [2737]                              ENDIF
 2737/DE61 : [2737]                              ENDIF
 2738/DE61 : (MACRO)                    	DO	STBCK
 2738/DE61 : =>NOT BLANK                         IFNB   STBCK
 2738/DE61 : E6                                   DB    H(STBCK)
 2738/DE62 : 74                                   DB    L(STBCK)
 2738/DE63 :                                      SHIFT
 2738/DE63 :  (MACRO-2)                           DO    
 2738/DE63 : =>BLANK                             IFNB   
 2738/DE63 :                                      DB    H()
 2738/DE63 :                                      DB    L()
 2738/DE63 :                                      SHIFT
 2738/DE63 :                                      DO    
 2738/DE63 : [2738]                              ENDIF
 2738/DE63 : [2738]                              ENDIF
 2739/DE63 : (MACRO)                    RF12:	TSTSTR	RF13,T_NOT		; handle ! (not)
 2739/DE63 : 9E                                  DB     H(RF13 - TSTBITH)
 2739/DE64 : 6E                                  DB     L(RF13)
 2739/DE65 : B5                                  DB     T_NOT
 2740/DE66 : (MACRO)                    	ILCALL	RFACTR
 2740/DE66 : 1D                                  DB     H(RFACTR - (JMPBITH + TSTBITH))
 2740/DE67 : 79                                  DB     L(RFACTR)
 2741/DE68 : (MACRO)                    	DO	STACK
 2741/DE68 : =>NOT BLANK                         IFNB   STACK
 2741/DE68 : F2                                   DB    H(STACK)
 2741/DE69 : 8E                                   DB    L(STACK)
 2741/DE6A :                                      SHIFT
 2741/DE6A :  (MACRO-2)                           DO    
 2741/DE6A : =>BLANK                             IFNB   
 2741/DE6A :                                      DB    H()
 2741/DE6A :                                      DB    L()
 2741/DE6A :                                      SHIFT
 2741/DE6A :                                      DO    
 2741/DE6A : [2741]                              ENDIF
 2741/DE6A : [2741]                              ENDIF
 2742/DE6A : (MACRO)                    	DO	NOT
 2742/DE6A : =>NOT BLANK                         IFNB   NOT
 2742/DE6A : F1                                   DB    H(NOT)
 2742/DE6B : 82                                   DB    L(NOT)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 145 - 2024年05月30日 19時01分01秒


 2742/DE6C :                                      SHIFT
 2742/DE6C :  (MACRO-2)                           DO    
 2742/DE6C : =>BLANK                             IFNB   
 2742/DE6C :                                      DB    H()
 2742/DE6C :                                      DB    L()
 2742/DE6C :                                      SHIFT
 2742/DE6C :                                      DO    
 2742/DE6C : [2742]                              ENDIF
 2742/DE6C : [2742]                              ENDIF
 2743/DE6C : (MACRO)                    	DO	STBCK
 2743/DE6C : =>NOT BLANK                         IFNB   STBCK
 2743/DE6C : E6                                   DB    H(STBCK)
 2743/DE6D : 74                                   DB    L(STBCK)
 2743/DE6E :                                      SHIFT
 2743/DE6E :  (MACRO-2)                           DO    
 2743/DE6E : =>BLANK                             IFNB   
 2743/DE6E :                                      DB    H()
 2743/DE6E :                                      DB    L()
 2743/DE6E :                                      SHIFT
 2743/DE6E :                                      DO    
 2743/DE6E : [2743]                              ENDIF
 2743/DE6E : [2743]                              ENDIF
 2744/DE6E : (MACRO)                    RF13:	TSTSTR	RF14,T_PI
 2744/DE6E : 9E                                  DB     H(RF14 - TSTBITH)
 2744/DE6F : 73                                  DB     L(RF14)
 2744/DE70 : B6                                  DB     T_PI
 2745/DE71 : (MACRO)                    	DO	PI
 2745/DE71 : =>NOT BLANK                         IFNB   PI
 2745/DE71 : FA                                   DB    H(PI)
 2745/DE72 : A0                                   DB    L(PI)
 2745/DE73 :                                      SHIFT
 2745/DE73 :  (MACRO-2)                           DO    
 2745/DE73 : =>BLANK                             IFNB   
 2745/DE73 :                                      DB    H()
 2745/DE73 :                                      DB    L()
 2745/DE73 :                                      SHIFT
 2745/DE73 :                                      DO    
 2745/DE73 : [2745]                              ENDIF
 2745/DE73 : [2745]                              ENDIF
 2746/DE73 : (MACRO)                    RF14:	TSTSTR	RF15,T_RND		; handle RND(x)
 2746/DE73 : 9E                                  DB     H(RF15 - TSTBITH)
 2746/DE74 : 7E                                  DB     L(RF15)
 2746/DE75 : B7                                  DB     T_RND
 2747/DE76 : (MACRO)                    	DO	STACK
 2747/DE76 : =>NOT BLANK                         IFNB   STACK
 2747/DE76 : F2                                   DB    H(STACK)
 2747/DE77 : 8E                                   DB    L(STACK)
 2747/DE78 :                                      SHIFT
 2747/DE78 :  (MACRO-2)                           DO    
 2747/DE78 : =>BLANK                             IFNB   
 2747/DE78 :                                      DB    H()
 2747/DE78 :                                      DB    L()
 2747/DE78 :                                      SHIFT
 2747/DE78 :                                      DO    
 2747/DE78 : [2747]                              ENDIF
 2747/DE78 : [2747]                              ENDIF
 2748/DE78 : (MACRO)                    	DO	RND
 2748/DE78 : =>NOT BLANK                         IFNB   RND
 2748/DE78 : FA                                   DB    H(RND)
 2748/DE79 : CC                                   DB    L(RND)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 146 - 2024年05月30日 19時01分01秒


 2748/DE7A :                                      SHIFT
 2748/DE7A :  (MACRO-2)                           DO    
 2748/DE7A : =>BLANK                             IFNB   
 2748/DE7A :                                      DB    H()
 2748/DE7A :                                      DB    L()
 2748/DE7A :                                      SHIFT
 2748/DE7A :                                      DO    
 2748/DE7A : [2748]                              ENDIF
 2748/DE7A : [2748]                              ENDIF
 2749/DE7A : (MACRO)                    	DO	NORM
 2749/DE7A : =>NOT BLANK                         IFNB   NORM
 2749/DE7A : F1                                   DB    H(NORM)
 2749/DE7B : C4                                   DB    L(NORM)
 2749/DE7C :                                      SHIFT
 2749/DE7C :  (MACRO-2)                           DO    
 2749/DE7C : =>BLANK                             IFNB   
 2749/DE7C :                                      DB    H()
 2749/DE7C :                                      DB    L()
 2749/DE7C :                                      SHIFT
 2749/DE7C :                                      DO    
 2749/DE7C : [2749]                              ENDIF
 2749/DE7C : [2749]                              ENDIF
 2750/DE7C : (MACRO)                    	DO	STBCK
 2750/DE7C : =>NOT BLANK                         IFNB   STBCK
 2750/DE7C : E6                                   DB    H(STBCK)
 2750/DE7D : 74                                   DB    L(STBCK)
 2750/DE7E :                                      SHIFT
 2750/DE7E :  (MACRO-2)                           DO    
 2750/DE7E : =>BLANK                             IFNB   
 2750/DE7E :                                      DB    H()
 2750/DE7E :                                      DB    L()
 2750/DE7E :                                      SHIFT
 2750/DE7E :                                      DO    
 2750/DE7E : [2750]                              ENDIF
 2750/DE7E : [2750]                              ENDIF
 2751/DE7E : (MACRO)                    RF15:	TSTSTR	RF16,T_SGN		; handle SGN(x)
 2751/DE7E : 9E                                  DB     H(RF16 - TSTBITH)
 2751/DE7F : 85                                  DB     L(RF16)
 2751/DE80 : B8                                  DB     T_SGN
 2752/DE81 : (MACRO)                    	ILCALL	SNGL
 2752/DE81 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2752/DE82 : 70                                  DB     L(SNGL)
 2753/DE83 : (MACRO)                    	DO	SGN
 2753/DE83 : =>NOT BLANK                         IFNB   SGN
 2753/DE83 : FB                                   DB    H(SGN)
 2753/DE84 : 20                                   DB    L(SGN)
 2753/DE85 :                                      SHIFT
 2753/DE85 :  (MACRO-2)                           DO    
 2753/DE85 : =>BLANK                             IFNB   
 2753/DE85 :                                      DB    H()
 2753/DE85 :                                      DB    L()
 2753/DE85 :                                      SHIFT
 2753/DE85 :                                      DO    
 2753/DE85 : [2753]                              ENDIF
 2753/DE85 : [2753]                              ENDIF
 2754/DE85 : (MACRO)                    RF16:	TSTSTR	RF17,T_SIN		; handle SIN(x)
 2754/DE85 : 9E                                  DB     H(RF17 - TSTBITH)
 2754/DE86 : 90                                  DB     L(RF17)
 2754/DE87 : B9                                  DB     T_SIN
 2755/DE88 : (MACRO)                    	ILCALL	SNGL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 147 - 2024年05月30日 19時01分01秒


 2755/DE88 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2755/DE89 : 70                                  DB     L(SNGL)
 2756/DE8A : (MACRO)                    	DO	STACK
 2756/DE8A : =>NOT BLANK                         IFNB   STACK
 2756/DE8A : F2                                   DB    H(STACK)
 2756/DE8B : 8E                                   DB    L(STACK)
 2756/DE8C :                                      SHIFT
 2756/DE8C :  (MACRO-2)                           DO    
 2756/DE8C : =>BLANK                             IFNB   
 2756/DE8C :                                      DB    H()
 2756/DE8C :                                      DB    L()
 2756/DE8C :                                      SHIFT
 2756/DE8C :                                      DO    
 2756/DE8C : [2756]                              ENDIF
 2756/DE8C : [2756]                              ENDIF
 2757/DE8C : (MACRO)                    	DO	SIN
 2757/DE8C : =>NOT BLANK                         IFNB   SIN
 2757/DE8C : F9                                   DB    H(SIN)
 2757/DE8D : C2                                   DB    L(SIN)
 2757/DE8E :                                      SHIFT
 2757/DE8E :  (MACRO-2)                           DO    
 2757/DE8E : =>BLANK                             IFNB   
 2757/DE8E :                                      DB    H()
 2757/DE8E :                                      DB    L()
 2757/DE8E :                                      SHIFT
 2757/DE8E :                                      DO    
 2757/DE8E : [2757]                              ENDIF
 2757/DE8E : [2757]                              ENDIF
 2758/DE8E : (MACRO)                    	DO	STBCK
 2758/DE8E : =>NOT BLANK                         IFNB   STBCK
 2758/DE8E : E6                                   DB    H(STBCK)
 2758/DE8F : 74                                   DB    L(STBCK)
 2758/DE90 :                                      SHIFT
 2758/DE90 :  (MACRO-2)                           DO    
 2758/DE90 : =>BLANK                             IFNB   
 2758/DE90 :                                      DB    H()
 2758/DE90 :                                      DB    L()
 2758/DE90 :                                      SHIFT
 2758/DE90 :                                      DO    
 2758/DE90 : [2758]                              ENDIF
 2758/DE90 : [2758]                              ENDIF
 2759/DE90 : (MACRO)                    RF17:	TSTSTR	RF18,T_SQR		; handle SQR(x)
 2759/DE90 : 9E                                  DB     H(RF18 - TSTBITH)
 2759/DE91 : 9B                                  DB     L(RF18)
 2759/DE92 : BA                                  DB     T_SQR
 2760/DE93 : (MACRO)                    	ILCALL	SNGL
 2760/DE93 : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2760/DE94 : 70                                  DB     L(SNGL)
 2761/DE95 : (MACRO)                    	DO	STACK
 2761/DE95 : =>NOT BLANK                         IFNB   STACK
 2761/DE95 : F2                                   DB    H(STACK)
 2761/DE96 : 8E                                   DB    L(STACK)
 2761/DE97 :                                      SHIFT
 2761/DE97 :  (MACRO-2)                           DO    
 2761/DE97 : =>BLANK                             IFNB   
 2761/DE97 :                                      DB    H()
 2761/DE97 :                                      DB    L()
 2761/DE97 :                                      SHIFT
 2761/DE97 :                                      DO    
 2761/DE97 : [2761]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 148 - 2024年05月30日 19時01分01秒


 2761/DE97 : [2761]                              ENDIF
 2762/DE97 : (MACRO)                    	DO	SQRT
 2762/DE97 : =>NOT BLANK                         IFNB   SQRT
 2762/DE97 : FB                                   DB    H(SQRT)
 2762/DE98 : 43                                   DB    L(SQRT)
 2762/DE99 :                                      SHIFT
 2762/DE99 :  (MACRO-2)                           DO    
 2762/DE99 : =>BLANK                             IFNB   
 2762/DE99 :                                      DB    H()
 2762/DE99 :                                      DB    L()
 2762/DE99 :                                      SHIFT
 2762/DE99 :                                      DO    
 2762/DE99 : [2762]                              ENDIF
 2762/DE99 : [2762]                              ENDIF
 2763/DE99 : (MACRO)                    	DO	STBCK
 2763/DE99 : =>NOT BLANK                         IFNB   STBCK
 2763/DE99 : E6                                   DB    H(STBCK)
 2763/DE9A : 74                                   DB    L(STBCK)
 2763/DE9B :                                      SHIFT
 2763/DE9B :  (MACRO-2)                           DO    
 2763/DE9B : =>BLANK                             IFNB   
 2763/DE9B :                                      DB    H()
 2763/DE9B :                                      DB    L()
 2763/DE9B :                                      SHIFT
 2763/DE9B :                                      DO    
 2763/DE9B : [2763]                              ENDIF
 2763/DE9B : [2763]                              ENDIF
 2764/DE9B : (MACRO)                    RF18:	TSTSTR	RF19,T_TAN		; handle TAN(x)
 2764/DE9B : 9E                                  DB     H(RF19 - TSTBITH)
 2764/DE9C : B0                                  DB     L(RF19)
 2764/DE9D : BB                                  DB     T_TAN
 2765/DE9E : (MACRO)                    	ILCALL	SNGL
 2765/DE9E : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2765/DE9F : 70                                  DB     L(SNGL)
 2766/DEA0 : (MACRO)                    	DO	STACK
 2766/DEA0 : =>NOT BLANK                         IFNB   STACK
 2766/DEA0 : F2                                   DB    H(STACK)
 2766/DEA1 : 8E                                   DB    L(STACK)
 2766/DEA2 :                                      SHIFT
 2766/DEA2 :  (MACRO-2)                           DO    
 2766/DEA2 : =>BLANK                             IFNB   
 2766/DEA2 :                                      DB    H()
 2766/DEA2 :                                      DB    L()
 2766/DEA2 :                                      SHIFT
 2766/DEA2 :                                      DO    
 2766/DEA2 : [2766]                              ENDIF
 2766/DEA2 : [2766]                              ENDIF
 2767/DEA2 : (MACRO)                    	DO	TAN
 2767/DEA2 : =>NOT BLANK                         IFNB   TAN
 2767/DEA2 : F9                                   DB    H(TAN)
 2767/DEA3 : B2                                   DB    L(TAN)
 2767/DEA4 :                                      SHIFT
 2767/DEA4 :  (MACRO-2)                           DO    
 2767/DEA4 : =>BLANK                             IFNB   
 2767/DEA4 :                                      DB    H()
 2767/DEA4 :                                      DB    L()
 2767/DEA4 :                                      SHIFT
 2767/DEA4 :                                      DO    
 2767/DEA4 : [2767]                              ENDIF
 2767/DEA4 : [2767]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 149 - 2024年05月30日 19時01分01秒


 2768/DEA4 : (MACRO)                    	DO	SWAP
 2768/DEA4 : =>NOT BLANK                         IFNB   SWAP
 2768/DEA4 : F0                                   DB    H(SWAP)
 2768/DEA5 : 35                                   DB    L(SWAP)
 2768/DEA6 :                                      SHIFT
 2768/DEA6 :  (MACRO-2)                           DO    
 2768/DEA6 : =>BLANK                             IFNB   
 2768/DEA6 :                                      DB    H()
 2768/DEA6 :                                      DB    L()
 2768/DEA6 :                                      SHIFT
 2768/DEA6 :                                      DO    
 2768/DEA6 : [2768]                              ENDIF
 2768/DEA6 : [2768]                              ENDIF
 2769/DEA6 : (MACRO)                    	DO	PI2
 2769/DEA6 : =>NOT BLANK                         IFNB   PI2
 2769/DEA6 : F9                                   DB    H(PI2)
 2769/DEA7 : A0                                   DB    L(PI2)
 2769/DEA8 :                                      SHIFT
 2769/DEA8 :  (MACRO-2)                           DO    
 2769/DEA8 : =>BLANK                             IFNB   
 2769/DEA8 :                                      DB    H()
 2769/DEA8 :                                      DB    L()
 2769/DEA8 :                                      SHIFT
 2769/DEA8 :                                      DO    
 2769/DEA8 : [2769]                              ENDIF
 2769/DEA8 : [2769]                              ENDIF
 2770/DEA8 : (MACRO)                    	DO	FADD
 2770/DEA8 : =>NOT BLANK                         IFNB   FADD
 2770/DEA8 : F1                                   DB    H(FADD)
 2770/DEA9 : 3C                                   DB    L(FADD)
 2770/DEAA :                                      SHIFT
 2770/DEAA :  (MACRO-2)                           DO    
 2770/DEAA : =>BLANK                             IFNB   
 2770/DEAA :                                      DB    H()
 2770/DEAA :                                      DB    L()
 2770/DEAA :                                      SHIFT
 2770/DEAA :                                      DO    
 2770/DEAA : [2770]                              ENDIF
 2770/DEAA : [2770]                              ENDIF
 2771/DEAA : (MACRO)                    	DO	SIN
 2771/DEAA : =>NOT BLANK                         IFNB   SIN
 2771/DEAA : F9                                   DB    H(SIN)
 2771/DEAB : C2                                   DB    L(SIN)
 2771/DEAC :                                      SHIFT
 2771/DEAC :  (MACRO-2)                           DO    
 2771/DEAC : =>BLANK                             IFNB   
 2771/DEAC :                                      DB    H()
 2771/DEAC :                                      DB    L()
 2771/DEAC :                                      SHIFT
 2771/DEAC :                                      DO    
 2771/DEAC : [2771]                              ENDIF
 2771/DEAC : [2771]                              ENDIF
 2772/DEAC : (MACRO)                    	DO	FDIV
 2772/DEAC : =>NOT BLANK                         IFNB   FDIV
 2772/DEAC : F0                                   DB    H(FDIV)
 2772/DEAD : 78                                   DB    L(FDIV)
 2772/DEAE :                                      SHIFT
 2772/DEAE :  (MACRO-2)                           DO    
 2772/DEAE : =>BLANK                             IFNB   
 2772/DEAE :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 150 - 2024年05月30日 19時01分01秒


 2772/DEAE :                                      DB    L()
 2772/DEAE :                                      SHIFT
 2772/DEAE :                                      DO    
 2772/DEAE : [2772]                              ENDIF
 2772/DEAE : [2772]                              ENDIF
 2773/DEAE : (MACRO)                    	DO	STBCK
 2773/DEAE : =>NOT BLANK                         IFNB   STBCK
 2773/DEAE : E6                                   DB    H(STBCK)
 2773/DEAF : 74                                   DB    L(STBCK)
 2773/DEB0 :                                      SHIFT
 2773/DEB0 :  (MACRO-2)                           DO    
 2773/DEB0 : =>BLANK                             IFNB   
 2773/DEB0 :                                      DB    H()
 2773/DEB0 :                                      DB    L()
 2773/DEB0 :                                      SHIFT
 2773/DEB0 :                                      DO    
 2773/DEB0 : [2773]                              ENDIF
 2773/DEB0 : [2773]                              ENDIF
 2774/DEB0 : (MACRO)                    RF19:	TSTSTR	RF21,T_VAL		; handle VAL(x$)
 2774/DEB0 : 9E                                  DB     H(RF21 - TSTBITH)
 2774/DEB1 : D5                                  DB     L(RF21)
 2774/DEB2 : BC                                  DB     T_VAL
 2775/DEB3 : (MACRO)                    	TSTSTR	SYNTAX,'('
 2775/DEB3 : 99                                  DB     H(SYNTAX - TSTBITH)
 2775/DEB4 : 42                                  DB     L(SYNTAX)
 2775/DEB5 : 28                                  DB     '('
 2776/DEB6 : (MACRO)                    	TSTVAR	SYNTAX
 2776/DEB6 : B9                                  DB     H(SYNTAX - CALBITH)
 2776/DEB7 : 42                                  DB     L(SYNTAX)
 2777/DEB8 : (MACRO)                    	DO	FNDVAR
 2777/DEB8 : =>NOT BLANK                         IFNB   FNDVAR
 2777/DEB8 : E2                                   DB    H(FNDVAR)
 2777/DEB9 : E1                                   DB    L(FNDVAR)
 2777/DEBA :                                      SHIFT
 2777/DEBA :  (MACRO-2)                           DO    
 2777/DEBA : =>BLANK                             IFNB   
 2777/DEBA :                                      DB    H()
 2777/DEBA :                                      DB    L()
 2777/DEBA :                                      SHIFT
 2777/DEBA :                                      DO    
 2777/DEBA : [2777]                              ENDIF
 2777/DEBA : [2777]                              ENDIF
 2778/DEBA : (MACRO)                    	DO	CKDLLR
 2778/DEBA : =>NOT BLANK                         IFNB   CKDLLR
 2778/DEBA : EE                                   DB    H(CKDLLR)
 2778/DEBB : 7F                                   DB    L(CKDLLR)
 2778/DEBC :                                      SHIFT
 2778/DEBC :  (MACRO-2)                           DO    
 2778/DEBC : =>BLANK                             IFNB   
 2778/DEBC :                                      DB    H()
 2778/DEBC :                                      DB    L()
 2778/DEBC :                                      SHIFT
 2778/DEBC :                                      DO    
 2778/DEBC : [2778]                              ENDIF
 2778/DEBC : [2778]                              ENDIF
 2779/DEBC : (MACRO)                    	DO	LDVAR
 2779/DEBC : =>NOT BLANK                         IFNB   LDVAR
 2779/DEBC : E8                                   DB    H(LDVAR)
 2779/DEBD : 15                                   DB    L(LDVAR)
 2779/DEBE :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 151 - 2024年05月30日 19時01分01秒


 2779/DEBE :  (MACRO-2)                           DO    
 2779/DEBE : =>BLANK                             IFNB   
 2779/DEBE :                                      DB    H()
 2779/DEBE :                                      DB    L()
 2779/DEBE :                                      SHIFT
 2779/DEBE :                                      DO    
 2779/DEBE : [2779]                              ENDIF
 2779/DEBE : [2779]                              ENDIF
 2780/DEBE : (MACRO)                    	DO	FIX
 2780/DEBE : =>NOT BLANK                         IFNB   FIX
 2780/DEBE : EB                                   DB    H(FIX)
 2780/DEBF : 2F                                   DB    L(FIX)
 2780/DEC0 :                                      SHIFT
 2780/DEC0 :  (MACRO-2)                           DO    
 2780/DEC0 : =>BLANK                             IFNB   
 2780/DEC0 :                                      DB    H()
 2780/DEC0 :                                      DB    L()
 2780/DEC0 :                                      SHIFT
 2780/DEC0 :                                      DO    
 2780/DEC0 : [2780]                              ENDIF
 2780/DEC0 : [2780]                              ENDIF
 2781/DEC0 : (MACRO)                    	DO	VALSTR
 2781/DEC0 : =>NOT BLANK                         IFNB   VALSTR
 2781/DEC0 : FB                                   DB    H(VALSTR)
 2781/DEC1 : BB                                   DB    L(VALSTR)
 2781/DEC2 :                                      SHIFT
 2781/DEC2 :  (MACRO-2)                           DO    
 2781/DEC2 : =>BLANK                             IFNB   
 2781/DEC2 :                                      DB    H()
 2781/DEC2 :                                      DB    L()
 2781/DEC2 :                                      SHIFT
 2781/DEC2 :                                      DO    
 2781/DEC2 : [2781]                              ENDIF
 2781/DEC2 : [2781]                              ENDIF
 2782/DEC2 : (MACRO)                    	TSTSTR	RF20,'-'
 2782/DEC2 : 9E                                  DB     H(RF20 - TSTBITH)
 2782/DEC3 : CE                                  DB     L(RF20)
 2782/DEC4 : 2D                                  DB     '-'
 2783/DEC5 : (MACRO)                    	TSTNUM	SYNTAX
 2783/DEC5 : D9                                  DB     H(SYNTAX)
 2783/DEC6 : 42                                  DB     L(SYNTAX)
 2784/DEC7 : (MACRO)                    	ILCALL	RNUM
 2784/DEC7 : 1D                                  DB     H(RNUM - (JMPBITH + TSTBITH))
 2784/DEC8 : 7B                                  DB     L(RNUM)
 2785/DEC9 : (MACRO)                    	ILCALL	NEG
 2785/DEC9 : 1A                                  DB     H(NEG - (JMPBITH + TSTBITH))
 2785/DECA : E7                                  DB     L(NEG)
 2786/DECB : (MACRO)                    	DO	XCHPNT
 2786/DECB : =>NOT BLANK                         IFNB   XCHPNT
 2786/DECB : E9                                   DB    H(XCHPNT)
 2786/DECC : 1E                                   DB    L(XCHPNT)
 2786/DECD :                                      SHIFT
 2786/DECD :  (MACRO-2)                           DO    
 2786/DECD : =>BLANK                             IFNB   
 2786/DECD :                                      DB    H()
 2786/DECD :                                      DB    L()
 2786/DECD :                                      SHIFT
 2786/DECD :                                      DO    
 2786/DECD : [2786]                              ENDIF
 2786/DECD : [2786]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 152 - 2024年05月30日 19時01分01秒


 2787/DECD : (MACRO)                    	ILRTRN
 2787/DECD : 00                                  DB     0
 2788/DECE : (MACRO)                    RF20:	TSTNUM	SYNTAX
 2788/DECE : D9                                  DB     H(SYNTAX)
 2788/DECF : 42                                  DB     L(SYNTAX)
 2789/DED0 : (MACRO)                    	ILCALL	RNUM
 2789/DED0 : 1D                                  DB     H(RNUM - (JMPBITH + TSTBITH))
 2789/DED1 : 7B                                  DB     L(RNUM)
 2790/DED2 : (MACRO)                    	DO	XCHPNT
 2790/DED2 : =>NOT BLANK                         IFNB   XCHPNT
 2790/DED2 : E9                                   DB    H(XCHPNT)
 2790/DED3 : 1E                                   DB    L(XCHPNT)
 2790/DED4 :                                      SHIFT
 2790/DED4 :  (MACRO-2)                           DO    
 2790/DED4 : =>BLANK                             IFNB   
 2790/DED4 :                                      DB    H()
 2790/DED4 :                                      DB    L()
 2790/DED4 :                                      SHIFT
 2790/DED4 :                                      DO    
 2790/DED4 : [2790]                              ENDIF
 2790/DED4 : [2790]                              ENDIF
 2791/DED4 : (MACRO)                    	ILRTRN
 2791/DED4 : 00                                  DB     0
 2792/DED5 :                            
 2793/DED5 : (MACRO)                    RF21:	ILCALL	FACTOR
 2793/DED5 : 1E                                  DB     H(FACTOR - (JMPBITH + TSTBITH))
 2793/DED6 : D9                                  DB     L(FACTOR)
 2794/DED7 : (MACRO)                    	DO	FLOAT2
 2794/DED7 : =>NOT BLANK                         IFNB   FLOAT2
 2794/DED7 : FB                                   DB    H(FLOAT2)
 2794/DED8 : D2                                   DB    L(FLOAT2)
 2794/DED9 :                                      SHIFT
 2794/DED9 :  (MACRO-2)                           DO    
 2794/DED9 : =>BLANK                             IFNB   
 2794/DED9 :                                      DB    H()
 2794/DED9 :                                      DB    L()
 2794/DED9 :                                      SHIFT
 2794/DED9 :                                      DO    
 2794/DED9 : [2794]                              ENDIF
 2794/DED9 : [2794]                              ENDIF
 2795/DED9 : (MACRO)                    FACTOR:	TSTSTR	FCTR1,'#'
 2795/DED9 : 9E                                  DB     H(FCTR1 - TSTBITH)
 2795/DEDA : DE                                  DB     L(FCTR1)
 2795/DEDB : 23                                  DB     '#'
 2796/DEDC : (MACRO)                    	DO	HEX
 2796/DEDC : =>NOT BLANK                         IFNB   HEX
 2796/DEDC : EE                                   DB    H(HEX)
 2796/DEDD : FA                                   DB    L(HEX)
 2796/DEDE :                                      SHIFT
 2796/DEDE :  (MACRO-2)                           DO    
 2796/DEDE : =>BLANK                             IFNB   
 2796/DEDE :                                      DB    H()
 2796/DEDE :                                      DB    L()
 2796/DEDE :                                      SHIFT
 2796/DEDE :                                      DO    
 2796/DEDE : [2796]                              ENDIF
 2796/DEDE : [2796]                              ENDIF
 2797/DEDE : (MACRO)                    FCTR1:	TSTSTR	FCTR3,T_ASC		; handle ASC(str)..
 2797/DEDE : 9E                                  DB     H(FCTR3 - TSTBITH)
 2797/DEDF : F5                                  DB     L(FCTR3)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 153 - 2024年05月30日 19時01分01秒


 2797/DEE0 : BD                                  DB     T_ASC
 2798/DEE1 : (MACRO)                    	TSTSTR	SYNTAX,'('
 2798/DEE1 : 99                                  DB     H(SYNTAX - TSTBITH)
 2798/DEE2 : 42                                  DB     L(SYNTAX)
 2798/DEE3 : 28                                  DB     '('
 2799/DEE4 : (MACRO)                    	TSTSTR	FCTR2,'"'
 2799/DEE4 : 9E                                  DB     H(FCTR2 - TSTBITH)
 2799/DEE5 : E9                                  DB     L(FCTR2)
 2799/DEE6 : 22                                  DB     '"'
 2800/DEE7 : (MACRO)                    	DO	ASC			; ..for quoted string
 2800/DEE7 : =>NOT BLANK                         IFNB   ASC
 2800/DEE7 : EE                                   DB    H(ASC)
 2800/DEE8 : 04                                   DB    L(ASC)
 2800/DEE9 :                                      SHIFT
 2800/DEE9 :  (MACRO-2)                           DO    
 2800/DEE9 : =>BLANK                             IFNB   
 2800/DEE9 :                                      DB    H()
 2800/DEE9 :                                      DB    L()
 2800/DEE9 :                                      SHIFT
 2800/DEE9 :                                      DO    
 2800/DEE9 : [2800]                              ENDIF
 2800/DEE9 : [2800]                              ENDIF
 2801/DEE9 : (MACRO)                    FCTR2:	TSTVAR	SYNTAX
 2801/DEE9 : B9                                  DB     H(SYNTAX - CALBITH)
 2801/DEEA : 42                                  DB     L(SYNTAX)
 2802/DEEB : (MACRO)                    	DO	FNDVAR
 2802/DEEB : =>NOT BLANK                         IFNB   FNDVAR
 2802/DEEB : E2                                   DB    H(FNDVAR)
 2802/DEEC : E1                                   DB    L(FNDVAR)
 2802/DEED :                                      SHIFT
 2802/DEED :  (MACRO-2)                           DO    
 2802/DEED : =>BLANK                             IFNB   
 2802/DEED :                                      DB    H()
 2802/DEED :                                      DB    L()
 2802/DEED :                                      SHIFT
 2802/DEED :                                      DO    
 2802/DEED : [2802]                              ENDIF
 2802/DEED : [2802]                              ENDIF
 2803/DEED : (MACRO)                    	DO	CKDLLR
 2803/DEED : =>NOT BLANK                         IFNB   CKDLLR
 2803/DEED : EE                                   DB    H(CKDLLR)
 2803/DEEE : 7F                                   DB    L(CKDLLR)
 2803/DEEF :                                      SHIFT
 2803/DEEF :  (MACRO-2)                           DO    
 2803/DEEF : =>BLANK                             IFNB   
 2803/DEEF :                                      DB    H()
 2803/DEEF :                                      DB    L()
 2803/DEEF :                                      SHIFT
 2803/DEEF :                                      DO    
 2803/DEEF : [2803]                              ENDIF
 2803/DEEF : [2803]                              ENDIF
 2804/DEEF : (MACRO)                    	DO	LDVAR
 2804/DEEF : =>NOT BLANK                         IFNB   LDVAR
 2804/DEEF : E8                                   DB    H(LDVAR)
 2804/DEF0 : 15                                   DB    L(LDVAR)
 2804/DEF1 :                                      SHIFT
 2804/DEF1 :  (MACRO-2)                           DO    
 2804/DEF1 : =>BLANK                             IFNB   
 2804/DEF1 :                                      DB    H()
 2804/DEF1 :                                      DB    L()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 154 - 2024年05月30日 19時01分01秒


 2804/DEF1 :                                      SHIFT
 2804/DEF1 :                                      DO    
 2804/DEF1 : [2804]                              ENDIF
 2804/DEF1 : [2804]                              ENDIF
 2805/DEF1 : (MACRO)                    	DO	FIX
 2805/DEF1 : =>NOT BLANK                         IFNB   FIX
 2805/DEF1 : EB                                   DB    H(FIX)
 2805/DEF2 : 2F                                   DB    L(FIX)
 2805/DEF3 :                                      SHIFT
 2805/DEF3 :  (MACRO-2)                           DO    
 2805/DEF3 : =>BLANK                             IFNB   
 2805/DEF3 :                                      DB    H()
 2805/DEF3 :                                      DB    L()
 2805/DEF3 :                                      SHIFT
 2805/DEF3 :                                      DO    
 2805/DEF3 : [2805]                              ENDIF
 2805/DEF3 : [2805]                              ENDIF
 2806/DEF3 : (MACRO)                    	DO	ASTRNG			; ..for string variable
 2806/DEF3 : =>NOT BLANK                         IFNB   ASTRNG
 2806/DEF3 : EE                                   DB    H(ASTRNG)
 2806/DEF4 : 1F                                   DB    L(ASTRNG)
 2806/DEF5 :                                      SHIFT
 2806/DEF5 :  (MACRO-2)                           DO    
 2806/DEF5 : =>BLANK                             IFNB   
 2806/DEF5 :                                      DB    H()
 2806/DEF5 :                                      DB    L()
 2806/DEF5 :                                      SHIFT
 2806/DEF5 :                                      DO    
 2806/DEF5 : [2806]                              ENDIF
 2806/DEF5 : [2806]                              ENDIF
 2807/DEF5 : (MACRO)                    FCTR3:	TSTSTR	FCTR4,T_FREE		; handle FREE
 2807/DEF5 : 9E                                  DB     H(FCTR4 - TSTBITH)
 2807/DEF6 : FC                                  DB     L(FCTR4)
 2807/DEF7 : BE                                  DB     T_FREE
 2808/DEF8 : (MACRO)                    	DO	TOP
 2808/DEF8 : =>NOT BLANK                         IFNB   TOP
 2808/DEF8 : EE                                   DB    H(TOP)
 2808/DEF9 : A3                                   DB    L(TOP)
 2808/DEFA :                                      SHIFT
 2808/DEFA :  (MACRO-2)                           DO    
 2808/DEFA : =>BLANK                             IFNB   
 2808/DEFA :                                      DB    H()
 2808/DEFA :                                      DB    L()
 2808/DEFA :                                      SHIFT
 2808/DEFA :                                      DO    
 2808/DEFA : [2808]                              ENDIF
 2808/DEFA : [2808]                              ENDIF
 2809/DEFA : (MACRO)                    	DO	FREE
 2809/DEFA : =>NOT BLANK                         IFNB   FREE
 2809/DEFA : EE                                   DB    H(FREE)
 2809/DEFB : D7                                   DB    L(FREE)
 2809/DEFC :                                      SHIFT
 2809/DEFC :  (MACRO-2)                           DO    
 2809/DEFC : =>BLANK                             IFNB   
 2809/DEFC :                                      DB    H()
 2809/DEFC :                                      DB    L()
 2809/DEFC :                                      SHIFT
 2809/DEFC :                                      DO    
 2809/DEFC : [2809]                              ENDIF
 2809/DEFC : [2809]                              ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 155 - 2024年05月30日 19時01分01秒


 2810/DEFC : (MACRO)                    FCTR4:	TSTSTR	FCTR6,T_LEN		; handle LEN(x)..
 2810/DEFC : 9F                                  DB     H(FCTR6 - TSTBITH)
 2810/DEFD : 13                                  DB     L(FCTR6)
 2810/DEFE : BF                                  DB     T_LEN
 2811/DEFF : (MACRO)                    	TSTSTR	SYNTAX,'('
 2811/DEFF : 99                                  DB     H(SYNTAX - TSTBITH)
 2811/DF00 : 42                                  DB     L(SYNTAX)
 2811/DF01 : 28                                  DB     '('
 2812/DF02 : (MACRO)                    	TSTSTR	FCTR5,'"'
 2812/DF02 : 9F                                  DB     H(FCTR5 - TSTBITH)
 2812/DF03 : 07                                  DB     L(FCTR5)
 2812/DF04 : 22                                  DB     '"'
 2813/DF05 : (MACRO)                    	DO	LEN			; ..for quoted string
 2813/DF05 : =>NOT BLANK                         IFNB   LEN
 2813/DF05 : EE                                   DB    H(LEN)
 2813/DF06 : 57                                   DB    L(LEN)
 2813/DF07 :                                      SHIFT
 2813/DF07 :  (MACRO-2)                           DO    
 2813/DF07 : =>BLANK                             IFNB   
 2813/DF07 :                                      DB    H()
 2813/DF07 :                                      DB    L()
 2813/DF07 :                                      SHIFT
 2813/DF07 :                                      DO    
 2813/DF07 : [2813]                              ENDIF
 2813/DF07 : [2813]                              ENDIF
 2814/DF07 : (MACRO)                    FCTR5:	TSTVAR	SYNTAX
 2814/DF07 : B9                                  DB     H(SYNTAX - CALBITH)
 2814/DF08 : 42                                  DB     L(SYNTAX)
 2815/DF09 : (MACRO)                    	DO	FNDVAR
 2815/DF09 : =>NOT BLANK                         IFNB   FNDVAR
 2815/DF09 : E2                                   DB    H(FNDVAR)
 2815/DF0A : E1                                   DB    L(FNDVAR)
 2815/DF0B :                                      SHIFT
 2815/DF0B :  (MACRO-2)                           DO    
 2815/DF0B : =>BLANK                             IFNB   
 2815/DF0B :                                      DB    H()
 2815/DF0B :                                      DB    L()
 2815/DF0B :                                      SHIFT
 2815/DF0B :                                      DO    
 2815/DF0B : [2815]                              ENDIF
 2815/DF0B : [2815]                              ENDIF
 2816/DF0B : (MACRO)                    	DO	CKDLLR
 2816/DF0B : =>NOT BLANK                         IFNB   CKDLLR
 2816/DF0B : EE                                   DB    H(CKDLLR)
 2816/DF0C : 7F                                   DB    L(CKDLLR)
 2816/DF0D :                                      SHIFT
 2816/DF0D :  (MACRO-2)                           DO    
 2816/DF0D : =>BLANK                             IFNB   
 2816/DF0D :                                      DB    H()
 2816/DF0D :                                      DB    L()
 2816/DF0D :                                      SHIFT
 2816/DF0D :                                      DO    
 2816/DF0D : [2816]                              ENDIF
 2816/DF0D : [2816]                              ENDIF
 2817/DF0D : (MACRO)                    	DO	LDVAR
 2817/DF0D : =>NOT BLANK                         IFNB   LDVAR
 2817/DF0D : E8                                   DB    H(LDVAR)
 2817/DF0E : 15                                   DB    L(LDVAR)
 2817/DF0F :                                      SHIFT
 2817/DF0F :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 156 - 2024年05月30日 19時01分01秒


 2817/DF0F : =>BLANK                             IFNB   
 2817/DF0F :                                      DB    H()
 2817/DF0F :                                      DB    L()
 2817/DF0F :                                      SHIFT
 2817/DF0F :                                      DO    
 2817/DF0F : [2817]                              ENDIF
 2817/DF0F : [2817]                              ENDIF
 2818/DF0F : (MACRO)                    	DO	FIX
 2818/DF0F : =>NOT BLANK                         IFNB   FIX
 2818/DF0F : EB                                   DB    H(FIX)
 2818/DF10 : 2F                                   DB    L(FIX)
 2818/DF11 :                                      SHIFT
 2818/DF11 :  (MACRO-2)                           DO    
 2818/DF11 : =>BLANK                             IFNB   
 2818/DF11 :                                      DB    H()
 2818/DF11 :                                      DB    L()
 2818/DF11 :                                      SHIFT
 2818/DF11 :                                      DO    
 2818/DF11 : [2818]                              ENDIF
 2818/DF11 : [2818]                              ENDIF
 2819/DF11 : (MACRO)                    	DO	LSTRNG			; ..for string variable
 2819/DF11 : =>NOT BLANK                         IFNB   LSTRNG
 2819/DF11 : EE                                   DB    H(LSTRNG)
 2819/DF12 : 39                                   DB    L(LSTRNG)
 2819/DF13 :                                      SHIFT
 2819/DF13 :  (MACRO-2)                           DO    
 2819/DF13 : =>BLANK                             IFNB   
 2819/DF13 :                                      DB    H()
 2819/DF13 :                                      DB    L()
 2819/DF13 :                                      SHIFT
 2819/DF13 :                                      DO    
 2819/DF13 : [2819]                              ENDIF
 2819/DF13 : [2819]                              ENDIF
 2820/DF13 : (MACRO)                    FCTR6:	TSTSTR	FCTR7,T_PAGE		; handle PAGE
 2820/DF13 : 9F                                  DB     H(FCTR7 - TSTBITH)
 2820/DF14 : 18                                  DB     L(FCTR7)
 2820/DF15 : 98                                  DB     T_PAGE
 2821/DF16 : (MACRO)                    	DO	PGE
 2821/DF16 : =>NOT BLANK                         IFNB   PGE
 2821/DF16 : FD                                   DB    H(PGE)
 2821/DF17 : E0                                   DB    L(PGE)
 2821/DF18 :                                      SHIFT
 2821/DF18 :  (MACRO-2)                           DO    
 2821/DF18 : =>BLANK                             IFNB   
 2821/DF18 :                                      DB    H()
 2821/DF18 :                                      DB    L()
 2821/DF18 :                                      SHIFT
 2821/DF18 :                                      DO    
 2821/DF18 : [2821]                              ENDIF
 2821/DF18 : [2821]                              ENDIF
 2822/DF18 : (MACRO)                    FCTR7:	TSTSTR	FCTR8,T_PEEK		; handle PEEK(x)
 2822/DF18 : 9F                                  DB     H(FCTR8 - TSTBITH)
 2822/DF19 : 21                                  DB     L(FCTR8)
 2822/DF1A : A8                                  DB     T_PEEK
 2823/DF1B : (MACRO)                    	ILCALL	SNGL
 2823/DF1B : 1D                                  DB     H(SNGL - (JMPBITH + TSTBITH))
 2823/DF1C : 70                                  DB     L(SNGL)
 2824/DF1D : (MACRO)                    	DO	FIX
 2824/DF1D : =>NOT BLANK                         IFNB   FIX
 2824/DF1D : EB                                   DB    H(FIX)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 157 - 2024年05月30日 19時01分01秒


 2824/DF1E : 2F                                   DB    L(FIX)
 2824/DF1F :                                      SHIFT
 2824/DF1F :  (MACRO-2)                           DO    
 2824/DF1F : =>BLANK                             IFNB   
 2824/DF1F :                                      DB    H()
 2824/DF1F :                                      DB    L()
 2824/DF1F :                                      SHIFT
 2824/DF1F :                                      DO    
 2824/DF1F : [2824]                              ENDIF
 2824/DF1F : [2824]                              ENDIF
 2825/DF1F : (MACRO)                    	DO	GETBYT
 2825/DF1F : =>NOT BLANK                         IFNB   GETBYT
 2825/DF1F : ED                                   DB    H(GETBYT)
 2825/DF20 : E8                                   DB    L(GETBYT)
 2825/DF21 :                                      SHIFT
 2825/DF21 :  (MACRO-2)                           DO    
 2825/DF21 : =>BLANK                             IFNB   
 2825/DF21 :                                      DB    H()
 2825/DF21 :                                      DB    L()
 2825/DF21 :                                      SHIFT
 2825/DF21 :                                      DO    
 2825/DF21 : [2825]                              ENDIF
 2825/DF21 : [2825]                              ENDIF
 2826/DF21 :                            ; FIXME: Keyword POS is not implemented,
 2827/DF21 :                            ;	the whole block until FCTR10 is not functional.
 2828/DF21 : (MACRO)                    FCTR8:	TSTSTR	FCTR10,T_POS		; handle POS(x$)
 2828/DF21 : 9F                                  DB     H(FCTR10 - TSTBITH)
 2828/DF22 : 44                                  DB     L(FCTR10)
 2828/DF23 : C0                                  DB     T_POS
 2829/DF24 : (MACRO)                    	TSTSTR	SYNTAX,'('
 2829/DF24 : 99                                  DB     H(SYNTAX - TSTBITH)
 2829/DF25 : 42                                  DB     L(SYNTAX)
 2829/DF26 : 28                                  DB     '('
 2830/DF27 : (MACRO)                    	TSTSTR	FCTR9,'"'
 2830/DF27 : 9F                                  DB     H(FCTR9 - TSTBITH)
 2830/DF28 : 38                                  DB     L(FCTR9)
 2830/DF29 : 22                                  DB     '"'
 2831/DF2A : (MACRO)                    	GOTO	SYNTAX
 2831/DF2A : 59                                  DB     H(SYNTAX - JMPBITH)
 2831/DF2B : 42                                  DB     L(SYNTAX)
 2832/DF2C : (MACRO)                    	TSTVAR	SYNTAX
 2832/DF2C : B9                                  DB     H(SYNTAX - CALBITH)
 2832/DF2D : 42                                  DB     L(SYNTAX)
 2833/DF2E : (MACRO)                    	DO	FNDVAR
 2833/DF2E : =>NOT BLANK                         IFNB   FNDVAR
 2833/DF2E : E2                                   DB    H(FNDVAR)
 2833/DF2F : E1                                   DB    L(FNDVAR)
 2833/DF30 :                                      SHIFT
 2833/DF30 :  (MACRO-2)                           DO    
 2833/DF30 : =>BLANK                             IFNB   
 2833/DF30 :                                      DB    H()
 2833/DF30 :                                      DB    L()
 2833/DF30 :                                      SHIFT
 2833/DF30 :                                      DO    
 2833/DF30 : [2833]                              ENDIF
 2833/DF30 : [2833]                              ENDIF
 2834/DF30 : (MACRO)                    	DO	CKDLLR
 2834/DF30 : =>NOT BLANK                         IFNB   CKDLLR
 2834/DF30 : EE                                   DB    H(CKDLLR)
 2834/DF31 : 7F                                   DB    L(CKDLLR)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 158 - 2024年05月30日 19時01分01秒


 2834/DF32 :                                      SHIFT
 2834/DF32 :  (MACRO-2)                           DO    
 2834/DF32 : =>BLANK                             IFNB   
 2834/DF32 :                                      DB    H()
 2834/DF32 :                                      DB    L()
 2834/DF32 :                                      SHIFT
 2834/DF32 :                                      DO    
 2834/DF32 : [2834]                              ENDIF
 2834/DF32 : [2834]                              ENDIF
 2835/DF32 : (MACRO)                    	DO	LDVAR
 2835/DF32 : =>NOT BLANK                         IFNB   LDVAR
 2835/DF32 : E8                                   DB    H(LDVAR)
 2835/DF33 : 15                                   DB    L(LDVAR)
 2835/DF34 :                                      SHIFT
 2835/DF34 :  (MACRO-2)                           DO    
 2835/DF34 : =>BLANK                             IFNB   
 2835/DF34 :                                      DB    H()
 2835/DF34 :                                      DB    L()
 2835/DF34 :                                      SHIFT
 2835/DF34 :                                      DO    
 2835/DF34 : [2835]                              ENDIF
 2835/DF34 : [2835]                              ENDIF
 2836/DF34 : (MACRO)                    	DO	FIX
 2836/DF34 : =>NOT BLANK                         IFNB   FIX
 2836/DF34 : EB                                   DB    H(FIX)
 2836/DF35 : 2F                                   DB    L(FIX)
 2836/DF36 :                                      SHIFT
 2836/DF36 :  (MACRO-2)                           DO    
 2836/DF36 : =>BLANK                             IFNB   
 2836/DF36 :                                      DB    H()
 2836/DF36 :                                      DB    L()
 2836/DF36 :                                      SHIFT
 2836/DF36 :                                      DO    
 2836/DF36 : [2836]                              ENDIF
 2836/DF36 : [2836]                              ENDIF
 2837/DF36 : (MACRO)                    	GOTO	SYNTAX
 2837/DF36 : 59                                  DB     H(SYNTAX - JMPBITH)
 2837/DF37 : 42                                  DB     L(SYNTAX)
 2838/DF38 : (MACRO)                    FCTR9:	TSTVAR	SYNTAX
 2838/DF38 : B9                                  DB     H(SYNTAX - CALBITH)
 2838/DF39 : 42                                  DB     L(SYNTAX)
 2839/DF3A : (MACRO)                    	DO	FNDVAR
 2839/DF3A : =>NOT BLANK                         IFNB   FNDVAR
 2839/DF3A : E2                                   DB    H(FNDVAR)
 2839/DF3B : E1                                   DB    L(FNDVAR)
 2839/DF3C :                                      SHIFT
 2839/DF3C :  (MACRO-2)                           DO    
 2839/DF3C : =>BLANK                             IFNB   
 2839/DF3C :                                      DB    H()
 2839/DF3C :                                      DB    L()
 2839/DF3C :                                      SHIFT
 2839/DF3C :                                      DO    
 2839/DF3C : [2839]                              ENDIF
 2839/DF3C : [2839]                              ENDIF
 2840/DF3C : (MACRO)                    	DO	CKDLLR
 2840/DF3C : =>NOT BLANK                         IFNB   CKDLLR
 2840/DF3C : EE                                   DB    H(CKDLLR)
 2840/DF3D : 7F                                   DB    L(CKDLLR)
 2840/DF3E :                                      SHIFT
 2840/DF3E :  (MACRO-2)                           DO    
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 159 - 2024年05月30日 19時01分01秒


 2840/DF3E : =>BLANK                             IFNB   
 2840/DF3E :                                      DB    H()
 2840/DF3E :                                      DB    L()
 2840/DF3E :                                      SHIFT
 2840/DF3E :                                      DO    
 2840/DF3E : [2840]                              ENDIF
 2840/DF3E : [2840]                              ENDIF
 2841/DF3E : (MACRO)                    	DO	LDVAR
 2841/DF3E : =>NOT BLANK                         IFNB   LDVAR
 2841/DF3E : E8                                   DB    H(LDVAR)
 2841/DF3F : 15                                   DB    L(LDVAR)
 2841/DF40 :                                      SHIFT
 2841/DF40 :  (MACRO-2)                           DO    
 2841/DF40 : =>BLANK                             IFNB   
 2841/DF40 :                                      DB    H()
 2841/DF40 :                                      DB    L()
 2841/DF40 :                                      SHIFT
 2841/DF40 :                                      DO    
 2841/DF40 : [2841]                              ENDIF
 2841/DF40 : [2841]                              ENDIF
 2842/DF40 : (MACRO)                    	DO	FIX
 2842/DF40 : =>NOT BLANK                         IFNB   FIX
 2842/DF40 : EB                                   DB    H(FIX)
 2842/DF41 : 2F                                   DB    L(FIX)
 2842/DF42 :                                      SHIFT
 2842/DF42 :  (MACRO-2)                           DO    
 2842/DF42 : =>BLANK                             IFNB   
 2842/DF42 :                                      DB    H()
 2842/DF42 :                                      DB    L()
 2842/DF42 :                                      SHIFT
 2842/DF42 :                                      DO    
 2842/DF42 : [2842]                              ENDIF
 2842/DF42 : [2842]                              ENDIF
 2843/DF42 : (MACRO)                    	GOTO	SYNTAX
 2843/DF42 : 59                                  DB     H(SYNTAX - JMPBITH)
 2843/DF43 : 42                                  DB     L(SYNTAX)
 2844/DF44 :                            ; FIXME: Is there really a way to these statements?
 2845/DF44 :                            ;;FIXME: I dont think so, since previous is a hard GOTO.
 2846/DF44 : =>FALSE                    	IF 0
 2847/DF44 :                            	 TSTVAR	SYNTAX
 2848/DF44 :                            	 DO	FNDVAR
 2849/DF44 :                            	 DO	CKDLLR
 2850/DF44 :                            	 DO	LDVAR
 2851/DF44 :                            	 DO	FIX
 2852/DF44 :                            	 GOTO	SYNTAX
 2853/DF44 : [2846]                     	ENDIF
 2854/DF44 : (MACRO)                    FCTR10:	TSTSTR	FCTR11,T_STAT		; handle STAT
 2854/DF44 : 9F                                  DB     H(FCTR11 - TSTBITH)
 2854/DF45 : 49                                  DB     L(FCTR11)
 2854/DF46 : A0                                  DB     T_STAT
 2855/DF47 : (MACRO)                    	DO	STATUS
 2855/DF47 : =>NOT BLANK                         IFNB   STATUS
 2855/DF47 : FD                                   DB    H(STATUS)
 2855/DF48 : DD                                   DB    L(STATUS)
 2855/DF49 :                                      SHIFT
 2855/DF49 :  (MACRO-2)                           DO    
 2855/DF49 : =>BLANK                             IFNB   
 2855/DF49 :                                      DB    H()
 2855/DF49 :                                      DB    L()
 2855/DF49 :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 160 - 2024年05月30日 19時01分01秒


 2855/DF49 :                                      DO    
 2855/DF49 : [2855]                              ENDIF
 2855/DF49 : [2855]                              ENDIF
 2856/DF49 : (MACRO)                    FCTR11:	TSTSTR	SYNTAX,T_TOP		; handle TOP
 2856/DF49 : 99                                  DB     H(SYNTAX - TSTBITH)
 2856/DF4A : 42                                  DB     L(SYNTAX)
 2856/DF4B : C1                                  DB     T_TOP
 2857/DF4C : (MACRO)                    	DO	TOP
 2857/DF4C : =>NOT BLANK                         IFNB   TOP
 2857/DF4C : EE                                   DB    H(TOP)
 2857/DF4D : A3                                   DB    L(TOP)
 2857/DF4E :                                      SHIFT
 2857/DF4E :  (MACRO-2)                           DO    
 2857/DF4E : =>BLANK                             IFNB   
 2857/DF4E :                                      DB    H()
 2857/DF4E :                                      DB    L()
 2857/DF4E :                                      SHIFT
 2857/DF4E :                                      DO    
 2857/DF4E : [2857]                              ENDIF
 2857/DF4E : [2857]                              ENDIF
 2858/DF4E : (MACRO)                    	ILRTRN
 2858/DF4E : 00                                  DB     0
 2859/DF4F :                            
 2860/DF4F : (MACRO)                    RINDEX:	DO	CKPT
 2860/DF4F : =>NOT BLANK                         IFNB   CKPT
 2860/DF4F : FC                                   DB    H(CKPT)
 2860/DF50 : FE                                   DB    L(CKPT)
 2860/DF51 :                                      SHIFT
 2860/DF51 :  (MACRO-2)                           DO    
 2860/DF51 : =>BLANK                             IFNB   
 2860/DF51 :                                      DB    H()
 2860/DF51 :                                      DB    L()
 2860/DF51 :                                      SHIFT
 2860/DF51 :                                      DO    
 2860/DF51 : [2860]                              ENDIF
 2860/DF51 : [2860]                              ENDIF
 2861/DF51 : (MACRO)                    INDEX:	DO	LADVAR
 2861/DF51 : =>NOT BLANK                         IFNB   LADVAR
 2861/DF51 : FD                                   DB    H(LADVAR)
 2861/DF52 : 0E                                   DB    L(LADVAR)
 2861/DF53 :                                      SHIFT
 2861/DF53 :  (MACRO-2)                           DO    
 2861/DF53 : =>BLANK                             IFNB   
 2861/DF53 :                                      DB    H()
 2861/DF53 :                                      DB    L()
 2861/DF53 :                                      SHIFT
 2861/DF53 :                                      DO    
 2861/DF53 : [2861]                              ENDIF
 2861/DF53 : [2861]                              ENDIF
 2862/DF53 : (MACRO)                    	ILCALL	REXPR
 2862/DF53 : 1C                                  DB     H(REXPR - (JMPBITH + TSTBITH))
 2862/DF54 : C6                                  DB     L(REXPR)
 2863/DF55 : (MACRO)                    	DO	FIX
 2863/DF55 : =>NOT BLANK                         IFNB   FIX
 2863/DF55 : EB                                   DB    H(FIX)
 2863/DF56 : 2F                                   DB    L(FIX)
 2863/DF57 :                                      SHIFT
 2863/DF57 :  (MACRO-2)                           DO    
 2863/DF57 : =>BLANK                             IFNB   
 2863/DF57 :                                      DB    H()
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 161 - 2024年05月30日 19時01分01秒


 2863/DF57 :                                      DB    L()
 2863/DF57 :                                      SHIFT
 2863/DF57 :                                      DO    
 2863/DF57 : [2863]                              ENDIF
 2863/DF57 : [2863]                              ENDIF
 2864/DF57 : (MACRO)                    	DO	DMNSN
 2864/DF57 : =>NOT BLANK                         IFNB   DMNSN
 2864/DF57 : FD                                   DB    H(DMNSN)
 2864/DF58 : 38                                   DB    L(DMNSN)
 2864/DF59 :                                      SHIFT
 2864/DF59 :  (MACRO-2)                           DO    
 2864/DF59 : =>BLANK                             IFNB   
 2864/DF59 :                                      DB    H()
 2864/DF59 :                                      DB    L()
 2864/DF59 :                                      SHIFT
 2864/DF59 :                                      DO    
 2864/DF59 : [2864]                              ENDIF
 2864/DF59 : [2864]                              ENDIF
 2865/DF59 :                            
 2866/DF59 : =>TRUE                     	IF USE_CASS
 2867/DF59 :                            ;*******************************
 2868/DF59 :                            ;*  WRITE PROGRAM TO CASSETTE  *
 2869/DF59 :                            ;*******************************
 2870/DF59 :                            ;
 2871/DF59 : (MACRO)                    CSAVE:	DO	BOT			; determine start of program
 2871/DF59 : =>NOT BLANK                         IFNB   BOT
 2871/DF59 : FF                                   DB    H(BOT)
 2871/DF5A : BD                                   DB    L(BOT)
 2871/DF5B :                                      SHIFT
 2871/DF5B :  (MACRO-2)                           DO    
 2871/DF5B : =>BLANK                             IFNB   
 2871/DF5B :                                      DB    H()
 2871/DF5B :                                      DB    L()
 2871/DF5B :                                      SHIFT
 2871/DF5B :                                      DO    
 2871/DF5B : [2871]                              ENDIF
 2871/DF5B : [2871]                              ENDIF
 2872/DF5B : (MACRO)                    	DO	TOP			; determine top of program
 2872/DF5B : =>NOT BLANK                         IFNB   TOP
 2872/DF5B : EE                                   DB    H(TOP)
 2872/DF5C : A3                                   DB    L(TOP)
 2872/DF5D :                                      SHIFT
 2872/DF5D :  (MACRO-2)                           DO    
 2872/DF5D : =>BLANK                             IFNB   
 2872/DF5D :                                      DB    H()
 2872/DF5D :                                      DB    L()
 2872/DF5D :                                      SHIFT
 2872/DF5D :                                      DO    
 2872/DF5D : [2872]                              ENDIF
 2872/DF5D : [2872]                              ENDIF
 2873/DF5D : (MACRO)                    	DO	CSAVE2			; do the actual saving
 2873/DF5D : =>NOT BLANK                         IFNB   CSAVE2
 2873/DF5D : FF                                   DB    H(CSAVE2)
 2873/DF5E : 8A                                   DB    L(CSAVE2)
 2873/DF5F :                                      SHIFT
 2873/DF5F :  (MACRO-2)                           DO    
 2873/DF5F : =>BLANK                             IFNB   
 2873/DF5F :                                      DB    H()
 2873/DF5F :                                      DB    L()
 2873/DF5F :                                      SHIFT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 162 - 2024年05月30日 19時01分01秒


 2873/DF5F :                                      DO    
 2873/DF5F : [2873]                              ENDIF
 2873/DF5F : [2873]                              ENDIF
 2874/DF5F : (MACRO)                    	DO	CFINI			; finish up
 2874/DF5F : =>NOT BLANK                         IFNB   CFINI
 2874/DF5F : FF                                   DB    H(CFINI)
 2874/DF60 : D4                                   DB    L(CFINI)
 2874/DF61 :                                      SHIFT
 2874/DF61 :  (MACRO-2)                           DO    
 2874/DF61 : =>BLANK                             IFNB   
 2874/DF61 :                                      DB    H()
 2874/DF61 :                                      DB    L()
 2874/DF61 :                                      SHIFT
 2874/DF61 :                                      DO    
 2874/DF61 : [2874]                              ENDIF
 2874/DF61 : [2874]                              ENDIF
 2875/DF61 :                            
 2876/DF61 :                            
 2877/DF61 :                            ;********************************
 2878/DF61 :                            ;*  LOAD PROGRAM FROM CASSETTE  *
 2879/DF61 :                            ;********************************
 2880/DF61 :                            ;
 2881/DF61 : (MACRO)                    CLOAD:	DO	CLOAD2			; do the actual loading
 2881/DF61 : =>NOT BLANK                         IFNB   CLOAD2
 2881/DF61 : FF                                   DB    H(CLOAD2)
 2881/DF62 : 99                                   DB    L(CLOAD2)
 2881/DF63 :                                      SHIFT
 2881/DF63 :  (MACRO-2)                           DO    
 2881/DF63 : =>BLANK                             IFNB   
 2881/DF63 :                                      DB    H()
 2881/DF63 :                                      DB    L()
 2881/DF63 :                                      SHIFT
 2881/DF63 :                                      DO    
 2881/DF63 : [2881]                              ENDIF
 2881/DF63 : [2881]                              ENDIF
 2882/DF63 : (MACRO)                    	DO	CFINI			; finish up
 2882/DF63 : =>NOT BLANK                         IFNB   CFINI
 2882/DF63 : FF                                   DB    H(CFINI)
 2882/DF64 : D4                                   DB    L(CFINI)
 2882/DF65 :                                      SHIFT
 2882/DF65 :  (MACRO-2)                           DO    
 2882/DF65 : =>BLANK                             IFNB   
 2882/DF65 :                                      DB    H()
 2882/DF65 :                                      DB    L()
 2882/DF65 :                                      SHIFT
 2882/DF65 :                                      DO    
 2882/DF65 : [2882]                              ENDIF
 2882/DF65 : [2882]                              ENDIF
 2883/DF65 : [2866]                     	ENDIF
 2884/DF65 :                            
 2885/DF65 :                            
 2886/DF65 :                            ;*************************************
 2887/DF65 :                            ;*  PAGE BREAK - SECOND BLOCK OF 4K  *
 2888/DF65 :                            ;*************************************
 2889/DF65 :                            ;
 2890/E000 :                            	ORG	BASE+0x1000
 2891/E000 : 08                         	NOP				; needed so Supervisor can do -1 here
 2892/E001 :                            
 2893/E001 :                            ; Read line from input and store in program storage.
 2894/E001 : C2 7F                      GETLIN:	LD	BASMODE(P2)		; load command/run flag
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 163 - 2024年05月30日 19時01分01秒


 2895/E003 : =>DEFINED                  	IFDEF	SCALLS
 2896/E003 : (MACRO)                    	 SYSCALL	2
 2896/E003 : 3F                                  XPPC   P3
 2896/E004 : 02                                  DB     2
 2897/E005 : =>FALSE                    	ELSE
 2898/E005 :                            	 CALL	PUTASC
 2899/E005 : [2895]                     	ENDIF
 2900/E005 : 94 04                      	JP	GETLN1
 2901/E007 : C4 20                      	LDI	' '			; load space character
 2902/E009 : =>DEFINED                  	IFDEF	SCALLS
 2903/E009 : (MACRO)                    	 SYSCALL	2
 2903/E009 : 3F                                  XPPC   P3
 2903/E00A : 02                                  DB     2
 2904/E00B : =>FALSE                    	ELSE
 2905/E00B :                            	 CALL	PUTASC
 2906/E00B : [2902]                     	ENDIF
 2907/E00B : C4 B6                      GETLN1:	LDI	L(STKIBUF)		; set P1.L to start of input buffer
 2908/E00D : 31                         	XPAL	P1
 2909/E00E : CA F1                      	ST	-15(P2)			; save prev P1.L
 2910/E010 : C3 A2                      	LD	STKPHI(P3)
 2911/E012 : DC 03                      	ORI	H(STKIBUF)		; offset for STKBASE.H
 2912/E014 : 35                         	XPAH	P1			; set P1.H to start of input buffer
 2913/E015 : CA F0                      	ST	-16(P2)			; save prev P1.H
 2914/E017 : C2 00                      	LD	(P2)			; load max. input buffer length
 2915/E019 : CA E7                      	ST	CHRNUM(P2)		; store as character counter
 2916/E01B : 01                         	XAE
 2917/E01C : C4 0D                      	LDI	_CR			; load <cr>
> > > NIBLFP.asm(2918):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 2918/E01E : C9 80                      	ST	EREG(P1)		; store as last char in input buffer
 2919/E020 : BA E7                      	DLD	CHRNUM(P2)
 2920/E022 : 01                         GETLN2:	XAE				; put counter in E and use as index
 2921/E023 : C4 FF                      	LDI	0xFF			; load as empty-marker (nothing here)
> > > NIBLFP.asm(2922):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 2922/E025 : C9 80                      	ST	EREG(P1)		; fill input buffer with empty-marker
 2923/E027 : BA E7                      	DLD	CHRNUM(P2)		; decrease char counter
 2924/E029 : 9C F7                      	JNZ	GETLN2
 2925/E02B :                            ; NOTE: Read character goes into AC and E
 2926/E02B :                            INPT:
 2927/E02B : =>DEFINED                  	IFDEF	SCALLS
 2928/E02B : (MACRO)                    	 SYSCALL	1
 2928/E02B : 3F                                  XPPC   P3
 2928/E02C : 01                                  DB     1
 2929/E02D : =>FALSE                    	ELSE
 2930/E02D :                            	 CALL	GETASC
 2931/E02D : [2927]                     	ENDIF
 2932/E02D : C2 E7                      	LD	CHRNUM(P2)		; load line counter
 2933/E02F : 01                         	XAE				; into E
 2934/E030 : C9 FF                      	ST	-1(P1)			; temporary store char before line buffer
 2935/E032 : D4 60                      	ANI	0x60			; test for control character
 2936/E034 : 98 0E                      	JZ	CTRLS			; go, handle control chars
 2937/E036 : C1 FF                      INCR:	LD	-1(P1)			; load character from temp
> > > NIBLFP.asm(2938):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 2938/E038 : C9 80                      	ST	EREG(P1)		; and store in input buffer
 2939/E03A : =>DEFINED                  OUTCH:	IFDEF	SCALLS
 2940/E03A : (MACRO)                    	 SYSCALL	2
 2940/E03A : 3F                                  XPPC   P3
 2940/E03B : 02                                  DB     2
 2941/E03C : =>FALSE                    	ELSE
 2942/E03C :                            	 CALL	PUTASC
 2943/E03C : [2939]                     	ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 164 - 2024年05月30日 19時01分01秒


 2944/E03C : AA E7                      	ILD	CHRNUM(P2)
 2945/E03E : E2 00                      	XOR	(P2)			; max chars (72) reached ?
 2946/E040 : 9B 30                      	JZ	SV_LINE(P3)		; return and print newline
 2947/E042 : 90 E7                      	JMP	INPT
 2948/E044 :                            ; NOTE:	The following handles two control characters, the rest is handled externally.
 2949/E044 :                            ;	Control/M = <cr>	Carriage Return / Enter
 2950/E044 :                            ;	Control/R = <dc2>	Move cursor one to the ^Right
 2951/E044 : C1 FF                      CTRLS:	LD	-1(P1)			; actual cursor is in E
 2952/E046 : E4 0D                      	XRI	_CR			; is it <cr> ?
 2953/E048 : 98 09                      	JZ	CTRL1
 2954/E04A : E4 1F                      	XRI	_CR ! _CTLR		; we XOR'ed above, is it <control-r> ?
 2955/E04C : 98 0B                      	JZ	CTRL4
 2956/E04E : (MACRO)                    	CALL	HCTRLS			; go handle some more controls
 2956/E04E : 3F                                  XPPC   P3
 2956/E04F : E0                                  DB     H(HCTRLS)
 2956/E050 : 63                                  DB     L(HCTRLS)
 2957/E051 : 90 D8                      	JMP	INPT
 2958/E053 :                            ; NOTE:	Carriage Return / Enter
 2959/E053 : C4 0D                      CTRL1:	LDI	_CR			; finish line with <cr>
> > > NIBLFP.asm(2960):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 2960/E055 : C9 80                      	ST	EREG(P1)		; store <cr> E indexed behind last character
 2961/E057 : 93 30                      	JMP	SV_LINE(P3)		; return and print newline
 2962/E059 :                            ; Move cursor one to ^Right.
> > > NIBLFP.asm(2963):11: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 2963/E059 : C1 80                      CTRL4:	LD	EREG(P1)		; load char under cursor
 2964/E05B : E4 FF                      	XRI	0xFF			; is here an empty-marker ?
 2965/E05D : 98 CC                      	JZ	INPT			; yes, do not move cursor
> > > NIBLFP.asm(2966):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 2966/E05F : C1 80                      	LD	EREG(P1)		; load next charactor right
 2967/E061 : 90 D7                      	JMP	OUTCH
 2968/E063 :                            
 2969/E063 :                            ;*************************************
 2970/E063 :                            ;*      CALLS FROM GETLIN ROUTINE    *
 2971/E063 :                            ;* (HANDLING OF CONTROL CHARACTERS)  *
 2972/E063 :                            ;*************************************
 2973/E063 :                            ;
 2974/E063 :                            ; NOTE:	The following handles some control characters, all others are ignored.
 2975/E063 :                            ;	Control/H = <bs>	delete char and move cursor one to left
 2976/E063 :                            ; ???	Control/I = <ht>	cursor pos one to right
 2977/E063 :                            ;	Control/K = <vt>	^Kill, rubout char at cursor pos	
 2978/E063 :                            ;	Control/L = <ff>	cursor pos one to the ^Left
 2979/E063 :                            ;	Control/O = <si>	m^Ove right and insert char at cursor pos
 2980/E063 :                            ;	Control/R = <dc2>	cursor pos one to the ^Right
 2981/E063 :                            ;	Control/X = <can>	e^Xit, cancel input and start anew
 2982/E063 : C2 E7                      HCTRLS:	LD	CHRNUM(P2)
 2983/E065 : 01                         	XAE				; store actual cursor pos in E
 2984/E066 : C1 FF                      	LD	-1(P1)
 2985/E068 : E4 08                      	XRI	_BS			; is it <backspace> ?
 2986/E06A : 98 12                      	JZ	CTRL2
 2987/E06C : E4 04                      	XRI	_BS ! _CTLL		; we XOR'ed above, is it <ctrl-L> ?
 2988/E06E : 98 22                      	JZ	CTRL3
 2989/E070 : E4 07                      	XRI	_CTLL ! _CTLK		; we XOR'ed above, is it <ctrl-K> ?
 2990/E072 : 98 25                      	JZ	CTRL5
 2991/E074 : E4 04                      	XRI	_CTLK ! _CTLO		; we XOR'ed above, is it <ctrl-O> ?
 2992/E076 : 98 44                      	JZ	CTRL6
 2993/E078 : E4 17                      	XRI	_CTLO ! _CTLX		; we XOR'ed above, is it <ctrl-X> ?
 2994/E07A : 98 77                      	JZ	CTRL7
 2995/E07C : (MACRO)                    	RTRN				; ignore other control chars and return
 2995/E07C : 3F                                  XPPC   P3
 2995/E07D : 00                                  DB     0
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 165 - 2024年05月30日 19時01分01秒


 2996/E07E :                            
 2997/E07E :                            ; ^H Delete char and move cursor one to the left.
 2998/E07E : 40                         CTRL2:	LDE
 2999/E07F : 9B 38                      	JZ	SV_RTRN(P3)		; do nothing, is begin of buffer
 3000/E081 : BA E7                      	DLD	CHRNUM(P2)
 3001/E083 : 01                         	XAE
 3002/E084 : C4 FF                      	LDI	0xFF
> > > NIBLFP.asm(3003):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3003/E086 : C9 80                      	ST	EREG(P1)		; store empty-marker
 3004/E088 : C4 08                      	LDI	_BS
 3005/E08A : =>DEFINED                  	IFDEF	SCALLS
 3006/E08A : (MACRO)                    	 SYSCALL	2
 3006/E08A : 3F                                  XPPC   P3
 3006/E08B : 02                                  DB     2
 3007/E08C : =>FALSE                    	ELSE
 3008/E08C :                            	 CALL	PUTASC
 3009/E08C : [3005]                     	ENDIF
 3010/E08C : C4 20                      	LDI	' '
 3011/E08E : =>DEFINED                  	IFDEF	SCALLS
 3012/E08E : (MACRO)                    	 SYSCALL	2
 3012/E08E : 3F                                  XPPC   P3
 3012/E08F : 02                                  DB     2
 3013/E090 : =>FALSE                    	ELSE
 3014/E090 :                            	 CALL	PUTASC
 3015/E090 : [3011]                     	ENDIF
 3016/E090 : 90 24                      	JMP	BACK
 3017/E092 :                            
 3018/E092 :                            ; ^L Move cursor one to left.
 3019/E092 : 40                         CTRL3:	LDE
 3020/E093 : 9B 38                      	JZ	SV_RTRN(P3)		; do nothing, is begin of buffer
 3021/E095 : BA E7                      	DLD	CHRNUM(P2)
 3022/E097 : 90 1D                      	JMP	BACK
 3023/E099 :                            
 3024/E099 :                            ; ^K Rubout character under cursor.
> > > NIBLFP.asm(3025):12: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3025/E099 : C5 80                      CTRL5:	LD	@EREG(P1)		; set pointer P1 to current char
 3026/E09B : C1 01                      SHFTL:	LD	1(P1)			; get next char
 3027/E09D : E4 FF                      	XRI	0xFF			; is here an empty-marker ?
 3028/E09F : 98 0A                      	JZ	RUBEND
 3029/E0A1 : C1 01                      	LD	1(P1)
 3030/E0A3 : CD 01                      	ST	@1(P1)			; store char one position left and incr
 3031/E0A5 : =>DEFINED                  	IFDEF	SCALLS
 3032/E0A5 : (MACRO)                    	 SYSCALL	2
 3032/E0A5 : 3F                                  XPPC   P3
 3032/E0A6 : 02                                  DB     2
 3033/E0A7 : =>FALSE                    	ELSE
 3034/E0A7 :                            	 CALL	PUTASC
 3035/E0A7 : [3031]                     	ENDIF
 3036/E0A7 : AA E7                      	ILD	CHRNUM(P2)
 3037/E0A9 : 90 F0                      	JMP	SHFTL
 3038/E0AB : C4 FF                      RUBEND:	LDI	0xFF			; set new empty-marker
 3039/E0AD : C9 00                      	ST	(P1)
 3040/E0AF : C4 B6                      	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
 3041/E0B1 : 31                         	XPAL	P1
 3042/E0B2 : C4 20                      	LDI	' '
 3043/E0B4 : =>DEFINED                  	IFDEF	SCALLS
 3044/E0B4 : (MACRO)                    	 SYSCALL	2
 3044/E0B4 : 3F                                  XPPC   P3
 3044/E0B5 : 02                                  DB     2
 3045/E0B6 : =>FALSE                    	ELSE
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 166 - 2024年05月30日 19時01分01秒


 3046/E0B6 :                            	 CALL	PUTASC
 3047/E0B6 : [3043]                     	ENDIF
 3048/E0B6 : C4 08                      BACK:	LDI	_BS
 3049/E0B8 : =>DEFINED                  	IFDEF	SCALLS
 3050/E0B8 : (MACRO)                    	 SYSCALL	2
 3050/E0B8 : 3F                                  XPPC   P3
 3050/E0B9 : 02                                  DB     2
 3051/E0BA : =>FALSE                    	ELSE
 3052/E0BA :                            	 CALL	PUTASC
 3053/E0BA : [3049]                     	ENDIF
 3054/E0BA : (MACRO)                    	RTRN
 3054/E0BA : 3F                                  XPPC   P3
 3054/E0BB : 00                                  DB     0
 3055/E0BC :                            
 3056/E0BC :                            ; ^O Insert character under cursor.
 3057/E0BC : C2 00                      CTRL6:	LD	(P2)			; load input buffer length (max. chars)
 3058/E0BE : 01                         	XAE
> > > NIBLFP.asm(3059):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3059/E0BF : C5 80                      	LD	@EREG(P1)		; set pointer P1 to end of input buffer
 3060/E0C1 : C5 FF                      	LD	@-1(P1)			; ultimate position in buffer
 3061/E0C3 : E4 FF                      	XRI	0xFF			; is here an empty-marker ?
 3062/E0C5 : 9C 27                      	JNZ	NOMSPC			; no more space for insertion
 3063/E0C7 : 03                         	SCL
 3064/E0C8 : 40                         	LDE				; max. number
 3065/E0C9 : FA E7                      	CAD	CHRNUM(P2)		; subtract actual number
 3066/E0CB : CA EA                      	ST	-22(P2)			; store as temporary counter		
 3067/E0CD : C5 FF                      SHFTR:	LD	@-1(P1)			; decrease and get character
 3068/E0CF : C9 01                      	ST	1(P1)			; store one position right
 3069/E0D1 : BA EA                      	DLD	-22(P2)
 3070/E0D3 : 9C F8                      	JNZ	SHFTR
 3071/E0D5 : C4 B6                      	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
 3072/E0D7 : 31                         	XPAL	P1
 3073/E0D8 : C2 E7                      	LD	CHRNUM(P2)
 3074/E0DA : 01                         	XAE
 3075/E0DB : C4 20                      	LDI	' '
> > > NIBLFP.asm(3076):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3076/E0DD : C9 80                      	ST	EREG(P1)
 3077/E0DF : =>DEFINED                  BUFOUT:	IFDEF	SCALLS
 3078/E0DF : (MACRO)                    	 SYSCALL	2
 3078/E0DF : 3F                                  XPPC   P3
 3078/E0E0 : 02                                  DB     2
 3079/E0E1 : =>FALSE                    	ELSE
 3080/E0E1 :                            	 CALL	PUTASC
 3081/E0E1 : [3077]                     	ENDIF
 3082/E0E1 : AA E7                      	ILD	CHRNUM(P2)
 3083/E0E3 : 01                         	XAE
> > > NIBLFP.asm(3084):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3084/E0E4 : C1 80                      	LD	EREG(P1)
 3085/E0E6 : E4 0D                      	XRI	_CR			; line terminator reached ?
 3086/E0E8 : 9B 30                      	JZ	SV_LINE(P3)		; return and print newline
 3087/E0EA : E4 0D                      	XRI	_CR			; we XOR'ed above
 3088/E0EC : 94 F1                      	JP	BUFOUT
 3089/E0EE : C4 B6                      NOMSPC:	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
 3090/E0F0 : 31                         	XPAL	P1
 3091/E0F1 : (MACRO)                    	RTRN
 3091/E0F1 : 3F                                  XPPC   P3
 3091/E0F2 : 00                                  DB     0
 3092/E0F3 :                            
 3093/E0F3 :                            ; ^X Cancel input and start new input.
 3094/E0F3 : C4 B6                      CTRL7:	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 167 - 2024年05月30日 19時01分01秒


 3095/E0F5 : 31                         	XPAL	P1
 3096/E0F6 : C4 5C                      	LDI	'\\'
 3097/E0F8 : =>DEFINED                  	IFDEF	SCALLS
 3098/E0F8 : (MACRO)                    	 SYSCALL	2
 3098/E0F8 : 3F                                  XPPC   P3
 3098/E0F9 : 02                                  DB     2
 3099/E0FA : =>FALSE                    	ELSE
 3100/E0FA :                            	 CALL	PUTASC
 3101/E0FA : [3097]                     	ENDIF
 3102/E0FA : C4 00                      	LDI	(M_BRK-M_BASE)		; 'BREAK'
 3103/E0FC : 93 B4                      	JMP	SV_MSGOUT(P3)
 3104/E0FE :                            
 3105/E0FE :                            ; Print new line as standalone routine.
 3106/E0FE : C4 0D                      LINE:	LDI	_CR
 3107/E100 : =>DEFINED                  	IFDEF	SCALLS
 3108/E100 : (MACRO)                    	 SYSCALL	2
 3108/E100 : 3F                                  XPPC   P3
 3108/E101 : 02                                  DB     2
 3109/E102 : =>FALSE                    	ELSE
 3110/E102 :                            	 CALL	PUTASC
 3111/E102 : [3107]                     	ENDIF
 3112/E102 : C4 0A                      	LDI	_LF
 3113/E104 : =>DEFINED                  	IFDEF	SCALLS
 3114/E104 : (MACRO)                    	 SYSCALL	2
 3114/E104 : 3F                                  XPPC   P3
 3114/E105 : 02                                  DB     2
 3115/E106 : =>FALSE                    	ELSE
 3116/E106 :                            	 CALL	PUTASC
 3117/E106 : [3113]                     	ENDIF
 3118/E106 : 93 38                      	JMP	SV_RTRN(P3)
 3119/E108 :                            
 3120/E108 :                            ; Scan input buffer for BASIC keywords, convert to one-byte tokens and store.
 3121/E108 : 03                         SCAN:	SCL
 3122/E109 : C5 01                      	LD	@1(P1)			; get byte from input and increase
 3123/E10B : FC 5B                      	CAI	'Z'+1
 3124/E10D : 94 1B                      	JP	SCANR			; no beginning letter ?
 3125/E10F : F4 1A                      	ADI	26			; 'Z'-'A'+1
 3126/E111 : 94 02                      	JP	SSCAN			; yes, found letter
 3127/E113 : 90 15                      	JMP	SCANR
 3128/E115 :                            	; NOTE:	A variable has at least a beginning letter, followed by
 3129/E115 :                            	;	letters and/or digits. All other characters terminate
 3130/E115 :                            	;	evaluating a variable.
 3131/E115 : 03                         SSCAN:	SCL
 3132/E116 : C5 01                      	LD	@1(P1)			; get byte from input and increase
 3133/E118 : FC 5B                      	CAI	'Z'+1			; does another letter follow ?
 3134/E11A : 94 0C                      	JP	SSCAN1
 3135/E11C : F4 1A                      	ADI	26			; 'Z'-'A'+1
 3136/E11E : 94 F5                      	JP	SSCAN			; yes, found letter
 3137/E120 : F4 07                      	ADI	7			; 'A'-'9'-1
 3138/E122 : 94 04                      	JP	SSCAN1			; no digit
 3139/E124 : F4 0A                      	ADI	10			; '9'-'0'+1
 3140/E126 : 94 ED                      	JP	SSCAN			; is digit
 3141/E128 : C5 FF                      SSCAN1:	LD	@-1(P1)			; decr and load previous input byte
 3142/E12A : C5 01                      SCANR:	LD	@1(P1)			; get byte from input and increase
 3143/E12C : E4 20                      	XRI	' '			; is it <space> ?
 3144/E12E : 98 FA                      	JZ	SCANR			; yes, just eat it
 3145/E130 : C1 FF                      	LD	-1(P1)			; load last byte again
 3146/E132 : E4 3A                      	XRI	':'			; is it <colon> ?
 3147/E134 : 98 21                      	JZ	SCAN3			; go, next statement on line
 3148/E136 : E4 37                      	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 168 - 2024年05月30日 19時01分01秒


 3149/E138 : 98 10                      	JZ	SCAND			; go, return (end of line)
 3150/E13A : E4 2F                      	XRI	_CR ! '"'		; we XOR'ed above, is it beginning <quote> ?
 3151/E13C : 9C 17                      	JNZ	SCAN2			; no string literal
 3152/E13E : C5 01                      SCAN1:	LD	@1(P1)			; get byte from input and increase
 3153/E140 : E4 22                      	XRI	'"'			; look for terminating <quote>
 3154/E142 : 98 E6                      	JZ	SCANR			; there is one, start new scanning
 3155/E144 : E4 2F                      	XRI	'"' ! _CR		; we XOR'ed above, is it <cr> ?
 3156/E146 : 9C F6                      	JNZ	SCAN1			; no, loop for terminating <quote>
 3157/E148 : 90 69                      	JMP	SCNRR			; no terminating <quote>, send error
 3158/E14A : C4 80                      SCAND:	LDI	L(SPRVSR)		; restore P3 to Supervisor
 3159/E14C : 33                         	XPAL	P3
 3160/E14D : C2 9C                      	LD	-100(P2)
 3161/E14F : 37                         	XPAH	P3
 3162/E150 : C4 B6                      	LDI	L(STKIBUF)		; load start of input buffer
 3163/E152 : 31                         	XPAL	P1			; put into P1.L
 3164/E153 : 93 D6                      	JMP	SV_SPLOAD(P3)
 3165/E155 : C5 FF                      SCAN2:	LD	@-1(P1)			; decr input buffer back and load byte 
 3166/E157 : (MACRO)                    SCAN3:	LDPI	P3,TOKENS		; load P3 with token table
 3166/E157 : C4 3D                               LDI    L(TOKENS)
 3166/E159 : 33                                  XPAL   P3
 3166/E15A : C4 D7                               LDI    H(TOKENS)
 3166/E15C : 37                                  XPAH   P3
 3167/E15D : C7 01                      SCAN4:	LD	@1(P3)			; get token from table, incr P3
 3168/E15F : 98 A7                      	JZ	SCAN			; end of table
 3169/E161 : CA E8                      	ST	-24(P2)			; store token value
 3170/E163 : C4 FF                      	LDI	0xFF			; initialize index
 3171/E165 : CA E7                      	ST	CHRNUM(P2)		; set index to -1 for beginning with 0
 3172/E167 : AA E7                      SCAN5:	ILD	CHRNUM(P2)		; increase index
 3173/E169 : 01                         	XAE				; load index into E
> > > NIBLFP.asm(3174):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3174/E16A : C1 80                      	LD	EREG(P1)		; get next byte from input buffer
 3175/E16C : E7 01                      	XOR	@1(P3)			; compare with char from table and incr
 3176/E16E : 98 F7                      	JZ	SCAN5			; same, continue comparing
 3177/E170 : E4 80                      	XRI	0x80			; high bit set, end of word
 3178/E172 : 98 08                      	JZ	SCAN7			; yes, words are same
 3179/E174 : 94 E7                      	JP	SCAN4			; not same, try next token
 3180/E176 : C7 01                      SCAN6:	LD	@1(P3)			; end of word, skip table word
 3181/E178 : 94 FC                      	JP	SCAN6
 3182/E17A : 90 E1                      	JMP	SCAN4			; and try next token
 3183/E17C : C2 E8                      SCAN7:	LD	-24(P2)			; we have a token, load it
 3184/E17E : CD 01                      	ST	@1(P1)			; store into program line and increase
 3185/E180 : 31                         	XPAL	P1			; position of found token..
 3186/E181 : CA E8                      	ST	-24(P2)			; ..is now stored in -24
 3187/E183 : 31                         	XPAL	P1			; put again into P1.L
> > > NIBLFP.asm(3188):11: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3188/E184 : C1 80                      SCAN8:	LD	EREG(P1)		; load current byte from word
 3189/E186 : CD 01                      	ST	@1(P1)			; store into program and increase
 3190/E188 : E4 0D                      	XRI	_CR			; is it a <cr> ?
 3191/E18A : 9C F8                      	JNZ	SCAN8			; no, continue copying
 3192/E18C : C2 E8                      	LD	-24(P2)			; yes, restore location from -24
 3193/E18E : 31                         	XPAL	P1
 3194/E18F : C1 FF                      	LD	-1(P1)			; load previous byte from input
 3195/E191 : E4 8A                      	XRI	T_DATA			; is it T_DATA ?
 3196/E193 : 98 06                      	JZ	SSKP1			; yes, skip stmt (but check strings)
 3197/E195 : E4 17                      	XRI	T_DATA ! T_REM		; we XOR'ed above, is it T_REM ?
 3198/E197 : 98 B1                      	JZ	SCAND			; found REM, leave scan routine
 3199/E199 : 90 8F                      	JMP	SCANR			; no DATA, no REM continue scanning
 3200/E19B :                            	; NOTE: Skip characters in line until end of statement
 3201/E19B : C5 01                      SSKP1:	LD	@1(P1)			; get byte from input and increase
 3202/E19D : E4 3A                      	XRI	':'			; is it <colon> ?
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 169 - 2024年05月30日 19時01分01秒


 3203/E19F : 98 B6                      	JZ	SCAN3			; go, look anew for token
 3204/E1A1 : E4 37                       	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
 3205/E1A3 : 98 A5                      	JZ	SCAND			; go, leave scan routine
 3206/E1A5 : E4 2F                      	XRI	_CR ! '"'		; we XOR'ed above, is it <quote> ?
 3207/E1A7 : 9C F2                      	JNZ	SSKP1			; no, skip character
 3208/E1A9 : C5 01                      SSKP2:	LD	@1(P1)			; get byte from input and increase
 3209/E1AB : E4 22                      	XRI	'"'			; is it <quote> ?
 3210/E1AD : 98 EC                      	JZ	SSKP1
 3211/E1AF : E4 2F                      	XRI	'"' ! _CR		; we XOR'ed above, is it <cr> ?
 3212/E1B1 : 9C F6                      	JNZ	SSKP2
 3213/E1B3 : C4 80                      SCNRR:	LDI	L(SPRVSR)		; restore P3 to supervisor..
 3214/E1B5 : 33                         	XPAL	P3
 3215/E1B6 : C2 9C                      	LD	-100(P2)
 3216/E1B8 : 37                         	XPAH	P3			; ..and perform error message
 3217/E1B9 : C4 B0                      	LDI	(M_ENDQ-M_BASE)		; 'ENDQUOTE ERROR'
 3218/E1BB : 93 B4                      	JMP	SV_MSGOUT(P3)
 3219/E1BD :                            
 3220/E1BD :                            ; Free four bytes on arithmetics stack.
 3221/E1BD :                            ; Put two bytes into STACK -17, -18.
 3222/E1BD : 02                         POPAE:	CCL
 3223/E1BE : C2 FD                      	LD	AEXOFF(P2)		; adjust AEXSTK by four up
 3224/E1C0 : F4 04                      	ADI	4
 3225/E1C2 : CA FD                      	ST	AEXOFF(P2)
 3226/E1C4 : 32                         	XPAL	P2			; pointer P2 holds corrected AEXSTK
 3227/E1C5 : C4 00                      	LDI	0
 3228/E1C7 : 01                         POP1:	XAE
 3229/E1C8 : 03                         POP2:	SCL
 3230/E1C9 : AA FC                      	ILD	-4(P2)
 3231/E1CB : 9B 6B                      	JZ	SV_VALERR(P3)
 3232/E1CD : 94 24                      	JP	POP4
 3233/E1CF : FC 8F                      	CAI	0x8F
 3234/E1D1 : 98 13                      	JZ	POP3
 3235/E1D3 : C2 FD                      	LD	-3(P2)
 3236/E1D5 : F2 FD                      	ADD	-3(P2)
 3237/E1D7 : C2 FD                      	LD	-3(P2)
 3238/E1D9 : 1F                         	RRL
 3239/E1DA : CA FD                      	ST	-3(P2)
 3240/E1DC : C2 FE                      	LD	-2(P2)
 3241/E1DE : 1F                         	RRL
 3242/E1DF : CA FE                      	ST	-2(P2)
 3243/E1E1 : 06                         	CSA
 3244/E1E2 : 94 E4                      	JP	POP2
 3245/E1E4 : 90 E1                      	JMP	POP1
 3246/E1E6 : 40                         POP3:	LDE
 3247/E1E7 : D2 FD                      	AND	-3(P2)
 3248/E1E9 : 94 0E                      	JP	POP5
 3249/E1EB : AA FE                      	ILD	-2(P2)
 3250/E1ED : 9C 0A                      	JNZ	POP5
 3251/E1EF : AA FD                      	ILD	-3(P2)
 3252/E1F1 : 90 06                      	JMP	POP5
 3253/E1F3 : C4 00                      POP4:	LDI	0
 3254/E1F5 : CA FE                      	ST	-2(P2)
 3255/E1F7 : CA FD                      	ST	-3(P2)
 3256/E1F9 : C2 FE                      POP5:	LD	-2(P2)
 3257/E1FB : 01                         	XAE
 3258/E1FC : C2 FD                      	LD	AEXOFF(P2)
 3259/E1FE : 32                         	XPAL	P2
 3260/E1FF : C4 80                      	LDI	STKMID
 3261/E201 : 32                         	XPAL	P2
 3262/E202 : CA EE                      	ST	-18(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 170 - 2024年05月30日 19時01分01秒


 3263/E204 : 01                         	XAE
 3264/E205 : CA EF                      	ST	-17(P2)
 3265/E207 : 93 D6                      	JMP	SV_SPLOAD(P3)
 3266/E209 :                            
 3267/E209 :                            ; Insert a program line into BASIC program storage on actual page,
 3268/E209 :                            ; three cases are distinguished, move up, move down lines, add line.
 3269/E209 : C2 EF                      INSRT:	LD	-17(P2)
 3270/E20B : CA F8                      	ST	NUMLO(P2)
 3271/E20D : C2 EE                      	LD	-18(P2)
 3272/E20F : CA F7                      	ST	NUMHI(P2)
 3273/E211 : C2 F1                      	LD	-15(P2)
 3274/E213 : 33                         	XPAL	P3
 3275/E214 : C2 F0                      	LD	-16(P2)
 3276/E216 : 37                         	XPAH	P3
 3277/E217 : C4 03                      	LDI	3
 3278/E219 : CA E7                      	ST	CHRNUM(P2)
 3279/E21B : AA E7                      INS1:	ILD	CHRNUM(P2)
 3280/E21D : C7 01                      	LD	@1(P3)
 3281/E21F : E4 0D                      	XRI	_CR
 3282/E221 : 9C F8                      	JNZ	INS1
 3283/E223 : C2 E7                      	LD	CHRNUM(P2)
 3284/E225 : E4 04                      	XRI	4
 3285/E227 : 9C 02                      	JNZ	INS2
 3286/E229 : CA E7                      	ST	CHRNUM(P2)
 3287/E22B : C2 E7                      INS2:	LD	CHRNUM(P2)
 3288/E22D : 01                         	XAE
 3289/E22E : 9C 14                      	JNZ	MOVE
 3290/E230 : C5 03                      	LD	@3(P1)
 3291/E232 : 40                         	LDE
 3292/E233 : 02                         	CCL
 3293/E234 : F4 FC                      	ADI	0xFC
 3294/E236 : 01                         	XAE
 3295/E237 : C5 01                      INS3:	LD	@1(P1)			; get byte from program and increase
 3296/E239 : E4 0D                      	XRI	_CR
 3297/E23B : 98 07                      	JZ	MOVE
 3298/E23D : 40                         	LDE
 3299/E23E : 02                         	CCL
 3300/E23F : F4 FF                      	ADI	0xFF
 3301/E241 : 01                         	XAE
 3302/E242 : 90 F3                      	JMP	INS3
 3303/E244 : 40                         MOVE:	LDE
 3304/E245 : DA E7                      	OR	CHRNUM(P2)
 3305/E247 : 98 69                      	JZ	ADD1
 3306/E249 : 40                         	LDE
 3307/E24A : 98 64                      	JZ	ADD
 3308/E24C : 94 16                      	JP	UP
 3309/E24E : C1 00                      DOWN:	LD	(P1)
> > > NIBLFP.asm(3310):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3310/E250 : C9 80                      	ST	EREG(P1)
 3311/E252 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 3312/E254 : E4 FF                      	XRI	0xFF
 3313/E256 : 9C F6                      	JNZ	DOWN
 3314/E258 : C1 00                      	LD	(P1)
 3315/E25A : E4 FF                      	XRI	0xFF
 3316/E25C : 9C F0                      	JNZ	DOWN
 3317/E25E : E4 FF                      	XRI	0xFF
> > > NIBLFP.asm(3318):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3318/E260 : C9 80                      	ST	EREG(P1)
 3319/E262 : 90 4C                      	JMP	ADD
 3320/E264 : C1 FE                      UP:	LD	-2(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 171 - 2024年05月30日 19時01分01秒


 3321/E266 : CA EA                      	ST	-22(P2)
 3322/E268 : C4 FF                      	LDI	0xFF
 3323/E26A : C9 FE                      	ST	-2(P1)
 3324/E26C : C4 55                      	LDI	0x55
 3325/E26E : C9 FF                      	ST	-1(P1)
 3326/E270 : C5 01                      UP1:	LD	@1(P1)			; get byte from program and increase
 3327/E272 : E4 FF                      	XRI	0xFF			; is it first terminating X'FF of program area ?
 3328/E274 : 9C FA                      	JNZ	UP1			; no, continue
 3329/E276 : C1 00                      	LD	(P1)			; get actual byte
 3330/E278 : E4 FF                      	XRI	0xFF			; is it second terminating X'FF of program area ?
 3331/E27A : 9C F4                      	JNZ	UP1			; no, continue
 3332/E27C : 35                         	XPAH	P1			; yes, we are done
 3333/E27D : CA EE                      	ST	-18(P2)
 3334/E27F : 35                         	XPAH	P1
 3335/E280 : 31                         	XPAL	P1
 3336/E281 : CA EF                      	ST	-17(P2)
 3337/E283 : 31                         	XPAL	P1
 3338/E284 : 02                         	CCL
 3339/E285 : C2 EF                      	LD	-17(P2)
 3340/E287 : 70                         	ADE
 3341/E288 : C4 00                      	LDI	0
 3342/E28A : F2 EE                      	ADD	-18(P2)
 3343/E28C : E2 EE                      	XOR	-18(P2)
 3344/E28E : D4 F0                      	ANI	0xF0
 3345/E290 : 98 03                      	JZ	UP2
 3346/E292 : C4 00                      	LDI	0
 3347/E294 : 01                         	XAE
 3348/E295 : C1 00                      UP2:	LD	(P1)
> > > NIBLFP.asm(3349):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3349/E297 : C9 80                      	ST	EREG(P1)
 3350/E299 : C5 FF                      	LD	@-1(P1)
 3351/E29B : E4 FF                      	XRI	0xFF
 3352/E29D : 9C F6                      	JNZ	UP2
 3353/E29F : C1 01                      	LD	1(P1)
 3354/E2A1 : E4 55                      	XRI	0x55
 3355/E2A3 : 9C F0                      	JNZ	UP2
 3356/E2A5 : C2 EA                      	LD	-22(P2)
 3357/E2A7 : C9 00                      	ST	(P1)
 3358/E2A9 : C4 0D                      	LDI	_CR
 3359/E2AB : C9 01                      	ST	1(P1)
 3360/E2AD : 40                         	LDE
 3361/E2AE : 98 25                      	JZ	ADD4
 3362/E2B0 : C2 E7                      ADD:	LD	CHRNUM(P2)
 3363/E2B2 : 98 20                      ADD1:	JZ	ADD3
 3364/E2B4 : C2 F1                      	LD	-15(P2)
 3365/E2B6 : 31                         	XPAL	P1
 3366/E2B7 : C2 F0                      	LD	-16(P2)
 3367/E2B9 : 35                         	XPAH	P1
 3368/E2BA : C2 F3                      	LD	-13(P2)
 3369/E2BC : 33                         	XPAL	P3
 3370/E2BD : C2 F2                      	LD	-14(P2)
 3371/E2BF : 37                         	XPAH	P3
 3372/E2C0 : C2 F7                      	LD	NUMHI(P2)
 3373/E2C2 : CF 01                      	ST	@1(P3)
 3374/E2C4 : C2 F8                      	LD	NUMLO(P2)
 3375/E2C6 : CF 01                      	ST	@1(P3)
 3376/E2C8 : C2 E7                      	LD	CHRNUM(P2)
 3377/E2CA : CF 01                      	ST	@1(P3)
 3378/E2CC : C5 01                      ADD2:	LD	@1(P1)			; get byte from program and increase
 3379/E2CE : CF 01                      	ST	@1(P3)			; store in new location
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 172 - 2024年05月30日 19時01分01秒


 3380/E2D0 : E4 0D                      	XRI	_CR			; is it terminating <cr> ?
 3381/E2D2 : 9C F8                      	JNZ	ADD2			; no, continue
 3382/E2D4 : 37                         ADD3:	XPAH	P3
 3383/E2D5 : C4 80                      ADD4:	LDI	L(SPRVSR)		; restore P3 to Supervisor
 3384/E2D7 : 33                         	XPAL	P3
 3385/E2D8 : C2 9C                      	LD	-100(P2)
 3386/E2DA : 37                         	XPAH	P3
 3387/E2DB : 9B D6                      	JZ	SV_SPLOAD(P3)
 3388/E2DD : C4 84                      	LDI	(M_AREA-M_BASE)		; 'AREA ERROR' (program area too small)
 3389/E2DF : 93 B4                      	JMP	SV_MSGOUT(P3)
 3390/E2E1 :                            
 3391/E2E1 :                            ; Find a variable in storage.
 3392/E2E1 :                            ; NOTE:	Storage for variables begins at STKBASE+0x0100 and ends at STKBASE+0x03B4
 3393/E2E1 : C3 A2                      FNDVAR:	LD	STKPHI(P3)		; get stack address.H
 3394/E2E3 : DC 01                      	ORI	H(VARSBUF)		; start of variables storage high
 3395/E2E5 : 37                         	XPAH	P3
 3396/E2E6 : C4 00                      	LDI	0
 3397/E2E8 : 33                         	XPAL	P3			; P3 holds begin of variables storage
 3398/E2E9 : C7 01                      FNDV0:	LD	@1(P3)			; load byte of variable storage and incr
 3399/E2EB : 98 4E                      	JZ	FNDV9			; zero means end of variable storage
 3400/E2ED : 94 07                      	JP	FNDV1
 3401/E2EF : 60                         	XRE
 3402/E2F0 : 98 48                      	JZ	FNDV8
 3403/E2F2 : C7 04                      	LD	@4(P3)
 3404/E2F4 : 90 F3                      	JMP	FNDV0
 3405/E2F6 : 60                         FNDV1:	XRE
 3406/E2F7 : 9C 24                      	JNZ	FNDV5
 3407/E2F9 : 31                         	XPAL	P1
 3408/E2FA : CA E8                      	ST	-24(P2)
 3409/E2FC : 31                         	XPAL	P1
 3410/E2FD : 35                         	XPAH	P1
 3411/E2FE : CA E7                      	ST	CHRNUM(P2)
 3412/E300 : 35                         	XPAH	P1
 3413/E301 : C7 01                      FNDV2:	LD	@1(P3)
 3414/E303 : E5 01                      	XOR	@1(P1)
 3415/E305 : 98 FA                      	JZ	FNDV2
 3416/E307 : 94 0E                      	JP	FNDV4
 3417/E309 : E4 80                      	XRI	0x80
 3418/E30B : 98 18                      	JZ	FNDV6
 3419/E30D : C2 E8                      FNDV3:	LD	-24(P2)
 3420/E30F : 31                         	XPAL	P1
 3421/E310 : C2 E7                      	LD	CHRNUM(P2)
 3422/E312 : 35                         	XPAH	P1
 3423/E313 : C7 04                      	LD	@4(P3)
 3424/E315 : 90 D2                      	JMP	FNDV0
 3425/E317 : C2 E8                      FNDV4:	LD	-24(P2)
 3426/E319 : 31                         	XPAL	P1
 3427/E31A : C2 E7                      	LD	CHRNUM(P2)
 3428/E31C : 35                         	XPAH	P1
 3429/E31D : C7 01                      FNDV5:	LD	@1(P3)
 3430/E31F : 94 FC                      	JP	FNDV5
 3431/E321 : C7 04                      	LD	@4(P3)
 3432/E323 : 90 C4                      	JMP	FNDV0
 3433/E325 : 03                         FNDV6:	SCL
 3434/E326 : C1 00                      	LD	(P1)			; load current storage byte
 3435/E328 : FC 5B                      	CAI	'Z'+1
 3436/E32A : 94 0C                      	JP	FNDV7			; no beginning letter
 3437/E32C : F4 1A                      	ADI	26			; 'Z'-'A'+1
 3438/E32E : 94 DD                      	JP	FNDV3			; found letter
 3439/E330 : F4 07                      	ADI	7			; 'A'-'9'-1
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 173 - 2024年05月30日 19時01分01秒


 3440/E332 : 94 04                      	JP	FNDV7			; no digit
 3441/E334 : F4 0A                      	ADI	10			; '9'-'0'+1
 3442/E336 : 94 D5                      	JP	FNDV3			; is digit
 3443/E338 : C4 00                      FNDV7:	LDI	0			; zero means no variable found
 3444/E33A : 01                         FNDV8:	XAE
 3445/E33B : C7 FF                      FNDV9:	LD	@-1(P3)
 3446/E33D : C2 FD                      	LD	AEXOFF(P2)		; load last offset AEXSTK
 3447/E33F : 32                         	XPAL	P2
 3448/E340 : 33                         	XPAL	P3
 3449/E341 : CE FF                      	ST	@-1(P2)			; store P3.L on AEXSTK
 3450/E343 : 37                         	XPAH	P3
 3451/E344 : CE FF                      	ST	@-1(P2)			; store P3.H on AEXSTK
 3452/E346 : C4 80                      	LDI	STKMID			; reset P2 stack (also L(SPRVSR) !)
 3453/E348 : 32                         	XPAL	P2
 3454/E349 : CA FD                      	ST	AEXOFF(P2)		; store offset to AEXSTK
 3455/E34B : C2 9C                      	LD	-100(P2)		; see above, loads SPRVSR high
 3456/E34D : 37                         	XPAH	P3
 3457/E34E : 93 D6                      	JMP	SV_SPLOAD(P3)
 3458/E350 :                            
 3459/E350 : C2 FC                      SAV:	LD	SBROFF(P2)
 3460/E352 : E4 E0                      	XRI	DOSTAK			; is it top of DO/UNTIL stack ?
 3461/E354 : 9B 25                      	JZ	SV_RTNEST(P3)		; yes, no loop
 3462/E356 : C2 7F                      	LD	BASMODE(P2)		; load program/run flag
 3463/E358 : E4 BF                      	XRI	(INCMD + _QMARK)	; are we running?
 3464/E35A : 98 02                      	JZ	SAV1			; yes
 3465/E35C : C4 80                      	LDI	0x80
 3466/E35E : 01                         SAV1:	XAE
 3467/E35F : C2 FC                      	LD	SBROFF(P2)
 3468/E361 : 32                         	XPAL	P2
 3469/E362 : 31                         	XPAL	P1
 3470/E363 : CE FF                      	ST	@-1(P2)
 3471/E365 : 31                         	XPAL	P1
 3472/E366 : 35                         	XPAH	P1
 3473/E367 : 58                         	ORE
 3474/E368 : CE FF                      	ST	@-1(P2)
 3475/E36A : 60                         	XRE
 3476/E36B : 35                         	XPAH	P1
 3477/E36C : 32                         	XPAL	P2
 3478/E36D : CA FC                      	ST	SBROFF(P2)
 3479/E36F : 93 D6                      	JMP	SV_SPLOAD(P3)
 3480/E371 :                            
 3481/E371 : C5 01                      DONE:	LD	@1(P1)			; get byte from program and increase
 3482/E373 : E4 20                      	XRI	' '			; is it <space> ?
 3483/E375 : 98 FA                      	JZ	DONE			; yes, just eat it
 3484/E377 : E4 2D                      	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
 3485/E379 : 9B D6                      	JZ	SV_SPLOAD(P3)
 3486/E37B : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 3487/E37D : 9B D6                      	JZ	SV_SPLOAD(P3)
 3488/E37F : C4 94                      	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
 3489/E381 : 93 B4                      	JMP	SV_MSGOUT(P3)
 3490/E383 :                            
 3491/E383 :                            ;**************************************
 3492/E383 :                            ;*	EXIT FROM BASIC ROUTINE       *
 3493/E383 :                            ;**************************************
 3494/E383 :                            ;
 3495/E383 :                            ; Return to KBPLUS or something else, address is stored on STACK.
 3496/E383 :                            ;
 3497/E383 : C2 77                      BYE:	LD	119(P2)			; load high byte of return address
 3498/E385 : 37                         	XPAH	P3
 3499/E386 : C2 78                      	LD	120(P2)			; load low byte of return address
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 174 - 2024年05月30日 19時01分01秒


 3500/E388 : 33                         	XPAL	P3
 3501/E389 : 3F                         	XPPC	P3			; jump to return address
 3502/E38A :                            
 3503/E38A :                            ; Ignore rest of statement, go to next if there is one.
 3504/E38A : C5 01                      IGNRE:	LD	@1(P1)			; get byte from program and increase
 3505/E38C : E4 0D                      	XRI	_CR			; is it <cr> ?
 3506/E38E : 98 7E                      	JZ	NXT
 3507/E390 : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 3508/E392 : 98 7A                      	JZ	NXT
 3509/E394 : 90 F4                      	JMP	IGNRE
 3510/E396 :                            
 3511/E396 : 98 04                      XFER:	JZ	XFER1
 3512/E398 : C4 C2                      	LDI	(M_NOGO-M_BASE)		; 'NOGO ERROR'
 3513/E39A : 93 B4                      	JMP	SV_MSGOUT(P3)
 3514/E39C : C4 BF                      XFER1:	LDI	(INCMD + _QMARK)	; set "PROGRAM RUNNING"
 3515/E39E : CA 7F                      	ST	BASMODE(P2)		; store program/run flag
 3516/E3A0 : 90 70                      	JMP	NXT1
 3517/E3A2 :                            
 3518/E3A2 : C5 01                      THEN:	LD	@1(P1)			; get byte from program and increase
 3519/E3A4 : E4 20                      	XRI	' '			; is it <space> ?
 3520/E3A6 : 98 FA                      	JZ	THEN			; yes, just eat it
 3521/E3A8 : E4 E3                      	XRI	T_THEN ! ' '		; we XOR'ed above, is it THEN ?
 3522/E3AA : 9B D6                      	JZ	SV_SPLOAD(P3)
 3523/E3AC : C5 FF                      	LD	@-1(P1)
 3524/E3AE : 90 7F                      	JMP	NEXT
 3525/E3B0 : C2 EF                      MOVESR:	LD	-17(P2)
 3526/E3B2 : 07                         	CAS
 3527/E3B3 : C5 01                      DNE:	LD	@1(P1)			; get byte from program and increase
 3528/E3B5 : E4 20                      	XRI	' '			; is it <space> ?
 3529/E3B7 : 98 FA                      	JZ	DNE			; yes, just eat it
 3530/E3B9 : E4 2D                      	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
 3531/E3BB : 98 51                      	JZ	NXT
 3532/E3BD : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 3533/E3BF : 98 4D                      	JZ	NXT
 3534/E3C1 : C4 94                      	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
 3535/E3C3 : 93 B4                      	JMP	SV_MSGOUT(P3)
 3536/E3C5 : C2 FD                      CMPRE:	LD	AEXOFF(P2)
 3537/E3C7 : 32                         	XPAL	P2
 3538/E3C8 : 01                         	XAE
 3539/E3C9 : C2 01                      	LD	1(P2)
 3540/E3CB : DE 04                      	OR	@4(P2)
 3541/E3CD : 01                         	XAE
 3542/E3CE : 32                         	XPAL	P2
 3543/E3CF : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 3544/E3D1 : 40                         	LDE
 3545/E3D2 : 9C CE                      	JNZ	THEN
 3546/E3D4 : C5 01                      ELS:	LD	@1(P1)			; get byte from program and increase
 3547/E3D6 : E4 0D                      	XRI	_CR			; is it <CR> ?
 3548/E3D8 : 98 34                      	JZ	NXT			; yes, end of line!
 3549/E3DA : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 3550/E3DC : 98 0C                      	JZ	ELS2
 3551/E3DE : E4 18                      	XRI	':' ! '"'		; we XOR'ed above, is it <quote> ?
 3552/E3E0 : 9C F2                      	JNZ	ELS
 3553/E3E2 : C5 01                      ELS1:	LD	@1(P1)			; get byte from program and increase
 3554/E3E4 : E4 22                      	XRI	'"'			; is it <quote> ?
 3555/E3E6 : 9C FA                      	JNZ	ELS1			; nope, keep scanning
 3556/E3E8 : 90 EA                      	JMP	ELS
 3557/E3EA : C5 01                      ELS2:	LD	@1(P1)			; get byte from program and increase
 3558/E3EC : E4 20                      	XRI	' '			; is it <space> ?
 3559/E3EE : 98 FA                      	JZ	ELS2			; yes, just eat it
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 175 - 2024年05月30日 19時01分01秒


 3560/E3F0 : E4 AE                      	XRI	T_ELSE ! ' '		; we XOR'ed above
 3561/E3F2 : 98 3B                      	JZ	NEXT
 3562/E3F4 : C5 FF                      	LD	@-1(P1)
 3563/E3F6 : 90 DC                      	JMP	ELS
 3564/E3F8 : C2 7E                      SNTX:	LD	ERRNUML(P2)		; load number low
 3565/E3FA : CA F8                      	ST	NUMLO(P2)		; and store for PRNUM
 3566/E3FC : C2 7D                      	LD	ERRNUMH(P2)		; load number high
 3567/E3FE : CA F7                      	ST	NUMHI(P2)		; and store for PRNUM
 3568/E400 : C4 D7                      SYNTX:	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
 3569/E402 : 93 B4                      	JMP	SV_MSGOUT(P3)
 3570/E404 : C4 AC                      ENDPR:	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
 3571/E406 : 93 B4                      	JMP	SV_MSGOUT(P3)
 3572/E408 : C5 01                      IGNORE:	LD	@1(P1)			; get byte from program and increase
 3573/E40A : E4 0D                      	XRI	_CR			; is it a <cr> ?
 3574/E40C : 9C FA                      	JNZ	IGNORE			; no, keep reading
 3575/E40E : C2 7F                      NXT:	LD	BASMODE(P2)		; load program / run flag
 3576/E410 : 94 06                      	JP	NXT2			; are we at the command line?
 3577/E412 : C1 00                      NXT1:	LD	(P1)			; get current byte from program
 3578/E414 : E4 FF                      	XRI	0xFF			; is it $FF (end of program) ?
 3579/E416 : 9C 04                      	JNZ	NXT3			; no, so not done yet
 3580/E418 : C4 0A                      NXT2:	LDI	(M_RDY-M_BASE)		; 'READY'
 3581/E41A : 93 B4                      	JMP	SV_MSGOUT(P3)
 3582/E41C : 06                         NXT3:	CSA				; get CPU status
 3583/E41D : D4 20                      	ANI	0x20			; test SENSEB (start bit)
 3584/E41F : 98 71                      	JZ	BRK			; if not clear, all OK, continue
 3585/E421 : C1 FF                      	LD	-1(P1)			; continue to execute
 3586/E423 : E4 0D                      	XRI	_CR
 3587/E425 : 9C 08                      	JNZ	NEXT
 3588/E427 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 3589/E429 : CA F7                      	ST	NUMHI(P2)
 3590/E42B : C5 02                      	LD	@2(P1)
 3591/E42D : CA F8                      	ST	NUMLO(P2)
 3592/E42F : C2 7F                      NEXT:	LD	BASMODE(P2)		; load command/run flag
 3593/E431 : 01                         	XAE				; save in E
 3594/E432 : C5 01                      NEXT1:	LD	@1(P1)			; get byte from program and increase
 3595/E434 : E4 20                      	XRI	' '			; is it <space> ?
 3596/E436 : 98 FA                      	JZ	NEXT1			; yep, just eat it
 3597/E438 : 94 16                      	JP	NEXT3			; no token, potential variable
 3598/E43A : 03                         	SCL
 3599/E43B : C1 FF                      	LD	-1(P1)			; load last byte
 3600/E43D : FC A3                      	CAI	T_LET+1			; must be positive if token not allowed		
 3601/E43F : 94 BF                      	JP	SYNTX			; tokens beyond LET not allowed
 3602/E441 : F4 23                      	ADI	T_LET-127		; restore token without bit7 set
 3603/E443 : 01                         	XAE				; command/run flag in A, token in E
 3604/E444 : 94 05                      	JP	NEXT2			; all tokens in lookup table allowed
 3605/E446 : C4 09                      	LDI	T_LAST-128		; clear bit7
 3606/E448 : 78                         	CAE
 3607/E449 : 94 B5                      	JP	SYNTX			; first tokens not allowed
 3608/E44B : 02                         NEXT2:	CCL
 3609/E44C : 40                         	LDE				; calculate offset
 3610/E44D : 70                         	ADE
 3611/E44E : 90 04                      	JMP	NEXT4
 3612/E450 : C5 FF                      NEXT3:	LD	@-1(P1)			; re-get byte to correct P1
 3613/E452 : C4 44                      	LDI	(T_LET-128)*2		; set offset for LET
 3614/E454 : 01                         NEXT4:	XAE				; E holds offset
 3615/E455 : (MACRO)                    	LDPI	P3,(ILSTRT+2)		; calculate lookup table address
 3615/E455 : C4 B7                               LDI    L((ILSTRT+2))
 3615/E457 : 33                                  XPAL   P3
 3615/E458 : C4 D8                               LDI    H((ILSTRT+2))
 3615/E45A : 37                                  XPAH   P3
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 176 - 2024年05月30日 19時01分01秒


> > > NIBLFP.asm(3616):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3616/E45B : C7 80                      	LD	@EREG(P3)
 3617/E45D : C4 80                      	LDI	L(SPRVSR)		; set P3 to SPRVSR
 3618/E45F : 33                         	XPAL	P3
 3619/E460 : CA FF                      	ST	-1(P2)			; store next ILCALL address low
 3620/E462 : C4 D4                      	LDI	H(SPRVSR)
 3621/E464 : 37                         	XPAH	P3
 3622/E465 : CA FE                      	ST	-2(P2)			; store next ILCALL address high
 3623/E467 : 93 D6                      	JMP	SV_SPLOAD(P3)
 3624/E469 :                            
 3625/E469 : C2 FB                      SAVEDO:	LD	DOUOFF(P2)
 3626/E46B : E4 D4                      	XRI	FORSTK			; is FOR/NEXT stack reached ?
 3627/E46D : 9B 25                      	JZ	SV_RTNEST(P3)		; yes, too many loops
 3628/E46F : E4 D4                      	XRI	FORSTK			; we XOR'ed above, restore byte
 3629/E471 : 32                         	XPAL	P2
 3630/E472 : 31                         	XPAL	P1
 3631/E473 : CE FF                      	ST	@-1(P2)
 3632/E475 : 31                         	XPAL	P1
 3633/E476 : 35                         	XPAH	P1
 3634/E477 : CE FF                      	ST	@-1(P2)
 3635/E479 : 35                         	XPAH	P1
 3636/E47A : 32                         	XPAL	P2
 3637/E47B : CA FB                      	ST	DOUOFF(P2)
 3638/E47D : 90 93                      	JMP	NXT1
 3639/E47F :                            
 3640/E47F :                            ; Convert current pointer P1.H into PAGE number.
 3641/E47F : 35                         DETPGE:	XPAH	P1			; load P1.H into E
 3642/E480 : 01                         	XAE
 3643/E481 : 40                         	LDE
 3644/E482 : 35                         	XPAH	P1
 3645/E483 : 40                         	LDE
 3646/E484 : 1C                         	SR				; shift AC (divide by 16)
 3647/E485 : 1C                         	SR
 3648/E486 : 1C                         	SR
 3649/E487 : 1C                         	SR
 3650/E488 : CA F6                      	ST	CURPG(P2)		; store page #
 3651/E48A : 90 82                      	JMP	NXT
 3652/E48C :                            
 3653/E48C :                            ; leave UNTIL and execute next statement; do not move (jump distance.)
 3654/E48C : AA FB                      LVUNTL:	ILD	DOUOFF(P2)		; adjust DSTAK by two up
 3655/E48E : AA FB                      	ILD	DOUOFF(P2)
 3656/E490 : 90 80                      	JMP	NXT1
 3657/E492 :                            
 3658/E492 :                            ; Send BREAK message after END statement, sometimes used otherwise.
 3659/E492 : C4 00                      BRK:	LDI	(M_BRK-M_BASE)		; 'BREAK'
 3660/E494 : 93 B4                      	JMP	SV_MSGOUT(P3)
 3661/E496 :                            
 3662/E496 : C2 FB                      UNTL:	LD	DOUOFF(P2)
 3663/E498 : E4 E0                      	XRI	DOSTAK			; is this top of DO/UNTIL stack ?
 3664/E49A : 9C 04                      	JNZ	UNTL1			; no, perform loop
 3665/E49C : C4 E6                      	LDI	(M_UNTL-M_BASE)		; 'UNTIL ERROR'
 3666/E49E : 93 B4                      	JMP	SV_MSGOUT(P3)
 3667/E4A0 : C2 FD                      UNTL1:	LD	AEXOFF(P2)
 3668/E4A2 : 32                         	XPAL	P2
 3669/E4A3 : 01                         	XAE
 3670/E4A4 : C2 01                      	LD	1(P2)
 3671/E4A6 : DE 04                      	OR	@4(P2)
 3672/E4A8 : 01                         	XAE
 3673/E4A9 : 32                         	XPAL	P2
 3674/E4AA : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 177 - 2024年05月30日 19時01分01秒


 3675/E4AC : 40                         	LDE
 3676/E4AD : 9C DD                      	JNZ	LVUNTL
 3677/E4AF : C2 FB                      	LD	DOUOFF(P2)
 3678/E4B1 : 32                         	XPAL	P2
 3679/E4B2 : 35                         	XPAH	P1
 3680/E4B3 : C2 01                      	LD	1(P2)
 3681/E4B5 : 31                         	XPAL	P1
 3682/E4B6 : C2 00                      	LD	(P2)
 3683/E4B8 : 35                         	XPAH	P1
 3684/E4B9 : 32                         	XPAL	P2
 3685/E4BA : 90 C3                      	JMP	DETPGE
 3686/E4BC :                            
 3687/E4BC : C4 BF                      STRT:	LDI	(INCMD + _QMARK)	; set "PROGRAM RUNNING" mode
 3688/E4BE : CA 7F                      	ST	BASMODE(P2)		; store program/run flag
 3689/E4C0 : C4 00                      	LDI	0
 3690/E4C2 : CA F8                      	ST	NUMLO(P2)		; set line number to zero
 3691/E4C4 : CA F7                      	ST	NUMHI(P2)
 3692/E4C6 : C4 D4                      CLRSTK:	LDI	FORSTK			; top of FOR/NEXT stack
 3693/E4C8 : CA FA                      	ST	FOROFF(P2)
 3694/E4CA : C4 E0                      	LDI	DOSTAK			; top of DO/UNTIL stack
 3695/E4CC : CA FB                      	ST	DOUOFF(P2)
 3696/E4CE : C4 F0                      	LDI	L(SBRSTK)
 3697/E4D0 : CA FC                      	ST	SBROFF(P2)
 3698/E4D2 :                            ; FIXME: Next not needed anymore.
 3699/E4D2 :                            ;	LDI	(M_RDY-M_BASE)		; 'READY'
 3700/E4D2 : (MACRO)                    	RTRN
 3700/E4D2 : 3F                                  XPPC   P3
 3700/E4D3 : 00                                  DB     0
 3701/E4D4 :                            
 3702/E4D4 :                            ; Return from GOSUB statement
 3703/E4D4 : C2 FC                      RSTR:	LD	SBROFF(P2)
 3704/E4D6 : E4 F0                      	XRI	L(SBRSTK)		; is it top of GOSUB/RETURN stack
 3705/E4D8 : 9C 04                      	JNZ	RSTR1			; no, continue
 3706/E4DA : C4 D1                      	LDI	(M_RTRN-M_BASE)		; 'RETURN ERROR'
 3707/E4DC : 93 B4                      	JMP	SV_MSGOUT(P3)
 3708/E4DE : AA FC                      RSTR1:	ILD	SBROFF(P2)		; adjust SBRSTK by two up
 3709/E4E0 : AA FC                      	ILD	SBROFF(P2)
 3710/E4E2 : 32                         	XPAL	P2
 3711/E4E3 : C2 FE                      	LD	-2(P2)
 3712/E4E5 : 94 04                      	JP	RSTR2
 3713/E4E7 : C4 0A                      	LDI	(M_RDY-M_BASE)		; 'READY'
 3714/E4E9 : 93 27                      	JMP	SV_RTERRN(P3)
 3715/E4EB : 35                         RSTR2:	XPAH	P1
 3716/E4EC : C2 FF                      	LD	-1(P2)
 3717/E4EE : 31                         	XPAL	P1
 3718/E4EF : C4 80                      	LDI	STKMID
 3719/E4F1 : 32                         	XPAL	P2
 3720/E4F2 : 90 8B                      	JMP	DETPGE
 3721/E4F4 :                            
 3722/E4F4 :                            ; Store pointer P1 and scan input for quote.
 3723/E4F4 : 31                         STPNT:	XPAL	P1			; store current P1 into -15,-16 STACK
 3724/E4F5 : CA F1                      	ST	-15(P2)
 3725/E4F7 : 31                         	XPAL	P1
 3726/E4F8 : 35                         	XPAH	P1
 3727/E4F9 : CA F0                      	ST	-16(P2)
 3728/E4FB : 35                         	XPAH	P1
 3729/E4FC : C5 01                      STPNT1:	LD	@1(P1)			; get byte from program and increase
 3730/E4FE : E4 22                      	XRI	'"'			; is it <quote> ?
 3731/E500 : 9C FA                      	JNZ	STPNT1			; no, keep scanning
 3732/E502 : 93 D6                      	JMP	SV_SPLOAD(P3)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 178 - 2024年05月30日 19時01分01秒


 3733/E504 :                            
 3734/E504 :                            ; Load pointer P1 back.
 3735/E504 : C2 F1                      LDPNT:	LD	-15(P2)			; load pointer from -15,-16 STACK
 3736/E506 : CA ED                      	ST	-19(P2)			; store into -19,-20
 3737/E508 : C2 F0                      	LD	-16(P2)
 3738/E50A : CA EC                      	ST	-20(P2)
 3739/E50C : 93 D6                      	JMP	SV_SPLOAD(P3)
 3740/E50E :                            
 3741/E50E :                            ; Identify variable and store in memory followed by 4-byte zero value.
 3742/E50E :                            ; NOTE:	Storage for variables begins at STKBASE+0x0100 and ends at STKBASE+0x03B4
 3743/E50E : 9B D6                      DEFVAR:	JZ	SV_SPLOAD(P3)
 3744/E510 : C5 FF                      	LD	@-1(P1)			; set back to previous program byte
 3745/E512 : C2 FD                      	LD	AEXOFF(P2)		; load previous P2.L STACK
 3746/E514 : 32                         	XPAL	P2
 3747/E515 : C2 01                      	LD	1(P2)			; load P3 from top of STACK
 3748/E517 : 33                         	XPAL	P3			; and use it to hold var name
 3749/E518 : C2 00                      	LD	(P2)
 3750/E51A : 37                         	XPAH	P3
 3751/E51B : C4 00                      	LDI	0
 3752/E51D : 01                         	XAE				; E is used in error handling, see below
 3753/E51E : 90 06                      	JMP	DEFV2
 3754/E520 : AA 01                      DEFV1:	ILD	1(P2)			; increase STACK stored P3, full 16-bit
 3755/E522 : 9C 02                      	JNZ	DEFV2
 3756/E524 : AA 00                      	ILD	(P2)
 3757/E526 : 03                         DEFV2:	SCL
 3758/E527 : C2 00                      	LD	(P2)			; load stored P3.H
 3759/E529 : D4 0F                      	ANI	0x0F			; stay in page, only last 4 bits
 3760/E52B : FC 0F                      	CAI	0x0F			; still enough stack space ?
 3761/E52D : 94 74                      	JP	DEFERR			; throw variable stack error
 3762/E52F : 40                         	LDE				; E is used in error handling, see below
 3763/E530 : F4 FF                      	ADI	0xFF
 3764/E532 : 01                         	XAE				; E = E + 255
 3765/E533 : C5 01                      	LD	@1(P1)			; get byte from program and incr
 3766/E535 : CF 01                      	ST	@1(P3)			; store byte in var stack and incr
 3767/E537 : 03                         	SCL				; now test for letter or digit
 3768/E538 : C1 00                      	LD	(P1)			; get current byte from program
 3769/E53A : FC 5B                      	CAI	'Z'+1
 3770/E53C : 94 0C                      	JP	DEFV3			; completed, no letter or digit anymore
 3771/E53E : F4 1A                      	ADI	26			; 'Z'-'A'+1
 3772/E540 : 94 DE                      	JP	DEFV1			; found letter
 3773/E542 : F4 07                      	ADI	7			; 'A'-'9'-1
 3774/E544 : 94 04                      	JP	DEFV3			; no digit either, go complete operation
 3775/E546 : F4 0A                      	ADI	10			; '9'-'0'+1
 3776/E548 : 94 D6                      	JP	DEFV1			; is digit
 3777/E54A : C3 FF                      DEFV3:	LD	-1(P3)			; load previous char of var name
 3778/E54C : DC 80                      	ORI	0x80
 3779/E54E : CB FF                      	ST	-1(P3)			; bit7 set terminates var name
 3780/E550 : C1 00                      	LD	(P1)			; get current byte from program
 3781/E552 : E4 24                      	XRI	'$'			; is it '$' ?
 3782/E554 : 98 55                      	JZ	VARERR			; string is not allowed here !
 3783/E556 : E4 0C                      	XRI	'$' ! '('		; we XOR'ed above, is it '(' ?
 3784/E558 : 98 51                        	JZ	VARERR			; array is not allowed here !
 3785/E55A : C4 00                      	LDI	0
 3786/E55C : CB 04                      	ST	4(P3)			; set exponent of var to zero
 3787/E55E : C4 80                      	LDI	STKMID			; reset P2 stack pointer
 3788/E560 : 32                         	XPAL	P2
 3789/E561 : (MACRO)                    	LDPI	P3,SPRVSR		; reset P3 to supervisor
 3789/E561 : C4 80                               LDI    L(SPRVSR)
 3789/E563 : 33                                  XPAL   P3
 3789/E564 : C4 D4                               LDI    H(SPRVSR)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 179 - 2024年05月30日 19時01分01秒


 3789/E566 : 37                                  XPAH   P3
 3790/E567 : 93 D6                      	JMP	SV_SPLOAD(P3)		; next instruction
 3791/E569 :                            
 3792/E569 :                            ; Find line number (the label) in program context.
 3793/E569 :                            ; Searched line number is stored in STACK -18,-17.
 3794/E569 :                            ; Routine returns zero in A if label was found.
 3795/E569 : C4 02                      FNDLBL:	LDI	2			; set P1 to begin of BASIC program lines
 3796/E56B : 31                         	XPAL	P1
 3797/E56C : CA F1                      	ST	-15(P2)
 3798/E56E : C2 F6                      	LD	CURPG(P2)		; convert page# into P1 high
 3799/E570 : 1E                         	RR				; rotate right AC (multiply by 16)
 3800/E571 : 1E                         	RR
 3801/E572 : 1E                         	RR
 3802/E573 : 1E                         	RR
 3803/E574 : 35                         	XPAH	P1
 3804/E575 : CA F0                      	ST	-16(P2)			; store P1 in STACK -16,-15
 3805/E577 : C1 00                      FNDLB1:	LD	(P1)			; load high byte of line number
 3806/E579 : E4 FF                      	XRI	0xFF			; is it -1 (end of program lines ?)
 3807/E57B : 9C 06                      	JNZ	FNDLB2			; no, valid line number
 3808/E57D : C1 01                      	LD	1(P1)			; load second byte
 3809/E57F : E4 FF                      	XRI	0xFF			; is it -1 ?
 3810/E581 : 98 13                      	JZ	FNDLB3			; go, end of program lines reached
 3811/E583 : 03                         FNDLB2:	SCL				; compare line numbers
 3812/E584 : C1 01                      	LD	1(P1)
 3813/E586 : FA EF                      	CAD	-17(P2)
 3814/E588 : 01                         	XAE
 3815/E589 : C1 00                      	LD	(P1)
 3816/E58B : FA EE                      	CAD	-18(P2)
 3817/E58D : 94 09                      	JP	FNDLB4
 3818/E58F : C1 02                      	LD	2(P1)			; length of program line
 3819/E591 : 01                         	XAE
> > > NIBLFP.asm(3820):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3820/E592 : C5 80                      	LD	@EREG(P1)		; advance to next line
 3821/E594 : 90 E1                      	JMP	FNDLB1			; have a new look
 3822/E596 : C4 80                      FNDLB3:	LDI	0x80			; not found, set bit7
 3823/E598 : 58                         FNDLB4:	ORE
 3824/E599 : 31                         	XPAL	P1
 3825/E59A : CA F3                      	ST	-13(P2)
 3826/E59C : 31                         	XPAL	P1
 3827/E59D : 35                         	XPAH	P1
 3828/E59E : CA F2                      	ST	-14(P2)
 3829/E5A0 : 35                         	XPAH	P1
 3830/E5A1 : (MACRO)                    	RTRN
 3830/E5A1 : 3F                                  XPPC   P3
 3830/E5A2 : 00                                  DB     0
 3831/E5A3 :                            
 3832/E5A3 :                            ; Some error handling.
 3833/E5A3 : C4 00                      DEFERR:	LDI	0
> > > NIBLFP.asm(3834):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3834/E5A5 : CF 80                      	ST	@EREG(P3)
 3835/E5A7 : C4 F8                      	LDI	(M_VRST-M_BASE)		; 'VARIABLE STACK'
 3836/E5A9 : 90 04                      	JMP	HDLERR
> > > NIBLFP.asm(3837):13: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 3837/E5AB : CF 80                      VARERR:	ST	@EREG(P3)
 3838/E5AD : C4 F0                      	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
 3839/E5AF : 37                         HDLERR:	XPAH	P3			; P3.H holds offset temporarily
 3840/E5B0 : (MACRO)                    	LDPI	P3,SPRVSR
 3840/E5B0 : C4 80                               LDI    L(SPRVSR)
 3840/E5B2 : 33                                  XPAL   P3
 3840/E5B3 : C4 D4                               LDI    H(SPRVSR)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 180 - 2024年05月30日 19時01分01秒


 3840/E5B5 : 37                                  XPAH   P3
 3841/E5B6 : 93 27                      	JMP	SV_RTERRN(P3)
 3842/E5B8 :                            
 3843/E5B8 : C2 7F                      CKMODE:	LD	BASMODE(P2)		; load program/run flag
 3844/E5BA : E4 80                      	XRI	INCMD			; invert high bit
 3845/E5BC : 97 D6                      	JP	SV_SPLOAD(P3)		; was set, so in run mode, OK
 3846/E5BE : C4 DD                      	LDI	(M_STMT-M_BASE)		; 'STATEMENT ERROR'
 3847/E5C0 : 93 B4                      	JMP	SV_MSGOUT(P3)		; not running, throw error
 3848/E5C2 :                            
 3849/E5C2 :                            ; Print spaces (number determined by stack value.)
 3850/E5C2 : C2 EF                      SPC:	LD	-17(P2)			; get argument value
 3851/E5C4 : 9B 5B                      	JZ	SV_RTFUNC(P3)		; zero, nothing to do here
 3852/E5C6 : C4 20                      SPC1:	LDI	' '			; load <space>
 3853/E5C8 : =>DEFINED                  	IFDEF	SCALLS
 3854/E5C8 : (MACRO)                    	 SYSCALL	2
 3854/E5C8 : 3F                                  XPPC   P3
 3854/E5C9 : 02                                  DB     2
 3855/E5CA : =>FALSE                    	ELSE
 3856/E5CA :                            	 CALL	PUTASC
 3857/E5CA : [3853]                     	ENDIF				; print it
 3858/E5CA : BA EF                      	DLD	-17(P2)			; decrement counter
 3859/E5CC : 9C F8                      	JNZ	SPC1			; do again
 3860/E5CE : 93 5B                      	JMP	SV_RTFUNC(P3)		; all done
 3861/E5D0 :                            
 3862/E5D0 :                            ; Print string terminated by quote.
 3863/E5D0 : C5 01                      PRSTRG:	LD	@1(P1)			; get byte from program and increase
 3864/E5D2 : E4 22                      	XRI	'"'			; is it <quote> ?
 3865/E5D4 : 9B 5B                      	JZ	SV_RTFUNC(P3)		; yes, all done
 3866/E5D6 : C1 FF                      	LD	-1(P1)			; no, re-load char from string
 3867/E5D8 : =>DEFINED                  	IFDEF	SCALLS
 3868/E5D8 : (MACRO)                    	 SYSCALL	2
 3868/E5D8 : 3F                                  XPPC   P3
 3868/E5D9 : 02                                  DB     2
 3869/E5DA : =>FALSE                    	ELSE
 3870/E5DA :                            	 CALL	PUTASC
 3871/E5DA : [3867]                     	ENDIF				; print it
 3872/E5DA : 90 F4                      	JMP	PRSTRG			; do again
 3873/E5DC :                            
 3874/E5DC : =>FALSE                    	IF	0
 3875/E5DC :                            ; FIXME: Following switched off, new PRNUM is on page D
 3876/E5DC :                            ; Get 16-bit number (label) from BASIC program line and store on STACK.
 3877/E5DC :                            SPRNUM:	LD	@1(P1)			; get byte from program and increase
 3878/E5DC :                            	ST	NUMHI(P2)		; save high byte of number
 3879/E5DC :                            	LD	@2(P1)			; get byte from program and advance by 2
 3880/E5DC :                            	ST	NUMLO(P2)		; save low byte of number
 3881/E5DC :                            
 3882/E5DC :                            ; FIXME: Added just for fun another routine to convert binaries into decimal representation.
 3883/E5DC :                            ; old routine is enclosed in IFNDEF..ELSE..ENDIF statements.
 3884/E5DC :                            	IFNDEF	KBPLUS
 3885/E5DC :                            ; Print 16-bit number on STACK -9, -8 as decimal ASCII-representation.
 3886/E5DC :                            PRNUM:	LD	AEXOFF(P2)
 3887/E5DC :                            	XPAL	P1
 3888/E5DC :                            	ST	-15(P2)			; save P1.low 
 3889/E5DC :                            	LD	STKPHI(P3)
 3890/E5DC :                            	XPAH	P1
 3891/E5DC :                            	ST	-16(P2)			; save P1.high
 3892/E5DC :                            	LDI	' '			; positive, store leading space
 3893/E5DC :                            	ST	-5(P1)			; save as prefix for number
 3894/E5DC :                            	LDI	-6			; load index of first digit
 3895/E5DC :                            	ST	CHRNUM(P2)		; store as digit counter
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 181 - 2024年05月30日 19時01分01秒


 3896/E5DC :                            	LD	NUMLO(P2)
 3897/E5DC :                            	ST	-3(P1)
 3898/E5DC :                            	LD	NUMHI(P2)		; load 16-bit number..
 3899/E5DC :                            	ST	-4(P1)			; and put as dividend on AEX STACK
 3900/E5DC :                            	JP	DIV
 3901/E5DC :                            	LDI	'-'			; negative, so store <minus>
 3902/E5DC :                            	ST	-5(P1)			; save as prefix for number
 3903/E5DC :                            	SCL
 3904/E5DC :                            	LDI	0			; negate number on AEX STACK
 3905/E5DC :                            	CAD	NUMLO(P2)
 3906/E5DC :                            	ST	-3(P1)
 3907/E5DC :                            	LDI	0
 3908/E5DC :                            	CAD	NUMHI(P2)
 3909/E5DC :                            	ST	-4(P1)
 3910/E5DC :                            ; NOTE: Place for quotient is reserved at -2 and -1 of AEX STACK.
 3911/E5DC :                            DIV:	LDI	0			; clear quotient
 3912/E5DC :                            	ST	-1(P1)
 3913/E5DC :                            	ST	-2(P1)
 3914/E5DC :                            	XAE				; set E to zero
 3915/E5DC :                            	LDI	16			; shift 16 bit
 3916/E5DC :                            	ST	-6(P1)			; store as bit counter below number
 3917/E5DC :                            DIVLP:	CCL
 3918/E5DC :                            	LD	-1(P1)			; shift 4 byte left one bit
 3919/E5DC :                            	ADD	-1(P1)
 3920/E5DC :                            	ST	-1(P1)
 3921/E5DC :                            	LD	-2(P1)
 3922/E5DC :                            	ADD	-2(P1)
 3923/E5DC :                            	ST	-2(P1)
 3924/E5DC :                            	LD	-3(P1)
 3925/E5DC :                            	ADD	-3(P1)
 3926/E5DC :                            	ST	-3(P1)
 3927/E5DC :                            	LD	-4(P1)
 3928/E5DC :                            	ADD	-4(P1)
 3929/E5DC :                            	ST	-4(P1)
 3930/E5DC :                            	LDE
 3931/E5DC :                            	ADE				; shift carry into E
 3932/E5DC :                            	XAE
 3933/E5DC :                            	LDE
 3934/E5DC :                            	ADI	-10			; subtract 10
 3935/E5DC :                            	JP	DIV1			; go, greater/equal 10
 3936/E5DC :                            	JMP	DIV2			; otherwise subtraction "failed"
 3937/E5DC :                            DIV1:	XAE
 3938/E5DC :                            	ILD	-1(P1)			; increase quotient
 3939/E5DC :                            DIV2:	DLD	-6(P1)			; decrease bit counter
 3940/E5DC :                            	JNZ	DIVLP			; loop again
 3941/E5DC :                            ; NOTE: AEX STACK -6 is now zero, serves as delimiter for ASCII string.
 3942/E5DC :                            	DLD	CHRNUM(P2)		; decrease digit counter
 3943/E5DC :                            	XAE				; put into E, A holds now remainder from divide
 3944/E5DC :                            	ORI	'0'			; prepare ASCII value
 3945/E5DC :                            	ST	EREG(P1)		; put it on AEX STACK
 3946/E5DC :                            	LD	-1(P1)			; store incomplete quotient as new dividend
 3947/E5DC :                            	ST	-3(P1)
 3948/E5DC :                            	LD	-2(P1)
 3949/E5DC :                            	ST	-4(P1)
 3950/E5DC :                            	OR	-3(P1)
 3951/E5DC :                            	JNZ	DIV			; loop, quotient not yet zero
 3952/E5DC :                            	ELSE
 3953/E5DC :                            ; Print 16-bit number on STACK -9, -8 as decimal ASCII-representation.
 3954/E5DC :                            ; From historical reasons the division by ten is realized by bit shifting,
 3955/E5DC :                            ; first mentioned by Dennis Allison in Dr. Dobb's Journal Vol.1, p.2 (January 1976).
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 182 - 2024年05月30日 19時01分01秒


 3956/E5DC :                            ; Advantage: Less loops while calculating BUT very gossipy code
 3957/E5DC :                            PRNUM:	LD	AEXOFF(P2)
 3958/E5DC :                            	XPAL	P1
 3959/E5DC :                            	ST	-15(P2)			; save P1.low 
 3960/E5DC :                            	LDI	H(STKBASE)
 3961/E5DC :                            	XPAH	P1
 3962/E5DC :                            	ST	-16(P2)			; save P1.high
 3963/E5DC :                            	LDI	' '			; positive, store leading space
 3964/E5DC :                            	ST	-7(P1)			; save as prefix for number
 3965/E5DC :                            	LDI	-6			; load index for first digit
 3966/E5DC :                            	ST	CHRNUM(P2)		; store as digit counter
 3967/E5DC :                            	LD	NUMLO(P2)		; load line number from STACK
 3968/E5DC :                            	ST	@-1(P1)
 3969/E5DC :                            	LD	NUMHI(P2)		; load 16-bit number..
 3970/E5DC :                            	ST	@-1(P1)			; and put as dividend on top of AEX STACK
 3971/E5DC :                            	JP	DIV
 3972/E5DC :                            	LDI	'-'			; negative, so store <minus>
 3973/E5DC :                            	ST	-5(P1)			; save as prefix for number
 3974/E5DC :                            	SCL
 3975/E5DC :                            	LDI	0			; negate number on AEX STACK
 3976/E5DC :                            	CAD	1(P1)
 3977/E5DC :                            	ST	1(P1)
 3978/E5DC :                            	LDI	0
 3979/E5DC :                            	CAD	(P1)
 3980/E5DC :                            	ST	(P1)
 3981/E5DC :                            ; NOTE:	Place for quotient is reserved at -2 and -1 of AEX STACK.
 3982/E5DC :                            DIV:	CCL				; shift number 1 bit right
 3983/E5DC :                            	LD	(P1)
 3984/E5DC :                            	RRL
 3985/E5DC :                            	ST	-2(P1)
 3986/E5DC :                            	LD	1(P1)
 3987/E5DC :                            	RRL
 3988/E5DC :                            	ST	-1(P1)			; and store n >> 1 two bytes lower
 3989/E5DC :                            	CCL				; shift 1 bit right
 3990/E5DC :                            	LD	-2(P1)
 3991/E5DC :                            	RRL
 3992/E5DC :                            	ST	-4(P1)
 3993/E5DC :                            	LD	-1(P1)
 3994/E5DC :                            	RRL
 3995/E5DC :                            	ST	-3(P1)			; and store n >> 2 two bytes lower
 3996/E5DC :                            ; NOTE:	Add n >> 1 and n >> 2
 3997/E5DC :                            	CCL
 3998/E5DC :                            	LD	-3(P1)
 3999/E5DC :                            	ADD	-1(P1)
 4000/E5DC :                            	ST	-1(P1)
 4001/E5DC :                            	ST	-3(P1)
 4002/E5DC :                            	LD	-4(P1)
 4003/E5DC :                            	ADD	-2(P1)
 4004/E5DC :                            	ST	-2(P1)
 4005/E5DC :                            	ST	-4(P1)			
 4006/E5DC :                            ; NOTE:	Shift 4 bits right.
 4007/E5DC :                            	LDI	4			; shift 4 bit
 4008/E5DC :                            	ST	-6(P1)			; store as bit counter below number
 4009/E5DC :                            SHFTR4:	CCL				; shift 1 bit right
 4010/E5DC :                            	LD	-4(P1)
 4011/E5DC :                            	RRL
 4012/E5DC :                            	ST	-4(P1)
 4013/E5DC :                            	LD	-3(P1)
 4014/E5DC :                            	RRL
 4015/E5DC :                            	ST	-3(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 183 - 2024年05月30日 19時01分01秒


 4016/E5DC :                            	DLD	-6(P1)
 4017/E5DC :                            	JNZ	SHFTR4			; continue shift loop
 4018/E5DC :                            ; NOTE:	add to result from above
 4019/E5DC :                            	CCL
 4020/E5DC :                            	LD	-3(P1)
 4021/E5DC :                            	ADD	-1(P1)
 4022/E5DC :                            	ST	-1(P1)
 4023/E5DC :                            	ST	-3(P1)
 4024/E5DC :                            	LD	-4(P1)
 4025/E5DC :                            	ADD	-2(P1)
 4026/E5DC :                            	ST	-2(P1)
 4027/E5DC :                            	ST	-4(P1)			
 4028/E5DC :                            	LDI	8			; shift 8 bit
 4029/E5DC :                            	ST	-6(P1)			; store as bit counter below number
 4030/E5DC :                            SHFTR8:	CCL				; shift 1 bit right
 4031/E5DC :                            	LD	-4(P1)
 4032/E5DC :                            	RRL
 4033/E5DC :                            	ST	-4(P1)
 4034/E5DC :                            	LD	-3(P1)
 4035/E5DC :                            	RRL
 4036/E5DC :                            	ST	-3(P1)
 4037/E5DC :                            	DLD	-6(P1)
 4038/E5DC :                            	JNZ	SHFTR8			; continue shift loop
 4039/E5DC :                            ; NOTE:	add to result from above
 4040/E5DC :                            	CCL
 4041/E5DC :                            	LD	-3(P1)
 4042/E5DC :                            	ADD	-1(P1)
 4043/E5DC :                            	ST	-1(P1)
 4044/E5DC :                            	ST	-3(P1)
 4045/E5DC :                            	LD	-4(P1)
 4046/E5DC :                            	ADD	-2(P1)
 4047/E5DC :                            	ST	-2(P1)
 4048/E5DC :                            	ST	-4(P1)			; multiplied with 13107/16384 = 0.799987793
 4049/E5DC :                            	LDI	3			; shift 3 bit
 4050/E5DC :                            	ST	-6(P1)			; store as bit counter below number
 4051/E5DC :                            	JMP	SHFTR3
 4052/E5DC :                            DIV1:	JMP	DIV			; stepping stone
 4053/E5DC :                            ; NOTE: now divide by 8, factor over all is then 0.099998474, roughly 0.1
 4054/E5DC :                            SHFTR3:	CCL				; shift 1 bit right
 4055/E5DC :                            	LD	-2(P1)
 4056/E5DC :                            	RRL
 4057/E5DC :                            	ST	-2(P1)
 4058/E5DC :                            	LD	-1(P1)
 4059/E5DC :                            	RRL
 4060/E5DC :                            	ST	-1(P1)
 4061/E5DC :                            	DLD	-6(P1)
 4062/E5DC :                            	JNZ	SHFTR3			; continue shift loop
 4063/E5DC :                            ; NOTE:	Quotient q is now multiplied by ten.
 4064/E5DC :                            	CCL				; shift quotient 1 bit left
 4065/E5DC :                            	LD	-1(P1)
 4066/E5DC :                            	ADD	-1(P1)
 4067/E5DC :                            	ST	-3(P1)
 4068/E5DC :                            	LD	-2(P1)
 4069/E5DC :                            	ADD	-2(P1)
 4070/E5DC :                            	ST	-4(P1)			; and store q << 1 two bytes lower
 4071/E5DC :                            	CCL				; shift 1 bit left
 4072/E5DC :                            	LD	-3(P1)
 4073/E5DC :                            	ADD	-3(P1)
 4074/E5DC :                            	ST	-3(P1)
 4075/E5DC :                            	LD	-4(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 184 - 2024年05月30日 19時01分01秒


 4076/E5DC :                            	ADD	-4(P1)
 4077/E5DC :                            	ST	-4(P1)			; and store q << 2
 4078/E5DC :                            	CCL
 4079/E5DC :                            	LD	-3(P1)
 4080/E5DC :                            	ADD	-1(P1)
 4081/E5DC :                            	ST	-3(P1)
 4082/E5DC :                            	LD	-4(P1)
 4083/E5DC :                            	ADD	-2(P1)
 4084/E5DC :                            	ST	-4(P1)			; ((q << 2) + q) = 5 * q
 4085/E5DC :                            ; NOTE:	Let the quotient unchanged.
 4086/E5DC :                            	CCL
 4087/E5DC :                            	LD	-3(P1)
 4088/E5DC :                            	ADD	-3(P1)
 4089/E5DC :                            	ST	-3(P1)
 4090/E5DC :                            	LD	-4(P1)
 4091/E5DC :                            	ADD	-4(P1)
 4092/E5DC :                            	ST	-4(P1)			; (((q << 2) + q)) << 2) = 10 * q
 4093/E5DC :                            ; NOTE:	Calculate the remainder.
 4094/E5DC :                            	SCL
 4095/E5DC :                            	LD	1(P1)
 4096/E5DC :                            	CAD	-3(P1)
 4097/E5DC :                            	ST	-3(P1)			; r = n - 10 * q (only low is needed)
 4098/E5DC :                            	XAE				; put remainder into E
 4099/E5DC :                            	SCL
 4100/E5DC :                            	LDI	9
 4101/E5DC :                            	CAE				; is remainder less than ten ?
 4102/E5DC :                            	JP	GSTORE			; yes, go and store
 4103/E5DC :                            	SCL				; otherwise subtract ten..
 4104/E5DC :                            	LDE
 4105/E5DC :                            	CAI	10
 4106/E5DC :                            	XAE
 4107/E5DC :                            	ILD	-1(P1)			; ..and increase quotient by one
 4108/E5DC :                            	JNZ	GSTORE
 4109/E5DC :                            	ILD	-2(P1)
 4110/E5DC :                            GSTORE:	DLD	CHRNUM(P2)
 4111/E5DC :                            	XAE
 4112/E5DC :                            	ORI	'0'			; prepare ASCII value
 4113/E5DC :                            	ST	EREG(P1)		; put it E indexed on AEX STACK
 4114/E5DC :                            	LD	-1(P1)			; store quotient as next dividend
 4115/E5DC :                            	ST	1(P1)
 4116/E5DC :                            	LD	-2(P1)
 4117/E5DC :                            	ST	(P1)
 4118/E5DC :                            	OR	1(P1)			; is quotient zero ?
 4119/E5DC :                            	JNZ	DIV1			; no, loop again
 4120/E5DC : [3884]                     	ENDIF
 4121/E5DC :                            	DLD	CHRNUM(P2)
 4122/E5DC :                            	XAE
 4123/E5DC :                            	LD	-5(P1)			; load prefix for number
 4124/E5DC :                            	ST	@EREG(P1)		; advance stack to begin of number string and store
 4125/E5DC :                            PRNT:	LD	@1(P1)			; load digit from stack and increase
 4126/E5DC :                            	JZ	PNEND			; zero ends printing, see above
 4127/E5DC :                            	IFDEF	SCALLS
 4128/E5DC :                            	 SYSCALL	2
 4129/E5DC :                            	ELSE
 4130/E5DC :                            	 CALL	PUTASC
 4131/E5DC : [4127]                     	ENDIF
 4132/E5DC :                            	JMP	PRNT
 4133/E5DC :                            PNEND:	LD	-15(P2)			; restore P1 and return
 4134/E5DC :                            	XPAL	P1
 4135/E5DC :                            	LD	-16(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 185 - 2024年05月30日 19時01分01秒


 4136/E5DC :                            	XPAH	P1
 4137/E5DC :                            	RTRN
 4138/E5DC : [3874]                     	ENDIF
 4139/E5DC :                            
 4140/E5DC :                            ; Relational operators.
 4141/E5DC : C4 01                      EQU:	LDI	1
 4142/E5DE : 90 12                      	JMP	CMP
 4143/E5E0 : C4 02                      NEQ:	LDI	2
 4144/E5E2 : 90 0E                      	JMP	CMP
 4145/E5E4 : C4 03                      LSS:	LDI	3
 4146/E5E6 : 90 0A                      	JMP	CMP
 4147/E5E8 : C4 04                      LEQ:	LDI	4
 4148/E5EA : 90 06                      	JMP	CMP
 4149/E5EC : C4 05                      GTR:	LDI	5
 4150/E5EE : 90 02                      	JMP	CMP
 4151/E5F0 : C4 06                      GEQ:	LDI	6
 4152/E5F2 : CA EB                      CMP:	ST	COUNTR(P2)
 4153/E5F4 : C2 FD                      	LD	AEXOFF(P2)
 4154/E5F6 : 31                         	XPAL	P1
 4155/E5F7 : CA F1                      	ST	-15(P2)
 4156/E5F9 : C3 A2                      	LD	STKPHI(P3)
 4157/E5FB : 35                         	XPAH	P1
 4158/E5FC : CA F0                      	ST	-16(P2)
 4159/E5FE : C1 05                      	LD	5(P1)
 4160/E600 : CA EE                      	ST	-18(P2)
 4161/E602 : C1 01                      	LD	1(P1)
 4162/E604 : CA EF                      	ST	-17(P2)
 4163/E606 : (MACRO)                    	CALL	FSUB
 4163/E606 : 3F                                  XPPC   P3
 4163/E607 : F1                                  DB     H(FSUB)
 4163/E608 : 39                                  DB     L(FSUB)
 4164/E609 : C1 01                      	LD	1(P1)
 4165/E60B : E2 EE                      	XOR	-18(P2)
 4166/E60D : 01                         	XAE
 4167/E60E : C2 EE                      	LD	-18(P2)
 4168/E610 : E2 EF                      	XOR	-17(P2)
 4169/E612 : 50                         	ANE
 4170/E613 : E1 01                      	XOR	1(P1)
 4171/E615 : CA EA                      	ST	-22(P2)
 4172/E617 : C1 01                      	LD	1(P1)
 4173/E619 : D9 00                      	OR	(P1)
 4174/E61B : 98 02                      	JZ	SETZ
 4175/E61D : C4 80                      	LDI	0x80
 4176/E61F : E4 80                      SETZ:	XRI	0x80
 4177/E621 : 01                         	XAE
 4178/E622 : BA EB                      	DLD	COUNTR(P2)
 4179/E624 : 9C 03                      	JNZ	NEQU
 4180/E626 : 40                         	LDE
 4181/E627 : 90 29                      	JMP	CMPR
 4182/E629 : BA EB                      NEQU:	DLD	COUNTR(P2)
 4183/E62B : 9C 05                      	JNZ	LESS
 4184/E62D : 40                         	LDE
 4185/E62E : E4 80                      	XRI	0x80
 4186/E630 : 90 20                      	JMP	CMPR
 4187/E632 : BA EB                      LESS:	DLD	COUNTR(P2)
 4188/E634 : 9C 04                      	JNZ	LEQU
 4189/E636 : C2 EA                      	LD	-22(P2)
 4190/E638 : 90 18                      	JMP	CMPR
 4191/E63A : BA EB                      LEQU:	DLD	COUNTR(P2)
 4192/E63C : 9C 05                      	JNZ	GRTR
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 186 - 2024年05月30日 19時01分01秒


 4193/E63E : 40                         	LDE
 4194/E63F : DA EA                      	OR	-22(P2)
 4195/E641 : 90 0F                      	JMP	CMPR
 4196/E643 : BA EB                      GRTR:	DLD	COUNTR(P2)
 4197/E645 : 9C 07                      	JNZ	GEQU
 4198/E647 : 40                         	LDE
 4199/E648 : DA EA                      	OR	-22(P2)
 4200/E64A : E4 80                      	XRI	0x80
 4201/E64C : 90 04                      	JMP	CMPR
 4202/E64E : C2 EA                      GEQU:	LD	-22(P2)
 4203/E650 : E4 80                      	XRI	0x80
 4204/E652 : 94 0A                      CMPR:	JP	FLSE
 4205/E654 : C4 80                      	LDI	0x80
 4206/E656 : C9 00                      	ST	(P1)
 4207/E658 : C4 40                      	LDI	0x40
 4208/E65A : C9 01                      	ST	1(P1)
 4209/E65C : 90 06                      	JMP	STRE1
 4210/E65E : C4 00                      FLSE:	LDI	0
 4211/E660 : C9 00                      	ST	(P1)
 4212/E662 : C9 01                      	ST	1(P1)
 4213/E664 : C4 00                      STRE1:	LDI	0
 4214/E666 : C9 02                      	ST	2(P1)
 4215/E668 : C9 03                      	ST	3(P1)
 4216/E66A : C2 F1                      	LD	-15(P2)
 4217/E66C : 31                         	XPAL	P1
 4218/E66D : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 4219/E66F : C2 F0                      	LD	-16(P2)
 4220/E671 : 35                         	XPAH	P1
 4221/E672 : 93 5B                      	JMP	SV_RTFUNC(P3)
 4222/E674 :                            
 4223/E674 : C2 F3                      STBCK:	LD	-13(P2)			; restore P1.L
 4224/E676 : 31                         	XPAL	P1
 4225/E677 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 4226/E679 : C2 F2                      	LD	-14(P2)
 4227/E67B : 35                         	XPAH	P1			; restore P1.H
 4228/E67C : 93 5B                      	JMP	SV_RTFUNC(P3)
 4229/E67E :                            
 4230/E67E :                            ; Implement LIST command.
 4231/E67E : 03                         LST1:	SCL
 4232/E67F : C1 01                      	LD	1(P1)
 4233/E681 : FA EF                      	CAD	-17(P2)
 4234/E683 : 01                         	XAE
 4235/E684 : C1 00                      	LD	(P1)
 4236/E686 : FA EE                      	CAD	-18(P2)
 4237/E688 : 94 0C                      	JP	LST3
 4238/E68A : C1 00                      LST2:	LD	(P1)			; test for end of program lines
 4239/E68C : E4 FF                      	XRI	0xFF
 4240/E68E : 9C 0D                      	JNZ	LST4
 4241/E690 : C1 01                      	LD	1(P1)
 4242/E692 : E4 FF                      	XRI	0xFF
 4243/E694 : 9C 07                      	JNZ	LST4
 4244/E696 : 58                         LST3:	ORE
 4245/E697 : 98 04                      	JZ	LST4	 		; go, print actual line
 4246/E699 : C4 0A                      	LDI	(M_RDY-M_BASE)		; 'READY'
 4247/E69B : 93 B4                      	JMP	SV_MSGOUT(P3)
 4248/E69D : (MACRO)                    LST4:	CALL	SPRNUM			; first print line number 
 4248/E69D : 3F                                  XPPC   P3
 4248/E69E : D1                                  DB     H(SPRNUM)
 4248/E69F : B2                                  DB     L(SPRNUM)
 4249/E6A0 : C5 01                      LST5:	LD	@1(P1)			; get byte of actual line and incr
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 187 - 2024年05月30日 19時01分01秒


 4250/E6A2 : 94 26                      	JP	LST9			; no token, so go and print char
 4251/E6A4 :                            ; FIXME: Can we use ext reg instead of chrnum ?
 4252/E6A4 : CA E7                      	ST	CHRNUM(P2)		; store token temporarily
 4253/E6A6 : C4 3D                      	LDI	L(TOKENS)		; load P1 with token table
 4254/E6A8 : 31                         	XPAL	P1
 4255/E6A9 : CA F1                      	ST	-15(P2)			; save prev P1.L
 4256/E6AB : C4 D7                      	LDI	H(TOKENS)
 4257/E6AD : 35                         	XPAH	P1
 4258/E6AE : CA F0                      	ST	-16(P2)			; save prev P1.H
 4259/E6B0 : C2 E7                      LST6:	LD	CHRNUM(P2)		; load token again
 4260/E6B2 : E5 01                      	XOR	@1(P1)			; compare with token from table
 4261/E6B4 : 98 06                      	JZ	LST8			; found, so go and print related keyword
 4262/E6B6 : C5 01                      LST7:	LD	@1(P1)			; not found, skip keyword
 4263/E6B8 : 94 FC                      	JP	LST7
 4264/E6BA : 90 F4                      	JMP	LST6			; test next token in table
 4265/E6BC : C5 01                      LST8:	LD	@1(P1)			; get char of keyword and incr
 4266/E6BE : =>DEFINED                  	IFDEF	SCALLS
 4267/E6BE : (MACRO)                    	 SYSCALL	2
 4267/E6BE : 3F                                  XPPC   P3
 4267/E6BF : 02                                  DB     2
 4268/E6C0 : =>FALSE                    	ELSE
 4269/E6C0 :                            	 CALL	PUTASC
 4270/E6C0 : [4266]                     	ENDIF
 4271/E6C0 : 94 FA                      	JP	LST8
 4272/E6C2 : C2 F1                      	LD	-15(P2)			; restore P1
 4273/E6C4 : 31                         	XPAL	P1
 4274/E6C5 : C2 F0                      	LD	-16(P2)
 4275/E6C7 : 35                         	XPAH	P1
 4276/E6C8 : 90 D6                      	JMP	LST5			; go ahead with rest of line
 4277/E6CA : =>DEFINED                  LST9:	IFDEF	SCALLS
 4278/E6CA : (MACRO)                    	 SYSCALL	2
 4278/E6CA : 3F                                  XPPC   P3
 4278/E6CB : 02                                  DB     2
 4279/E6CC : =>FALSE                    	ELSE
 4280/E6CC :                            	 CALL	PUTASC
 4281/E6CC : [4277]                     	ENDIF
 4282/E6CC : E4 0D                      	XRI	_CR			; was it <cr> (end of line ?)
 4283/E6CE : 9C D0                      	JNZ	LST5			; no, continue
 4284/E6D0 : C4 0A                      	LDI	_LF			; yes, print <lf>
 4285/E6D2 : =>DEFINED                  	IFDEF	SCALLS
 4286/E6D2 : (MACRO)                    	 SYSCALL	2
 4286/E6D2 : 3F                                  XPPC   P3
 4286/E6D3 : 02                                  DB     2
 4287/E6D4 : =>FALSE                    	ELSE
 4288/E6D4 :                            	 CALL	PUTASC
 4289/E6D4 : [4285]                     	ENDIF
 4290/E6D4 : 06                         	CSA				; get CPU status
 4291/E6D5 : D4 20                      	ANI	0x20			; check for start bit (we have input)
 4292/E6D7 : 9F D6                      	JNZ	SV_SPLOAD(P3)		; nope, continue
 4293/E6D9 : C4 00                      	LDI	(M_BRK-M_BASE)		; 'BREAK'
 4294/E6DB : 93 B4                      	JMP	SV_MSGOUT(P3)
 4295/E6DD :                            
 4296/E6DD :                            ; Look on new page for GOSUB or GOTO statement,
 4297/E6DD :                            ; GOSUB resp.GOTO must follow <cr> or <colon>.
 4298/E6DD : C1 FF                      LKPAGE:	LD	-1(P1)			; get previous byte from program
 4299/E6DF : E4 0D                      	XRI	_CR			; is it <cr> ?
 4300/E6E1 : 98 15                      	JZ	CHPAGE
 4301/E6E3 : C4 FF                      	LDI	0xFF
 4302/E6E5 : CA E7                      	ST	CHRNUM(P2)		; set counter to -1
 4303/E6E7 : AA E7                      LKPGE:	ILD	CHRNUM(P2)		; increase by 1
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 188 - 2024年05月30日 19時01分01秒


 4304/E6E9 : 01                         	XAE				; exchange with E
> > > NIBLFP.asm(4305):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 4305/E6EA : C1 80                      	LD	EREG(P1)		; load byte E-indexed
 4306/E6EC : E4 20                      	XRI	' '			; is it <space> ?
 4307/E6EE : 98 F7                      	JZ	LKPGE			; yes, eat it
 4308/E6F0 : E4 B1                      	XRI	' ' ! T_GOSUB		; we XOR'ed above, is it <gosub> ?
 4309/E6F2 : 98 14                      	JZ	CHPGE			; found GOSUB token
 4310/E6F4 : E4 03                      	XRI	T_GOSUB ! T_GOTO	; we XOR'ed above, is it <goto> ?
 4311/E6F6 : 98 10                      	JZ	CHPGE			; found GOTO token
 4312/E6F8 : C4 02                      CHPAGE:	LDI	2			; begin of program lines
 4313/E6FA : CA ED                      	ST	-19(P2)
 4314/E6FC : 31                         	XPAL	P1
 4315/E6FD : C2 F6                      	LD	CURPG(P2)		; convert page# into P1 high
 4316/E6FF : 1E                         	RR
 4317/E700 : 1E                         	RR
 4318/E701 : 1E                         	RR
 4319/E702 : 1E                         	RR
 4320/E703 : CA EC                      	ST	-20(P2)
 4321/E705 : 35                         	XPAH	P1
 4322/E706 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4323/E708 : C4 02                      CHPGE:	LDI	2			; begin of program lines
 4324/E70A : CA ED                      	ST	-19(P2)
 4325/E70C : C2 F6                      	LD	CURPG(P2)		; convert page# into P1 high
 4326/E70E : 1E                         	RR
 4327/E70F : 1E                         	RR
 4328/E710 : 1E                         	RR
 4329/E711 : 1E                         	RR
 4330/E712 : CA EC                      	ST	-20(P2)
 4331/E714 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4332/E716 :                            
 4333/E716 :                            ; Put the number one (DCM 1.0) onto stack.
 4334/E716 : C2 FD                      ONE:	LD	AEXOFF(P2)
 4335/E718 : 32                         	XPAL	P2			; AC holds STKMID
 4336/E719 : CE FC                      	ST	@SBROFF(P2)		; save as EXP
 4337/E71B : 1C                         	SR				; shift right
 4338/E71C : CA 01                      	ST	1(P2)			; save as M1
 4339/E71E : C4 00                      	LDI	0
 4340/E720 : CA 02                      	ST	2(P2)
 4341/E722 : CA 03                      	ST	3(P2)
 4342/E724 : C4 80                      	LDI	STKMID
 4343/E726 : 32                         	XPAL	P2
 4344/E727 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 4345/E729 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4346/E72B :                            
 4347/E72B : C2 FA                      SAVFOR:	LD	FOROFF(P2)
 4348/E72D : 01                         	XAE
 4349/E72E : 40                         	LDE
 4350/E72F : E4 A4                      	XRI	L(ILCSTK)		; maximum depth for FOR/NEXT STACK reached ?
 4351/E731 : 9B 25                      	JZ	SV_RTNEST(P3)		; yes, too much nested FOR/NEXT loops
 4352/E733 : C3 A2                      	LD	STKPHI(P3)
 4353/E735 : 37                         	XPAH	P3
 4354/E736 : C2 FD                      	LD	AEXOFF(P2)
 4355/E738 : 32                         	XPAL	P2
 4356/E739 : 40                         	LDE
 4357/E73A : E4 D4                      SFOR1:	XRI	L(FORSTK)
 4358/E73C : 98 12                      	JZ	SFOR3
 4359/E73E : E4 D4                      	XRI	L(FORSTK)		; we XOR'ed above, restore
 4360/E740 : 33                         	XPAL	P3
 4361/E741 : C2 0C                      	LD	12(P2)
 4362/E743 : E7 0C                      	XOR	@12(P3)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 189 - 2024年05月30日 19時01分01秒


 4363/E745 : 9C 06                      	JNZ	SFOR2
 4364/E747 : C2 0D                      	LD	13(P2)
 4365/E749 : E3 F5                      	XOR	-11(P3)
 4366/E74B : 98 05                      	JZ	SFOR4
 4367/E74D : 33                         SFOR2:	XPAL	P3
 4368/E74E : 90 EA                      	JMP	SFOR1
 4369/E750 : 40                         SFOR3:	LDE
 4370/E751 : 33                         	XPAL	P3
 4371/E752 : 31                         SFOR4:	XPAL	P1
 4372/E753 : CF FF                      	ST	@-1(P3)
 4373/E755 : 31                         	XPAL	P1
 4374/E756 : 35                         	XPAH	P1
 4375/E757 : CF FF                      	ST	@-1(P3)
 4376/E759 : 35                         	XPAH	P1
 4377/E75A : C2 07                      	LD	7(P2)
 4378/E75C : CF FF                      	ST	@-1(P3)
 4379/E75E : C2 06                      	LD	6(P2)
 4380/E760 : CF FF                      	ST	@-1(P3)
 4381/E762 : C2 05                      	LD	5(P2)
 4382/E764 : CF FF                      	ST	@-1(P3)
 4383/E766 : C2 04                      	LD	4(P2)
 4384/E768 : CF FF                      	ST	@-1(P3)
 4385/E76A : C2 03                      	LD	3(P2)
 4386/E76C : CF FF                      	ST	@-1(P3)
 4387/E76E : C2 02                      	LD	2(P2)
 4388/E770 : CF FF                      	ST	@-1(P3)
 4389/E772 : C2 01                      	LD	1(P2)
 4390/E774 : CF FF                      	ST	@-1(P3)
 4391/E776 : C6 08                      	LD	@8(P2)
 4392/E778 : CF FF                      	ST	@-1(P3)
 4393/E77A : C2 05                      	LD	5(P2)
 4394/E77C : CF FF                      	ST	@-1(P3)
 4395/E77E : C2 04                      	LD	4(P2)
 4396/E780 : CF FF                      	ST	@-1(P3)
 4397/E782 : C4 80                      	LDI	STKMID
 4398/E784 : 32                         	XPAL	P2
 4399/E785 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 4400/E787 : 33                         	XPAL	P3
 4401/E788 : CA FA                      	ST	FOROFF(P2)
 4402/E78A : C2 FD                      STVAR:	LD	AEXOFF(P2)
 4403/E78C : 32                         	XPAL	P2
 4404/E78D : C2 05                      	LD	5(P2)
 4405/E78F : 33                         	XPAL	P3
 4406/E790 : C2 04                      	LD	4(P2)
 4407/E792 : 37                         	XPAH	P3
 4408/E793 : C6 06                      	LD	@6(P2)
 4409/E795 : CB 01                      	ST	1(P3)
 4410/E797 : C2 FB                      	LD	-5(P2)
 4411/E799 : CB 02                      	ST	2(P3)
 4412/E79B : C2 FC                      	LD	-4(P2)
 4413/E79D : CB 03                      	ST	3(P3)
 4414/E79F : C2 FD                      	LD	-3(P2)
 4415/E7A1 : CB 04                      	ST	4(P3)
 4416/E7A3 : C4 80                      	LDI	STKMID
 4417/E7A5 : 32                         	XPAL	P2
 4418/E7A6 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 4419/E7A8 : C4 80                      	LDI	L(SPRVSR)
 4420/E7AA : 33                         	XPAL	P3
 4421/E7AB : C2 9C                      	LD	-100(P2)
 4422/E7AD : 37                         	XPAH	P3
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 190 - 2024年05月30日 19時01分01秒


 4423/E7AE : 93 D6                      	JMP	SV_SPLOAD(P3)
 4424/E7B0 :                            
 4425/E7B0 : 98 04                      NXTVAR:	JZ	VARFND
 4426/E7B2 : C4 F0                      	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
 4427/E7B4 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4428/E7B6 : C5 01                      VARFND:	LD	@1(P1)			; get byte from program and increase
 4429/E7B8 : E4 20                      	XRI	' '			; is it <space> ?
 4430/E7BA : 98 FA                      	JZ	VARFND			; yes, just eat it
 4431/E7BC : E4 2D                      	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
 4432/E7BE : 98 08                      	JZ	VAR1
 4433/E7C0 : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 4434/E7C2 : 98 04                      	JZ	VAR1
 4435/E7C4 : C4 94                      	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
 4436/E7C6 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4437/E7C8 : C2 FA                      VAR1:	LD	FOROFF(P2)
 4438/E7CA : E4 D4                      	XRI	L(FORSTK)
 4439/E7CC : 9C 04                      	JNZ	VAR2
 4440/E7CE : C4 BE                      	LDI	(M_NEXT-M_BASE)		; 'NEXT ERROR'
 4441/E7D0 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4442/E7D2 : AA FD                      VAR2:	ILD	AEXOFF(P2)		; adjust AEXSTK by two up
 4443/E7D4 : AA FD                      	ILD	AEXOFF(P2)
 4444/E7D6 : 31                         	XPAL	P1
 4445/E7D7 : CA F1                      	ST	-15(P2)
 4446/E7D9 : C3 A2                      	LD	STKPHI(P3)
 4447/E7DB : 35                         	XPAH	P1
 4448/E7DC : CA F0                      	ST	-16(P2)
 4449/E7DE : C2 FA                      VAR3:	LD	FOROFF(P2)
 4450/E7E0 : 32                         	XPAL	P2
 4451/E7E1 : C1 FF                      	LD	-1(P1)
 4452/E7E3 : E2 01                      	XOR	1(P2)
 4453/E7E5 : 9C 06                      	JNZ	VAR4
 4454/E7E7 : C1 FE                      	LD	-2(P1)
 4455/E7E9 : E2 00                      	XOR	(P2)
 4456/E7EB : 98 0F                      	JZ	VAR5
 4457/E7ED : C6 0C                      VAR4:	LD	@12(P2)
 4458/E7EF : C4 80                      	LDI	STKMID
 4459/E7F1 : 32                         	XPAL	P2
 4460/E7F2 : CA FA                      	ST	FOROFF(P2)
 4461/E7F4 : E4 D4                      	XRI	L(FORSTK)		; is variable on FOR/NEXT stack ?
 4462/E7F6 : 9C E6                      	JNZ	VAR3			; yes, continue
 4463/E7F8 : C4 B4                      	LDI	(M_FOR-M_BASE)		; 'FOR ERROR'
 4464/E7FA : 93 B4                      	JMP	SV_MSGOUT(P3)
 4465/E7FC : 03                         VAR5:	SCL
 4466/E7FD : C4 0C                      	LDI	12
 4467/E7FF : FC 01                      VAR6:	CAI	1
 4468/E801 : 01                         	XAE
> > > NIBLFP.asm(4469):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 4469/E802 : C2 80                      	LD	EREG(P2)
 4470/E804 : CD FF                      	ST	@-1(P1)
 4471/E806 : 40                         	LDE
 4472/E807 : 9C F6                      	JNZ	VAR6
 4473/E809 : 1D                         	SRL
 4474/E80A : 32                         	XPAL	P2
 4475/E80B : C1 03                      	LD	3(P1)
 4476/E80D : CA EA                      	ST	-22(P2)
 4477/E80F : 31                         	XPAL	P1
 4478/E810 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 4479/E812 : 31                         	XPAL	P1
 4480/E813 : C5 FE                      	LD	@-2(P1)
 4481/E815 : C2 FD                      LDVAR:	LD	AEXOFF(P2)		; load last AEXSTK.L
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 191 - 2024年05月30日 19時01分01秒


 4482/E817 : 32                         	XPAL	P2
 4483/E818 : C2 01                      	LD	1(P2)			; set P3 to var address
 4484/E81A : 33                         	XPAL	P3
 4485/E81B : C2 00                      	LD	(P2)
 4486/E81D : 37                         	XPAH	P3
 4487/E81E : 01                         	XAE				; save P3.H in E
 4488/E81F : C3 04                      	LD	4(P3)			; load value from var
 4489/E821 : CA 01                      	ST	1(P2)			; and store in temp
 4490/E823 : C3 03                      	LD	3(P3)
 4491/E825 : CA 00                      	ST	(P2)
 4492/E827 : C3 02                      	LD	2(P3)
 4493/E829 : CA FF                      	ST	-1(P2)
 4494/E82B : C3 01                      	LD	1(P3)
 4495/E82D : CE FE                      	ST	@-2(P2)
 4496/E82F : C4 80                      	LDI	STKMID			; restore P2.L
 4497/E831 : 32                         	XPAL	P2
 4498/E832 : CA FD                      	ST	AEXOFF(P2)		; save actual STACK.L
 4499/E834 : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 4500/E836 : 33                         	XPAL	P3
 4501/E837 : 40                         	LDE
 4502/E838 : 37                         	XPAH	P3
 4503/E839 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4504/E83B :                            
 4505/E83B :                            ; Load address of version string on STACK.
 4506/E83B : C2 FD                      LDVER:	LD	AEXOFF(P2)		; load last STACK.L
 4507/E83D : 32                         	XPAL	P2
 4508/E83E : C4 13                      	LDI	L(VERSTR)
 4509/E840 : CE FF                      	ST	@-1(P2)
 4510/E842 : C4 D0                      	LDI	H(VERSTR)
 4511/E844 : CE FF                      	ST	@-1(P2)
 4512/E846 : C4 80                      	LDI	STKMID			; restore P2.L
 4513/E848 : 32                         	XPAL	P2
 4514/E849 : CA FD                      	ST	AEXOFF(P2)		; save actual STACK.L
 4515/E84B : 93 D6                      	JMP	SV_SPLOAD(P3)
 4516/E84D :                            
 4517/E84D : C2 FA                      NXTV:	LD	FOROFF(P2)
 4518/E84F : 32                         	XPAL	P2
 4519/E850 : C2 00                      	LD	(P2)
 4520/E852 : 01                         	XAE
 4521/E853 : C2 01                      	LD	1(P2)
 4522/E855 : 32                         	XPAL	P2
 4523/E856 : 40                         	LDE
 4524/E857 : 36                         	XPAH	P2
 4525/E858 : C1 00                      	LD	(P1)
 4526/E85A : CA 01                      	ST	1(P2)
 4527/E85C : C1 01                      	LD	1(P1)
 4528/E85E : CA 02                      	ST	2(P2)
 4529/E860 : C1 02                      	LD	2(P1)
 4530/E862 : CA 03                      	ST	3(P2)
 4531/E864 : C1 03                      	LD	3(P1)
 4532/E866 : CA 04                      	ST	4(P2)
 4533/E868 : C4 80                      	LDI	STKMID
 4534/E86A : 32                         	XPAL	P2
 4535/E86B : C3 A2                      	LD	STKPHI(P3)
 4536/E86D : 36                         	XPAH	P2
 4537/E86E : C2 EA                      	LD	-22(P2)
 4538/E870 : 94 1A                      	JP	NXTV2
 4539/E872 : (MACRO)                    	CALL	SWAP
 4539/E872 : 3F                                  XPPC   P3
 4539/E873 : F0                                  DB     H(SWAP)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 192 - 2024年05月30日 19時01分01秒


 4539/E874 : 35                                  DB     L(SWAP)
 4540/E875 : (MACRO)                    	CALL	FSUB
 4540/E875 : 3F                                  XPPC   P3
 4540/E876 : F1                                  DB     H(FSUB)
 4540/E877 : 39                                  DB     L(FSUB)
 4541/E878 : C1 01                      	LD	1(P1)
 4542/E87A : E4 80                      	XRI	0x80
 4543/E87C : 94 15                      	JP	NXTV3
 4544/E87E : C5 06                      NXTV1:	LD	@6(P1)
 4545/E880 : C1 FE                      	LD	-2(P1)
 4546/E882 : 01                         	XAE
 4547/E883 : C1 FF                      	LD	-1(P1)
 4548/E885 : 31                         	XPAL	P1
 4549/E886 : CA FD                      	ST	AEXOFF(P2)		; store actual AEXSTK.L
 4550/E888 : 40                         	LDE
 4551/E889 : 35                         	XPAH	P1
 4552/E88A : 93 D6                      	JMP	SV_SPLOAD(P3)
 4553/E88C : (MACRO)                    NXTV2:	CALL	FSUB
 4553/E88C : 3F                                  XPPC   P3
 4553/E88D : F1                                  DB     H(FSUB)
 4553/E88E : 39                                  DB     L(FSUB)
 4554/E88F : C1 01                      	LD	1(P1)
 4555/E891 : 94 EB                      	JP	NXTV1
 4556/E893 : 02                         NXTV3:	CCL
 4557/E894 : C2 FA                      	LD	FOROFF(P2)
 4558/E896 : F4 0C                      	ADI	12			; adjust FORSTK.L by 12 up
 4559/E898 : CA FA                      	ST	FOROFF(P2)
 4560/E89A : C5 06                      	LD	@6(P1)
 4561/E89C : C2 F1                      	LD	-15(P2)
 4562/E89E : 31                         	XPAL	P1
 4563/E89F : CA FD                      	ST	AEXOFF(P2)		; store actual AEXSTK.L
 4564/E8A1 : C2 F0                      	LD	-16(P2)
 4565/E8A3 : 35                         	XPAH	P1
 4566/E8A4 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4567/E8A6 :                            
 4568/E8A6 :                            ; Load pointer P1 to search for DATA.
 4569/E8A6 : C2 ED                      LDDTA:	LD	-19(P2)			; load P1 from STACK -20,-19
 4570/E8A8 : 31                         	XPAL	P1
 4571/E8A9 : CA F1                      	ST	-15(P2)			; and store old one on STACK -16,-15
 4572/E8AB : C2 EC                      	LD	-20(P2)
 4573/E8AD : 35                         	XPAH	P1
 4574/E8AE : CA F0                      	ST	-16(P2)
 4575/E8B0 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4576/E8B2 :                            
 4577/E8B2 :                            ; Find next DATA statement.
 4578/E8B2 : C1 FF                      NXTDTA:	LD	-1(P1)			; was previous BASIC char
 4579/E8B4 : E4 0D                      	XRI	_CR			; .. a <cr> ?
 4580/E8B6 : 98 1E                      	JZ	DTA2			; no, keep scanning
 4581/E8B8 : C5 01                      DTA1:	LD	@1(P1)			; get byte from program and increase
 4582/E8BA : E4 20                      	XRI	' '			; is it <space> ?
 4583/E8BC : 98 FA                      	JZ	DTA1			; yes, just eat it
 4584/E8BE : E4 0C                      	XRI	' ' ! ','		; we XOR'ed above, is it <comma> ?
 4585/E8C0 : 98 3E                      	JZ	FNDTA
 4586/E8C2 : E4 16                      	XRI	',' ! ':'		; we XOR'ed above, is it <colon> ?
 4587/E8C4 : 98 22                      	JZ	DTA4
 4588/E8C6 : E4 37                      	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
 4589/E8C8 : 98 0C                      	JZ	DTA2
 4590/E8CA : C2 7E                      	LD	ERRNUML(P2)		; load number low
 4591/E8CC : CA F8                      	ST	NUMLO(P2)		; and store for PRNUM
 4592/E8CE : C2 7D                      	LD	ERRNUMH(P2)		; load number high
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 193 - 2024年05月30日 19時01分01秒


 4593/E8D0 : CA F7                      	ST	NUMHI(P2)		; and store for PRNUM
 4594/E8D2 : C4 94                      	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
 4595/E8D4 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4596/E8D6 : C1 00                      DTA2:	LD	(P1)			; check if we are at end
 4597/E8D8 : E4 FF                      	XRI	0xFF			; of program
 4598/E8DA : 9C 04                      	JNZ	DTA3			; no, not yet
 4599/E8DC : C4 9E                      	LDI	(M_DATA-M_BASE)		; 'DATA ERROR'
 4600/E8DE : 93 B4                      	JMP	SV_MSGOUT(P3)
 4601/E8E0 : C5 01                      DTA3:	LD	@1(P1)			; get high byte of line number and increase
 4602/E8E2 : CA 7D                      	ST	ERRNUMH(P2)		; store number high for possible error message 
 4603/E8E4 : C5 02                      	LD	@2(P1)			; get low byte of line number and incr by 2
 4604/E8E6 : CA 7E                      	ST	ERRNUML(P2)		; store number low for possible error message
 4605/E8E8 : C5 01                      DTA4:	LD	@1(P1)			; get byte from program and increase
 4606/E8EA : E4 20                      	XRI	' '			; is it <space> ?
 4607/E8EC : 98 FA                      	JZ	DTA4			; yes, just eat it
 4608/E8EE : E4 AA                      	XRI	T_DATA ! ' '		; we XOR'ed above, is it DATA token ?
 4609/E8F0 : 98 0E                      	JZ	FNDTA
 4610/E8F2 : C1 FF                      NODTA:	LD	-1(P1)			; get previous byte from program
 4611/E8F4 : E4 3A                      	XRI	':'			; is it <colon> ?
 4612/E8F6 : 98 F0                      	JZ	DTA4
 4613/E8F8 : E4 37                      	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
 4614/E8FA : 98 DA                      	JZ	DTA2
 4615/E8FC : C5 01                      	LD	@1(P1)			; get byte from program and increase
 4616/E8FE : 90 F2                      	JMP	NODTA
 4617/E900 : C5 01                      FNDTA:	LD	@1(P1)			; get byte from program and increase
 4618/E902 : E4 20                      	XRI	' '			; is it <space> ?
 4619/E904 : 98 FA                      	JZ	FNDTA			; yes, just eat it
 4620/E906 : C5 FF                      	LD	@-1(P1)			; decrease pointer to previous byte
 4621/E908 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4622/E90A :                            
 4623/E90A : C2 EF                      ISTRNG:	LD	-17(P2)			; set P3 to -17,-18
 4624/E90C : 33                         	XPAL	P3
 4625/E90D : C2 EE                      	LD	-18(P2)
 4626/E90F : 37                         	XPAH	P3
 4627/E910 : 01                         	XAE				; save P3.H into E
 4628/E911 : C5 01                      ISTR1:	LD	@1(P1)			; get byte from program and increase
 4629/E913 : CF 01                      	ST	@1(P3)			; store into P3
 4630/E915 : E4 0D                      	XRI	_CR			; is it <cr> ?
 4631/E917 : 9C F8                      	JNZ	ISTR1			; no, continue
 4632/E919 : C4 80                      	LDI	L(SPRVSR)		; restore P3
 4633/E91B : 33                         	XPAL	P3
 4634/E91C : 40                         	LDE
 4635/E91D : 37                         	XPAH	P3
 4636/E91E : C2 F1                      XCHPNT:	LD	-15(P2)			; exhange P1 with -15,-16
 4637/E920 : 31                         	XPAL	P1
 4638/E921 : CA F1                      	ST	-15(P2)
 4639/E923 : C2 F0                      	LD	-16(P2)
 4640/E925 : 35                         	XPAH	P1
 4641/E926 : CA F0                      	ST	-16(P2)
 4642/E928 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4643/E92A :                            
 4644/E92A : C2 EF                      INSTR:	LD	-17(P2)			; load P3 from STACK -18,-17
 4645/E92C : 33                         	XPAL	P3
 4646/E92D : C2 EE                      	LD	-18(P2)
 4647/E92F : 37                         	XPAH	P3
 4648/E930 : 01                         	XAE				; save P3.H into E
 4649/E931 : C1 00                      INSTR1:	LD	(P1)			; get char from program line
 4650/E933 : E4 2C                      	XRI	','			; is it <comma> ?
 4651/E935 : 98 21                      	JZ	PUTS2
 4652/E937 : E4 16                      	XRI	',' ! ':'		; we XOR'ed above, is it <colon> ?
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 194 - 2024年05月30日 19時01分01秒


 4653/E939 : 98 1D                      	JZ	PUTS2
 4654/E93B : E4 37                      	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
 4655/E93D : 98 19                      	JZ	PUTS2
 4656/E93F : C5 01                      	LD	@1(P1)			; get char from program line and increase
 4657/E941 : CF 01                      	ST	@1(P3)
 4658/E943 : 90 EC                      	JMP	INSTR1
 4659/E945 :                            
 4660/E945 :                            ; Store quoted string at address stored on STACK
 4661/E945 : C2 EF                      PUTSTR:	LD	-17(P2)			; load P3 from -18,-17
 4662/E947 : 33                         	XPAL	P3
 4663/E948 : C2 EE                      	LD	-18(P2)
 4664/E94A : 37                         	XPAH	P3
 4665/E94B : 01                         	XAE				; save P3.H into E
 4666/E94C : C5 01                      PUTS1:	LD	@1(P1)			; get char from program line and increase
 4667/E94E : E4 22                      	XRI	'"'			; is it <quote> ?
 4668/E950 : 98 06                      	JZ	PUTS2			; yes
 4669/E952 : E4 22                      	XRI	'"'			; we XOR'ed above, restore char
 4670/E954 : CF 01                      	ST	@1(P3)			; store into P3
 4671/E956 : 90 F4                      	JMP	PUTS1			; do again
 4672/E958 : C4 0D                      PUTS2:	LDI	_CR			; load <cr>
 4673/E95A : CB 00                      	ST	(P3)			; store to terminate string
 4674/E95C : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 4675/E95E : 33                         	XPAL	P3
 4676/E95F : 40                         	LDE
 4677/E960 : 37                         	XPAH	P3
 4678/E961 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4679/E963 :                            
 4680/E963 :                            ; Store begin of BASIC Program, so that READ command
 4681/E963 :                            ;  can get the very first DATA line.
 4682/E963 :                            ; NOTE:	Address is stored in STACK -16,-15.
 4683/E963 : C4 02                      FNDDTA:	LDI	2
 4684/E965 : CA F1                      	ST	-15(P2)			; low byte to -15
 4685/E967 : C2 F6                      	LD	CURPG(P2)
 4686/E969 : 1E                         	RR
 4687/E96A : 1E                         	RR
 4688/E96B : 1E                         	RR
 4689/E96C : 1E                         	RR
 4690/E96D : CA F0                      	ST	-16(P2)			; store high byte in -16
 4691/E96F : 93 D6                      	JMP	SV_SPLOAD(P3)
 4692/E971 :                            
 4693/E971 :                            ; Print quoted string.
 4694/E971 : C5 01                      PRSTR:	LD	@1(P1)			; get char from program line and incr
 4695/E973 : E4 22                      	XRI	'"'			; is it <quote> ?
 4696/E975 : 9B D6                      	JZ	SV_SPLOAD(P3)		; yes, done
 4697/E977 : C1 FF                      	LD	-1(P1)			; no, get previous character
 4698/E979 : =>DEFINED                  	IFDEF	SCALLS
 4699/E979 : (MACRO)                    	 SYSCALL	2
 4699/E979 : 3F                                  XPPC   P3
 4699/E97A : 02                                  DB     2
 4700/E97B : =>FALSE                    	ELSE
 4701/E97B :                            	 CALL	PUTASC
 4702/E97B : [4698]                     	ENDIF			; print it
 4703/E97B : 90 F4                      	JMP	PRSTR			; do again
 4704/E97D :                            
 4705/E97D :                            ; After ON command determine where to go.
 4706/E97D :                            ; NOTE: Use 16-byte integer stored on STACK -18,-17.
 4707/E97D : C2 EF                      GTO:	LD	-17(P2)
 4708/E97F : 9C 02                      	JNZ	GTO1
 4709/E981 : BA EE                      	DLD	-18(P2)
 4710/E983 : BA EF                      GTO1:	DLD	-17(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 195 - 2024年05月30日 19時01分01秒


 4711/E985 : DA EE                      	OR	-18(P2)
 4712/E987 : 98 24                      	JZ	GTO4
 4713/E989 : C5 01                      GTO2:	LD	@1(P1)			; get char from program line and incr
 4714/E98B : E4 20                      	XRI	' '			; is it <space> ?
 4715/E98D : 98 FA                      	JZ	GTO2			; yes, just eat it
 4716/E98F : E4 0C                      	XRI	' ' ! ','		; we XOR'ed above, is it <comma> ?
 4717/E991 : 98 04                      	JZ	GTO3
 4718/E993 : C4 C2                      	LDI	(M_NOGO-M_BASE)		; 'NOGO ERROR'
 4719/E995 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4720/E997 : 02                         GTO3:	CCL
 4721/E998 : C2 FD                      	LD	AEXOFF(P2)		; adjust AEXSTK by four up
 4722/E99A : F4 04                      	ADI	4
 4723/E99C : CA FD                      	ST	AEXOFF(P2)
 4724/E99E : 03                         	SCL
 4725/E99F : C2 FF                      	LD	-1(P2)			; decrease stored pointer by four
 4726/E9A1 : FC 04                      	CAI	4
 4727/E9A3 : CA FF                      	ST	-1(P2)
 4728/E9A5 : C2 FE                      	LD	-2(P2)
 4729/E9A7 : FC 00                      	CAI	0
 4730/E9A9 : CA FE                      	ST	-2(P2)
 4731/E9AB : 93 D6                      	JMP	SV_SPLOAD(P3)
 4732/E9AD : C5 01                      GTO4:	LD	@1(P1)			; get char from program line and incr
 4733/E9AF : E4 0D                      	XRI	_CR			; is it <cr> ?
 4734/E9B1 : 9B D6                      	JZ	SV_SPLOAD(P3)		; yes, done
 4735/E9B3 : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 4736/E9B5 : 9B D6                      	JZ	SV_SPLOAD(P3)		; yes, done
 4737/E9B7 : 90 F4                      	JMP	GTO4			; continue (skip until end of statement)
 4738/E9B9 :                            
 4739/E9B9 :                            ; Execute machine code.
 4740/E9B9 : C4 70                      MC:	LDI	AEXSTK+16
 4741/E9BB : 93 3C                      	JMP	SV_RTRN1(P3)
 4742/E9BD :                            
 4743/E9BD :                            ; Implement EDIT statement.
 4744/E9BD : 98 04                      EDITR:	JZ	EDIT1			; correct label was found
 4745/E9BF : C4 0A                      	LDI	(M_RDY-M_BASE)		; 'READY'
 4746/E9C1 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4747/E9C3 : CA EA                      EDIT1:	ST	-22(P2)			; store <null> as temporary counter
 4748/E9C5 :                            ; FIXME: redundant code, so replaced PRNUM by SPRNUM
 4749/E9C5 : =>FALSE                    	IF	0
 4750/E9C5 :                            	 LD	@1(P1)			; get line number high from BASIC line
 4751/E9C5 :                            	 ST	NUMHI(P2)
 4752/E9C5 :                            	 LD	@2(P1)			; get line number low and skip length of line
 4753/E9C5 :                            	 ST	NUMLO(P2)		; store line number in NUMHI / NUMLO of STACK
 4754/E9C5 :                            	 CALL	PRNUM			; print line number of BASIC line
 4755/E9C5 : [4749]                     	ENDIF
 4756/E9C5 : (MACRO)                    	CALL	SPRNUM			; store line number on STACK and print
 4756/E9C5 : 3F                                  XPPC   P3
 4756/E9C6 : D1                                  DB     H(SPRNUM)
 4756/E9C7 : B2                                  DB     L(SPRNUM)
 4757/E9C8 : C5 01                      EDIT2:	LD	@1(P1)			; get byte from BASIC line and increase
 4758/E9CA : E4 0C                      	XRI	_FF
 4759/E9CC : 9C 04                      	JNZ	EDIT3
 4760/E9CE : C4 5C                      	LDI	'\\'			; print a <backslash> instead of <ff>
 4761/E9D0 : 90 34                      	JMP	EDIT8
 4762/E9D2 : E4 01                      EDIT3:	XRI	_FF ! _CR		; we XOR'ed above, is it <cr> ?
 4763/E9D4 : 98 36                      	JZ	EDIT9			; yes, output line
 4764/E9D6 : C1 FF                      	LD	-1(P1)			; load byte again
 4765/E9D8 : 94 26                      	JP	EDIT7			; jump, is normal character
 4766/E9DA : 01                         	XAE				; save in E
 4767/E9DB :                            	; NOTE:	Byte has bit7 set, so must be token, identify it.
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 196 - 2024年05月30日 19時01分01秒


 4768/E9DB : C4 3D                      	LDI	L(TOKENS)		; load P1 with token table
 4769/E9DD : 31                         	XPAL	P1
 4770/E9DE : CA F1                      	ST	-15(P2)			; save prev P1.L
 4771/E9E0 : C4 D7                      	LDI	H(TOKENS)
 4772/E9E2 : 35                         	XPAH	P1
 4773/E9E3 : CA F0                      	ST	-16(P2)			; save prev P1.H
 4774/E9E5 : 40                         EDIT4:	LDE				; load token from E
 4775/E9E6 : E5 01                      	XOR	@1(P1)			; compare with token from table and incr
 4776/E9E8 : 98 06                      	JZ	EDIT6			; jump if token found
 4777/E9EA : C5 01                      EDIT5:	LD	@1(P1)			; get byte from token table and incr
 4778/E9EC : 94 FC                      	JP	EDIT5			; loop until terminating byte (bit7 set)
 4779/E9EE : 90 F5                      	JMP	EDIT4			; compare with next token
 4780/E9F0 : AA EA                      EDIT6:	ILD	-22(P2)
 4781/E9F2 : C5 01                      	LD	@1(P1)			; load byte of keyword pointed to by P1 and incr
 4782/E9F4 : =>DEFINED                  	IFDEF	SCALLS
 4783/E9F4 : (MACRO)                    	 SYSCALL	2
 4783/E9F4 : 3F                                  XPPC   P3
 4783/E9F5 : 02                                  DB     2
 4784/E9F6 : =>FALSE                    	ELSE
 4785/E9F6 :                            	 CALL	PUTASC
 4786/E9F6 : [4782]                     	ENDIF
 4787/E9F6 : 94 F8                      	JP	EDIT6			; loop until terminating byte (bit7 set)
 4788/E9F8 : C2 F1                      	LD	-15(P2)			; load saved P1 (line buffer) from STACK -15, -16
 4789/E9FA : 31                         	XPAL	P1
 4790/E9FB : C2 F0                      	LD	-16(P2)
 4791/E9FD : 35                         	XPAH	P1			; load old P1 (line buffer) from STACK
 4792/E9FE : 90 C8                      	JMP	EDIT2
 4793/EA00 : D4 60                      EDIT7:	ANI	0x60			; is it really digit or letter ?
 4794/EA02 : 98 C4                      	JZ	EDIT2			; looks as non-printable, continue
 4795/EA04 : C1 FF                      	LD	-1(P1)
 4796/EA06 : =>DEFINED                  EDIT8:	IFDEF	SCALLS
 4797/EA06 : (MACRO)                    	 SYSCALL	2
 4797/EA06 : 3F                                  XPPC   P3
 4797/EA07 : 02                                  DB     2
 4798/EA08 : =>FALSE                    	ELSE
 4799/EA08 :                            	 CALL	PUTASC
 4800/EA08 : [4796]                     	ENDIF
 4801/EA08 : AA EA                      	ILD	-22(P2)
 4802/EA0A : 90 BC                      	JMP	EDIT2
 4803/EA0C :                            ; NOTE:	Set cursor back behind line number, use counter fron STACK -22
 4804/EA0C : C4 08                      EDIT9:	LDI	_BS			; load <backspace>
 4805/EA0E : =>DEFINED                  	IFDEF	SCALLS
 4806/EA0E : (MACRO)                    	 SYSCALL	2
 4806/EA0E : 3F                                  XPPC   P3
 4806/EA0F : 02                                  DB     2
 4807/EA10 : =>FALSE                    	ELSE
 4808/EA10 :                            	 CALL	PUTASC
 4809/EA10 : [4805]                     	ENDIF
 4810/EA10 : BA EA                      	DLD	-22(P2)
 4811/EA12 : 9C F8                      	JNZ	EDIT9			; not zero, loop again
 4812/EA14 : C4 B6                      	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
 4813/EA16 : 31                         	XPAL	P1
 4814/EA17 : C3 A2                      	LD	STKPHI(P3)
 4815/EA19 : DC 03                      	ORI	H(STKIBUF)		; offset for STKBASE.H
 4816/EA1B : 35                         	XPAH	P1			; set P1.H to start of input buffer
 4817/EA1C : C2 00                      	LD	(P2)			; load input buffer length, max. number of chars
 4818/EA1E : CA EA                      	ST	-22(P2)			; store as temporary counter
 4819/EA20 : 01                         CLRBUF:	XAE
 4820/EA21 : C4 FF                      	LDI	0xFF			; load as empty-marker (nothing here)
> > > NIBLFP.asm(4821):5: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 197 - 2024年05月30日 19時01分01秒


 4821/EA23 : C9 80                      	ST	EREG(P1)		; fill input buffer with empty-marker
 4822/EA25 : BA EA                      	DLD	-22(P2)			; decrease temp counter
 4823/EA27 : 94 F7                      	JP	CLRBUF
 4824/EA29 : C4 00                      	LDI	0
 4825/EA2B : 01                         	XAE
 4826/EA2C :                            ;NOTE:	Copy line number into line buffer
 4827/EA2C : C2 FD                      	LD	AEXOFF(P2)
 4828/EA2E : 32                         	XPAL	P2
 4829/EA2F : C6 F7                      	LD	@-9(P2)			; advance P1 to begin of stored number string
 4830/EA31 : CD 01                      EDIT10:	ST	@1(P1)			; store digit in line buffer
 4831/EA33 : 02                         	CCL
 4832/EA34 : 01                         	XAE
 4833/EA35 : F4 01                      	ADI	1
 4834/EA37 : 01                         	XAE
 4835/EA38 : C6 FF                      	LD	@-1(P2)
 4836/EA3A : 9C F5                      	JNZ	EDIT10			; loop until <null>
 4837/EA3C : C4 80                      EDIT11:	LDI	STKMID
 4838/EA3E : 32                         	XPAL	P2
 4839/EA3F : 40                         	LDE
 4840/EA40 : CA E7                      	ST	CHRNUM(P2)		; store as index after line number
 4841/EA42 : C2 F3                      	LD	-13(P2)
 4842/EA44 : 33                         	XPAL	P3
 4843/EA45 : C2 F2                      	LD	-14(P2)
 4844/EA47 : 37                         	XPAH	P3
 4845/EA48 : C7 03                      	LD	@3(P3)			; advance P3 to first byte of program line
 4846/EA4A : C7 01                      EDIT12:	LD	@1(P3)			; get that byte
 4847/EA4C : E4 0D                      	XRI	_CR			; is it <cr> ?
 4848/EA4E : 98 32                      	JZ	EDIT17			; yes, we are done
 4849/EA50 : C3 FF                      	LD	-1(P3)			; no, load byte anew
 4850/EA52 : 94 2A                      	JP	EDIT16			; go, no token
 4851/EA54 : CA EA                      	ST	-22(P2)			; save token temporary
 4852/EA56 : C4 3D                      	LDI	L(TOKENS)		; load P3 with token table
 4853/EA58 : 33                         	XPAL	P3
 4854/EA59 : CA F1                      	ST	-15(P2)			; save prev P3.L
 4855/EA5B : C4 D7                      	LDI	H(TOKENS)
 4856/EA5D : 37                         	XPAH	P3
 4857/EA5E : CA F0                      	ST	-16(P2)			; save prev P3.H
 4858/EA60 : C2 EA                      EDIT13:	LD	-22(P2)			; load token
 4859/EA62 : E7 01                      	XOR	@1(P3)			; test for it in table
 4860/EA64 : 98 06                      	JZ	EDIT15
 4861/EA66 : C7 01                      EDIT14:	LD	@1(P3)
 4862/EA68 : 94 FC                      	JP	EDIT14			; skip keyword
 4863/EA6A : 90 F4                      	JMP	EDIT13			; loop for next
 4864/EA6C : C7 01                      EDIT15:	LD	@1(P3)
 4865/EA6E : D4 7F                      	ANI	0x7F
 4866/EA70 : CD 01                      	ST	@1(P1)
 4867/EA72 : C3 FF                      	LD	-1(P3)
 4868/EA74 : 94 F6                      	JP	EDIT15
 4869/EA76 : C2 F1                      	LD	-15(P2)
 4870/EA78 : 33                         	XPAL	P3
 4871/EA79 : C2 F0                      	LD	-16(P2)
 4872/EA7B : 37                         	XPAH	P3
 4873/EA7C : 90 CC                      	JMP	EDIT12
 4874/EA7E : CD 01                      EDIT16:	ST	@1(P1)
 4875/EA80 : 90 C8                      	JMP	EDIT12
 4876/EA82 : C4 B6                      EDIT17:	LDI	L(STKIBUF)		; set P1.L back to start of input buffer
 4877/EA84 : 31                         	XPAL	P1
 4878/EA85 : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 4879/EA87 : 33                         	XPAL	P3
 4880/EA88 : C2 9C                      	LD	-100(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 198 - 2024年05月30日 19時01分01秒


 4881/EA8A : 37                         	XPAH	P3
 4882/EA8B : 93 D6                      	JMP	SV_SPLOAD(P3)
 4883/EA8D :                            
 4884/EA8D :                            ; Test for decimal number and store as 16-byte integer on AEXSTK.
 4885/EA8D : C5 01                      NUMTST:	LD	@1(P1)			; get byte from program and increase
 4886/EA8F : E4 20                      	XRI	' '			; is it <space> ?
 4887/EA91 : 98 FA                      	JZ	NUMTST			; yes, just eat it
 4888/EA93 : E4 20                      	XRI	' '			; XOR back, restore byte
 4889/EA95 : 03                         	SCL
 4890/EA96 : FC 3A                      	CAI	'9'+1
 4891/EA98 : 94 04                      	JP	NUMERR			; no digit
 4892/EA9A : F4 0A                      	ADI	10			; '9'-'0'+1
 4893/EA9C : 94 06                      	JP	DIGIT			; is digit
 4894/EA9E : C5 FF                      NUMERR:	LD	@-1(P1)
 4895/EAA0 : C4 D7                      	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
 4896/EAA2 : 93 B4                      	JMP	SV_MSGOUT(P3)
 4897/EAA4 : 01                         DIGIT:	XAE
 4898/EAA5 : BA FD                      	DLD	AEXOFF(P2)		; adjust AEXSTK by two down
 4899/EAA7 : BA FD                      	DLD	AEXOFF(P2)
 4900/EAA9 : 32                         	XPAL	P2
 4901/EAAA : 40                         	LDE
 4902/EAAB : CA 01                      	ST	1(P2)
 4903/EAAD : 60                         	XRE
 4904/EAAE : CA 00                      DIGIT1:	ST	(P2)
 4905/EAB0 : 03                         	SCL
 4906/EAB1 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 4907/EAB3 : FC 3A                      	CAI	'9'+1
 4908/EAB5 : 94 04                      	JP	NUMEND			; no digit
 4909/EAB7 : F4 0A                      	ADI	10			; '9'-'0'+1
 4910/EAB9 : 94 07                      	JP	MORE
 4911/EABB : C5 FF                      NUMEND:	LD	@-1(P1)			; decr P1, load previous program byte
 4912/EABD : C4 80                      	LDI	STKMID
 4913/EABF : 32                         	XPAL	P2
 4914/EAC0 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4915/EAC2 : 01                         MORE:	XAE
 4916/EAC3 : 02                         	CCL
 4917/EAC4 : C2 01                      	LD	1(P2)
 4918/EAC6 : F2 01                      	ADD	1(P2)
 4919/EAC8 : CA FF                      	ST	-1(P2)
 4920/EACA : C2 00                      	LD	(P2)
 4921/EACC : F2 00                      	ADD	(P2)
 4922/EACE : CA FE                      	ST	-2(P2)
 4923/EAD0 : 02                         	CCL
 4924/EAD1 : C2 FF                      	LD	-1(P2)
 4925/EAD3 : F2 FF                      	ADD	-1(P2)
 4926/EAD5 : CA FF                      	ST	-1(P2)
 4927/EAD7 : C2 FE                      	LD	-2(P2)
 4928/EAD9 : F2 FE                      	ADD	-2(P2)
 4929/EADB : CA FE                      	ST	-2(P2)
 4930/EADD : 02                         	CCL
 4931/EADE : C2 FF                      	LD	-1(P2)
 4932/EAE0 : F2 01                      	ADD	1(P2)
 4933/EAE2 : CA 01                      	ST	1(P2)
 4934/EAE4 : C2 FE                      	LD	-2(P2)
 4935/EAE6 : F2 00                      	ADD	(P2)
 4936/EAE8 : CA 00                      	ST	(P2)
 4937/EAEA : 02                         	CCL
 4938/EAEB : C2 01                      	LD	1(P2)
 4939/EAED : F2 01                      	ADD	1(P2)
 4940/EAEF : CA 01                      	ST	1(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 199 - 2024年05月30日 19時01分01秒


 4941/EAF1 : C2 00                      	LD	(P2)
 4942/EAF3 : F2 00                      	ADD	(P2)
 4943/EAF5 : CA 00                      	ST	(P2)
 4944/EAF7 : 02                         	CCL
 4945/EAF8 : 40                         	LDE
 4946/EAF9 : F2 01                      	ADD	1(P2)
 4947/EAFB : CA 01                      	ST	1(P2)
 4948/EAFD : C4 00                      	LDI	0
 4949/EAFF : F2 00                      	ADD	(P2)
 4950/EB01 : 94 AB                      	JP	DIGIT1
 4951/EB03 : 93 6B                      	JMP	SV_VALERR(P3)
 4952/EB05 :                            
 4953/EB05 :                            ; AUTO statement: Output line number and give max. char count per line.
 4954/EB05 : C2 EF                      AUTONM:	LD	-17(P2)			; get line number from STACK -18, -17
 4955/EB07 : CA F8                      	ST	NUMLO(P2)		; and store for PRNUM
 4956/EB09 : C2 EE                      	LD	-18(P2)
 4957/EB0B : CA F7                      	ST	NUMHI(P2)
 4958/EB0D : (MACRO)                    	CALL	PRNUM
 4958/EB0D : 3F                                  XPPC   P3
 4958/EB0E : D1                                  DB     H(PRNUM)
 4958/EB0F : BA                                  DB     L(PRNUM)
 4959/EB10 : C4 48                      	LDI	72			; max. characters per line
 4960/EB12 : CA 00                      	ST	(P2)
 4961/EB14 : 93 D6                      	JMP	SV_SPLOAD(P3)
 4962/EB16 :                            
 4963/EB16 :                            ; AUTO statement: Load distance to next line from AEXSTK.
 4964/EB16 : C2 E7                      AUTON:	LD	CHRNUM(P2)
 4965/EB18 : 9B D6                      	JZ	SV_SPLOAD(P3)
 4966/EB1A : C2 FD                      	LD	AEXOFF(P2)		; load P1 with arithmetics stack
 4967/EB1C : 31                         	XPAL	P1
 4968/EB1D : C3 A2                      	LD	STKPHI(P3)
 4969/EB1F : 35                         	XPAH	P1
 4970/EB20 : 02                         	CCL
 4971/EB21 : C2 F8                      	LD	NUMLO(P2)		; load last line number.
 4972/EB23 : F1 01                      	ADD	1(P1)			; add distance to next line..
 4973/EB25 : CA EF                      	ST	-17(P2)			; ..and store on STACK -18, -17
 4974/EB27 : C2 F7                      	LD	NUMHI(P2)
 4975/EB29 : F1 00                      	ADD	(P1)
 4976/EB2B : CA EE                      	ST	-18(P2)
 4977/EB2D : 93 D6                      	JMP	SV_SPLOAD(P3)
 4978/EB2F :                            
 4979/EB2F :                            ; Convert floating point number on arithmetics stack into 16-bit integer.
 4980/EB2F : AA FD                      FIX:	ILD	AEXOFF(P2)		; adjust STACK top by two up
 4981/EB31 : AA FD                      	ILD	AEXOFF(P2)
 4982/EB33 : 32                         	XPAL	P2
 4983/EB34 : C2 00                      	LD	(P2)
 4984/EB36 : CA 01                      	ST	1(P2)
 4985/EB38 : C2 FF                      	LD	-1(P2)
 4986/EB3A : CA 00                      	ST	(P2)
 4987/EB3C : C4 00                      	LDI	0
 4988/EB3E : 01                         FIX1:	XAE
 4989/EB3F : 03                         FIX2:	SCL
 4990/EB40 : AA FE                      	ILD	-2(P2)
 4991/EB42 : 9B 6B                      	JZ	SV_VALERR(P3)
 4992/EB44 : 94 27                      	JP	FIX5
 4993/EB46 : FC 8F                      	CAI	0x8F
 4994/EB48 : 98 13                      	JZ	FIX3
 4995/EB4A : C2 00                      	LD	(P2)
 4996/EB4C : F2 00                      	ADD	(P2)
 4997/EB4E : C2 00                      	LD	(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 200 - 2024年05月30日 19時01分01秒


 4998/EB50 : 1F                         	RRL
 4999/EB51 : CA 00                      	ST	(P2)
 5000/EB53 : C2 01                      	LD	1(P2)
 5001/EB55 : 1F                         	RRL
 5002/EB56 : CA 01                      	ST	1(P2)
 5003/EB58 : 06                         	CSA
 5004/EB59 : 94 E4                      	JP	FIX2
 5005/EB5B : 90 E1                      	JMP	FIX1
 5006/EB5D : 40                         FIX3:	LDE
 5007/EB5E : D2 00                      	AND	(P2)
 5008/EB60 : 94 06                      	JP	FIX4
 5009/EB62 : AA 01                      	ILD	1(P2)
 5010/EB64 : 9C 02                      	JNZ	FIX4
 5011/EB66 : AA 00                      	ILD	(P2)
 5012/EB68 : C4 80                      FIX4:	LDI	STKMID
 5013/EB6A : 32                         	XPAL	P2
 5014/EB6B : 93 D6                      	JMP	SV_SPLOAD(P3)
 5015/EB6D : C4 00                      FIX5:	LDI	0
 5016/EB6F : CA 01                      	ST	1(P2)
 5017/EB71 : CA 00                      	ST	(P2)
 5018/EB73 : 90 F3                      	JMP	FIX4
 5019/EB75 :                            
 5020/EB75 :                            ; Implement MID$ string function for quoted strings.
 5021/EB75 : C2 FD                      MIDST:	LD	AEXOFF(P2)
 5022/EB77 : 32                         	XPAL	P2
 5023/EB78 : C5 01                      MID1:	LD	@1(P1)			; get byte from program and increase
 5024/EB7A : E4 22                      	XRI	'"'			; is it <quote> ?
 5025/EB7C : 98 0C                      	JZ	MID3
 5026/EB7E : C2 03                      	LD	3(P2)
 5027/EB80 : 9C 02                      	JNZ	MID2
 5028/EB82 : BA 02                      	DLD	2(P2)
 5029/EB84 : BA 03                      MID2:	DLD	3(P2)
 5030/EB86 : DA 02                      	OR	2(P2)
 5031/EB88 : 9C EE                      	JNZ	MID1
 5032/EB8A : C5 FF                      MID3:	LD	@-1(P1)
 5033/EB8C : C2 01                      	LD	1(P2)
 5034/EB8E : CA 03                      	ST	3(P2)
 5035/EB90 : C6 02                      	LD	@2(P2)
 5036/EB92 : CA 00                      	ST	(P2)
 5037/EB94 : C4 80                      	LDI	STKMID
 5038/EB96 : 32                         	XPAL	P2
 5039/EB97 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 5040/EB99 :                            
 5041/EB99 :                            ; Implement LEFT$ string function for quoted strings.
 5042/EB99 : AA FD                      LEFTST:	ILD	AEXOFF(P2)		; adjust STACK top by two up
 5043/EB9B : AA FD                      	ILD	AEXOFF(P2)
 5044/EB9D : 32                         	XPAL	P2
 5045/EB9E : C2 01                      	LD	1(P2)
 5046/EBA0 : 33                         	XPAL	P3
 5047/EBA1 : C2 00                      	LD	(P2)
 5048/EBA3 : 37                         	XPAH	P3
 5049/EBA4 : 01                         	XAE
 5050/EBA5 : C5 01                      LEFT1:	LD	@1(P1)			; get byte from program and increase
 5051/EBA7 : E4 22                      	XRI	'"'			; is it <quote> ?
 5052/EBA9 : 98 10                      	JZ	LEFT3
 5053/EBAB : E4 22                      	XRI	'"'			; undo XOR, restore char
 5054/EBAD : CF 01                      	ST	@1(P3)
 5055/EBAF : C2 FF                      	LD	-1(P2)
 5056/EBB1 : 9C 02                      	JNZ	LEFT2
 5057/EBB3 : BA FE                      	DLD	-2(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 201 - 2024年05月30日 19時01分01秒


 5058/EBB5 : BA FF                      LEFT2:	DLD	-1(P2)
 5059/EBB7 : DA FE                      	OR	-2(P2)
 5060/EBB9 : 9C EA                      	JNZ	LEFT1
 5061/EBBB : C4 0D                      LEFT3:	LDI	_CR			; store <cr> in P3
 5062/EBBD : CB 00                      	ST	(P3)			; (terminate string)
 5063/EBBF : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 5064/EBC1 : 33                         	XPAL	P3
 5065/EBC2 : CA 01                      	ST	1(P2)
 5066/EBC4 : 40                         	LDE
 5067/EBC5 : 37                         	XPAH	P3
 5068/EBC6 : CA 00                      	ST	(P2)			; store string addr.H
 5069/EBC8 : C4 80                      	LDI	STKMID			; restore stack
 5070/EBCA : 32                         	XPAL	P2
 5071/EBCB : C2 F1                      	LD	-15(P2)			; restore P1
 5072/EBCD : 31                         	XPAL	P1
 5073/EBCE : C2 F0                      	LD	-16(P2)
 5074/EBD0 : 35                         	XPAH	P1
 5075/EBD1 : 93 5B                      	JMP	SV_RTFUNC(P3)
 5076/EBD3 :                            
 5077/EBD3 :                            ; Implement RIGHT$ string function for quoted strings.
 5078/EBD3 : AA FD                      RGHTST:	ILD	AEXOFF(P2)		; adjust STACK top by two up
 5079/EBD5 : AA FD                      	ILD	AEXOFF(P2)
 5080/EBD7 : 32                         	XPAL	P2
 5081/EBD8 : C2 01                      	LD	1(P2)
 5082/EBDA : 33                         	XPAL	P3
 5083/EBDB : C2 00                      	LD	(P2)
 5084/EBDD : 37                         	XPAH	P3
 5085/EBDE : 01                         	XAE
 5086/EBDF : C5 01                      RIGHT1:	LD	@1(P1)			; get byte from program and increase
 5087/EBE1 : E4 22                      	XRI	'"'			; is it <quote> ?
 5088/EBE3 : 9C FA                      	JNZ	RIGHT1
 5089/EBE5 : C5 FF                      	LD	@-1(P1)
 5090/EBE7 : C1 FF                      RIGHT2:	LD	-1(P1)
 5091/EBE9 : E4 22                      	XRI	'"'			; is it <quote> ?
 5092/EBEB : 98 0E                      	JZ	RIGHT4
 5093/EBED : C5 FF                      	LD	@-1(P1)
 5094/EBEF : C2 FF                      	LD	-1(P2)
 5095/EBF1 : 9C 02                      	JNZ	RIGHT3
 5096/EBF3 : BA FE                      	DLD	-2(P2)
 5097/EBF5 : BA FF                      RIGHT3:	DLD	-1(P2)
 5098/EBF7 : DA FE                      	OR	-2(P2)
 5099/EBF9 : 9C EC                      	JNZ	RIGHT2
 5100/EBFB : C5 01                      RIGHT4:	LD	@1(P1)			; get byte from program and increase
 5101/EBFD : E4 22                      	XRI	'"'			; is it <quote> ?
 5102/EBFF : 98 BA                      	JZ	LEFT3			; use end of LEFT$ for restoring ponzers
 5103/EC01 : E4 22                      	XRI	'"'			; undo XOR, restore char
 5104/EC03 : CF 01                      	ST	@1(P3)
 5105/EC05 : 90 F4                      	JMP	RIGHT4
 5106/EC07 :                            
 5107/EC07 :                            ; Implement CHR$ string function.
 5108/EC07 : AA FD                      CHRSTR:	ILD	AEXOFF(P2)		; adjust STACK top by two up
 5109/EC09 : AA FD                      	ILD	AEXOFF(P2)
 5110/EC0B : 32                         	XPAL	P2
 5111/EC0C : C2 01                      	LD	1(P2)
 5112/EC0E : 33                         	XPAL	P3
 5113/EC0F : C2 00                      	LD	(P2)
 5114/EC11 : 37                         	XPAH	P3
 5115/EC12 : 01                         	XAE
 5116/EC13 : C2 FF                      	LD	-1(P2)
 5117/EC15 : CF 01                      	ST	@1(P3)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 202 - 2024年05月30日 19時01分01秒


 5118/EC17 : 90 16                      	JMP	PUTST2
 5119/EC19 :                            
 5120/EC19 : C2 FD                      PUTST:	LD	AEXOFF(P2)
 5121/EC1B : 32                         	XPAL	P2
 5122/EC1C : C2 01                      	LD	1(P2)
 5123/EC1E : 33                         	XPAL	P3
 5124/EC1F : C2 00                      	LD	(P2)
 5125/EC21 : 37                         	XPAH	P3
 5126/EC22 : 01                         	XAE
 5127/EC23 : C5 01                      PUTST1:	LD	@1(P1)			; get byte from program and increase
 5128/EC25 : E4 22                      	XRI	'"'			; is it <quote> ?
 5129/EC27 : 98 06                      	JZ	PUTST2
 5130/EC29 : E4 22                      	XRI	'"'			; we XOR'ed above, restore char
 5131/EC2B : CF 01                      	ST	@1(P3)
 5132/EC2D : 90 F4                      	JMP	PUTST1
 5133/EC2F : C4 0D                      PUTST2:	LDI	_CR
 5134/EC31 : CB 00                      	ST	(P3)			; store terminating <cr>
 5135/EC33 : C4 80                      	LDI	L(SPRVSR)
 5136/EC35 : 33                         	XPAL	P3
 5137/EC36 : CA 01                      	ST	1(P2)
 5138/EC38 : 40                         	LDE
 5139/EC39 : 37                         	XPAH	P3
 5140/EC3A : CA 00                      	ST	(P2)
 5141/EC3C : C4 80                      	LDI	STKMID
 5142/EC3E : 32                         	XPAL	P2
 5143/EC3F : 93 5B                      	JMP	SV_RTFUNC(P3)
 5144/EC41 :                            
 5145/EC41 :                            ; Implement MID$ function with string variable.
 5146/EC41 : C2 FD                      MIDSTR:	LD	AEXOFF(P2)
 5147/EC43 : 32                         	XPAL	P2
 5148/EC44 : C2 05                      	LD	5(P2)
 5149/EC46 : 31                         	XPAL	P1
 5150/EC47 : CA 05                      	ST	5(P2)
 5151/EC49 : C2 04                      	LD	4(P2)
 5152/EC4B : 35                         	XPAH	P1
 5153/EC4C : CA 04                      	ST	4(P2)
 5154/EC4E : C5 01                      MSTR1:	LD	@1(P1)			; get byte from program and increase
 5155/EC50 : E4 0D                      	XRI	_CR			; is it <cr> ?
 5156/EC52 : 98 0C                      	JZ	MSTR3
 5157/EC54 : C2 03                      	LD	3(P2)
 5158/EC56 : 9C 02                      	JNZ	MSTR2
 5159/EC58 : BA 02                      	DLD	2(P2)
 5160/EC5A : BA 03                      MSTR2:	DLD	3(P2)
 5161/EC5C : DA 02                      	OR	2(P2)
 5162/EC5E : 9C EE                      	JNZ	MSTR1
 5163/EC60 : C5 FF                      MSTR3:	LD	@-1(P1)
 5164/EC62 : C2 01                      	LD	1(P2)
 5165/EC64 : CA 03                      	ST	3(P2)
 5166/EC66 : C6 06                      	LD	@6(P2)
 5167/EC68 : CA FC                      	ST	-4(P2)
 5168/EC6A : 90 0F                      	JMP	LFSTR1
 5169/EC6C :                            
 5170/EC6C :                            ; Implement LEFT$ function with string variable.
 5171/EC6C : C2 FD                      LFTSTR:	LD	AEXOFF(P2)
 5172/EC6E : 32                         	XPAL	P2
 5173/EC6F : C2 03                      	LD	3(P2)
 5174/EC71 : 31                         	XPAL	P1
 5175/EC72 : CA 03                      	ST	3(P2)
 5176/EC74 : C2 02                      	LD	2(P2)
 5177/EC76 : 35                         	XPAH	P1
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 203 - 2024年05月30日 19時01分01秒


 5178/EC77 : CA 02                      	ST	2(P2)
 5179/EC79 : C6 04                      	LD	@4(P2)
 5180/EC7B : C2 01                      LFSTR1:	LD	1(P2)
 5181/EC7D : 33                         	XPAL	P3
 5182/EC7E : C2 00                      	LD	(P2)
 5183/EC80 : 37                         	XPAH	P3
 5184/EC81 : 01                         	XAE
 5185/EC82 : C5 01                      LFSTR2:	LD	@1(P1)			; get byte from program and increase
 5186/EC84 : E4 0D                      	XRI	_CR			; is it <cr> ?
 5187/EC86 : 98 10                      	JZ	LFSTR4
 5188/EC88 : E4 0D                      	XRI	_CR			; undo XOR, restore char
 5189/EC8A : CF 01                      	ST	@1(P3)
 5190/EC8C : C2 FD                      	LD	AEXOFF(P2)
 5191/EC8E : 9C 02                      	JNZ	LFSTR3
 5192/EC90 : BA FC                      	DLD	-4(P2)
 5193/EC92 : BA FD                      LFSTR3:	DLD	AEXOFF(P2)
 5194/EC94 : DA FC                      	OR	-4(P2)
 5195/EC96 : 9C EA                      	JNZ	LFSTR2
 5196/EC98 : C4 0D                      LFSTR4:	LDI	_CR			; load <cr>
 5197/EC9A : CB 00                      	ST	(P3)			; store as string terminator
 5198/EC9C : 90 64                      	JMP	STREND
 5199/EC9E :                            
 5200/EC9E :                            ; Implement RIGHT$ function with string variable.
 5201/EC9E : C2 FD                      RGHSTR:	LD	AEXOFF(P2)
 5202/ECA0 : 32                         	XPAL	P2
 5203/ECA1 : C2 03                      	LD	3(P2)
 5204/ECA3 : 31                         	XPAL	P1
 5205/ECA4 : CA 03                      	ST	3(P2)
 5206/ECA6 : C2 02                      	LD	2(P2)
 5207/ECA8 : 35                         	XPAH	P1
 5208/ECA9 : CA 02                      	ST	2(P2)
 5209/ECAB : C2 05                      	LD	5(P2)
 5210/ECAD : 33                         	XPAL	P3
 5211/ECAE : C2 04                      	LD	4(P2)
 5212/ECB0 : 37                         	XPAH	P3
 5213/ECB1 : 01                         	XAE
 5214/ECB2 : C4 FF                      	LDI	0xFF
 5215/ECB4 : CA FF                      	ST	-1(P2)
 5216/ECB6 : CA FE                      	ST	-2(P2)
 5217/ECB8 : AA FF                      RGSTR1:	ILD	-1(P2)
 5218/ECBA : 9C 02                      	JNZ	RGSTR2
 5219/ECBC : AA FE                      	ILD	-2(P2)
 5220/ECBE : C5 01                      RGSTR2:	LD	@1(P1)			; get byte from program and increase
 5221/ECC0 : E4 0D                      	XRI	_CR			; is it <cr> ?
 5222/ECC2 : 9C F4                      	JNZ	RGSTR1
 5223/ECC4 : C5 FF                      	LD	@-1(P1)
 5224/ECC6 : 03                         	SCL
 5225/ECC7 : C2 FF                      	LD	-1(P2)
 5226/ECC9 : FA 01                      	CAD	1(P2)
 5227/ECCB : C2 FE                      	LD	-2(P2)
 5228/ECCD : FE 04                      	CAD	@4(P2)
 5229/ECCF : 94 08                      	JP	RGSTR3
 5230/ECD1 : C2 FB                      	LD	-5(P2)
 5231/ECD3 : CA FD                      	ST	AEXOFF(P2)
 5232/ECD5 : C2 FA                      	LD	-6(P2)
 5233/ECD7 : CA FC                      	ST	-4(P2)
 5234/ECD9 : 03                         RGSTR3:	SCL
 5235/ECDA : 31                         	XPAL	P1
 5236/ECDB : FA FD                      	CAD	AEXOFF(P2)
 5237/ECDD : 31                         	XPAL	P1
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 204 - 2024年05月30日 19時01分01秒


 5238/ECDE : 35                         	XPAH	P1
 5239/ECDF : FA FC                      	CAD	-4(P2)
 5240/ECE1 : 35                         	XPAH	P1
 5241/ECE2 : 90 14                      	JMP	MVSTR1
 5242/ECE4 : C2 FD                      MOVSTR:	LD	AEXOFF(P2)
 5243/ECE6 : 32                         	XPAL	P2
 5244/ECE7 : C6 01                      	LD	@1(P2)
 5245/ECE9 : 35                         	XPAH	P1
 5246/ECEA : CA FF                      	ST	-1(P2)
 5247/ECEC : C6 01                      	LD	@1(P2)
 5248/ECEE : 31                         	XPAL	P1
 5249/ECEF : CA FF                      	ST	-1(P2)
 5250/ECF1 : C2 00                      	LD	(P2)
 5251/ECF3 : 37                         	XPAH	P3
 5252/ECF4 : 01                         	XAE
 5253/ECF5 : C2 01                      	LD	1(P2)
 5254/ECF7 : 33                         	XPAL	P3
 5255/ECF8 : C5 01                      MVSTR1:	LD	@1(P1)			; get byte from source string
 5256/ECFA : CF 01                      	ST	@1(P3)			; store in destination string
 5257/ECFC : E4 0D                      	XRI	_CR			; is it a <cr> ?
 5258/ECFE : 9C F8                      	JNZ	MVSTR1			; nope, continue
 5259/ED00 : C7 FF                      	LD	@-1(P3)
 5260/ED02 : C2 FF                      STREND:	LD	-1(P2)			; finish functions for string variables
 5261/ED04 : 31                         	XPAL	P1
 5262/ED05 : C2 FE                      	LD	-2(P2)
 5263/ED07 : 35                         	XPAH	P1
 5264/ED08 : C4 80                      	LDI	L(SPRVSR)
 5265/ED0A : 33                         	XPAL	P3
 5266/ED0B : CA 01                      	ST	1(P2)
 5267/ED0D : 40                         	LDE
 5268/ED0E : 37                         	XPAH	P3
 5269/ED0F : CA 00                      	ST	(P2)
 5270/ED11 : C4 80                      	LDI	STKMID
 5271/ED13 : 32                         	XPAL	P2
 5272/ED14 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 5273/ED16 : 93 5B                      	JMP	SV_RTFUNC(P3)
 5274/ED18 :                            
 5275/ED18 :                            ; Convert floating point number into string and
 5276/ED18 :                            ;  Leave address of string on arithmetics stack.
 5277/ED18 :                            ; NOTE: By using FNUM before the desired string is on AEXSTK.
 5278/ED18 : C2 FD                      FSTRNG:	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
 5279/ED1A : 31                         	XPAL	P1			; P1 holds arithmetics stack
 5280/ED1B : C1 05                      	LD	5(P1)			; get destination address from AEXSTK
 5281/ED1D : 33                         	XPAL	P3
 5282/ED1E : C1 04                      	LD	4(P1)
 5283/ED20 : 37                         	XPAH	P3			; P3 holds start of ASCII representation
 5284/ED21 : 01                         	XAE				; save prev P3.H to E
 5285/ED22 : C5 FB                      	LD	@-5(P1)			; get byte from source string
 5286/ED24 : CF 01                      FSTR1:	ST	@1(P3)			; store byte into destination string
 5287/ED26 : C5 FF                      	LD	@-1(P1)			; get previous byte from source string
 5288/ED28 :                            ; FIXME: delimiter byte changed from bit7 set to zero byte.
 5289/ED28 : 9C FA                      	JNZ	FSTR1			; loop until <null>
 5290/ED2A : C4 0D                      	LDI	_CR			; terminate string with a <cr>
 5291/ED2C : CB 00                      	ST	(P3)
 5292/ED2E : C4 5E                      	LDI	L(AEXSTK)-2		; restore P1 back so point to destination
 5293/ED30 : 31                         	XPAL	P1
 5294/ED31 : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 5295/ED33 : 33                         	XPAL	P3
 5296/ED34 : C9 01                      	ST	1(P1)			; store address of new string in P1
 5297/ED36 : 40                         	LDE				; restore saved P3.H from E
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 205 - 2024年05月30日 19時01分01秒


 5298/ED37 : 37                         	XPAH	P3
 5299/ED38 : C9 00                      	ST	(P1)
 5300/ED3A : 93 D6                      	JMP	SV_SPLOAD(P3)
 5301/ED3C :                            
 5302/ED3C : AA FD                      POPSTR:	ILD	AEXOFF(P2)		; adjust STACK top by two up
 5303/ED3E : AA FD                      	ILD	AEXOFF(P2)
 5304/ED40 : 93 5B                      	JMP	SV_RTFUNC(P3)
 5305/ED42 :                            
 5306/ED42 :                            ; Store pointer P1 on STACK.
 5307/ED42 : 31                         STRPNT:	XPAL	P1
 5308/ED43 : CA F1                      	ST	-15(P2)
 5309/ED45 : 31                         	XPAL	P1
 5310/ED46 : 35                         	XPAH	P1
 5311/ED47 : CA F0                      	ST	-16(P2)
 5312/ED49 : 35                         	XPAH	P1
 5313/ED4A : 93 D6                      	JMP	SV_SPLOAD(P3)
 5314/ED4C :                            
 5315/ED4C :                            ; Compare string variable with quoted string.
 5316/ED4C : BA FD                      CMPRST:	DLD	AEXOFF(P2)		; adjust AEXSTK.L by two down
 5317/ED4E : BA FD                      	DLD	AEXOFF(P2)
 5318/ED50 : 32                         	XPAL	P2			; P2 holds arithmetics stack
 5319/ED51 : C2 03                      	LD	3(P2)
 5320/ED53 : 33                         	XPAL	P3
 5321/ED54 : C2 02                      	LD	2(P2)
 5322/ED56 : 37                         	XPAH	P3
 5323/ED57 : 01                         	XAE
 5324/ED58 : C5 01                      CMPR1:	LD	@1(P1)			; get byte from program and increase
 5325/ED5A : E4 22                      	XRI	'"'			; is it <quote> ?
 5326/ED5C : 98 14                      	JZ	CMPR4
 5327/ED5E : E4 22                      	XRI	'"'			; undo XOR, restore char
 5328/ED60 : E7 01                      	XOR	@1(P3)
 5329/ED62 : 98 F4                      	JZ	CMPR1
 5330/ED64 : C5 01                      CMPR2:	LD	@1(P1)			; get byte from program and increase
 5331/ED66 : E4 22                      	XRI	'"'			; is it <quote> ?
 5332/ED68 : 9C FA                      	JNZ	CMPR2
 5333/ED6A : C4 00                      CMPR3:	LDI	0
 5334/ED6C : CA 00                      	ST	(P2)
 5335/ED6E : CA 01                      	ST	1(P2)
 5336/ED70 : 90 4A                      	JMP	CMPEND
 5337/ED72 : C3 00                      CMPR4:	LD	(P3)			; load char from src
 5338/ED74 : E4 0D                      	XRI	_CR			; is it <cr> ?
 5339/ED76 : 9C F2                      	JNZ	CMPR3			; no, continue
 5340/ED78 : C4 80                      	LDI	0x80			; yes
 5341/ED7A : CA 00                      	ST	(P2)
 5342/ED7C : 1C                         	SR
 5343/ED7D : CA 01                      	ST	1(P2)
 5344/ED7F : 90 3B                      	JMP	CMPEND			; go and finish comparing
 5345/ED81 :                            
 5346/ED81 :                            ; Compare string variable with another one.
 5347/ED81 : C2 FD                      CMPSTR:	LD	AEXOFF(P2)
 5348/ED83 : 32                         	XPAL	P2
 5349/ED84 : C2 03                      	LD	3(P2)
 5350/ED86 : 33                         	XPAL	P3
 5351/ED87 : C2 02                      	LD	2(P2)
 5352/ED89 : 37                         	XPAH	P3
 5353/ED8A : 01                         	XAE
 5354/ED8B : C2 01                      	LD	1(P2)
 5355/ED8D : 31                         	XPAL	P1
 5356/ED8E : CA 03                      	ST	3(P2)
 5357/ED90 : C2 00                      	LD	(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 206 - 2024年05月30日 19時01分01秒


 5358/ED92 : 35                         	XPAH	P1
 5359/ED93 : CA 02                      	ST	2(P2)
 5360/ED95 : C5 01                      CMP1:	LD	@1(P1)			; get byte from program and increase
 5361/ED97 : E4 0D                      	XRI	_CR			; is it <cr> ?
 5362/ED99 : 98 0E                      	JZ	CMP3
 5363/ED9B : E4 0D                      	XRI	_CR			; undo XOR, restore char
 5364/ED9D : E7 01                      	XOR	@1(P3)
 5365/ED9F : 98 F4                      	JZ	CMP1
 5366/EDA1 : C4 00                      CMP2:	LDI	0
 5367/EDA3 : CA 00                      	ST	(P2)
 5368/EDA5 : CA 01                      	ST	1(P2)
 5369/EDA7 : 90 0D                      	JMP	CMP4
 5370/EDA9 : C3 00                      CMP3:	LD	(P3)			; load char from src
 5371/EDAB : E4 0D                      	XRI	_CR			; is it <cr> ?
 5372/EDAD : 9C F2                      	JNZ	CMP2			; no, continue
 5373/EDAF : C4 80                      	LDI	0x80			; yes
 5374/EDB1 : CA 00                      	ST	(P2)
 5375/EDB3 : 1C                         	SR
 5376/EDB4 : CA 01                      	ST	1(P2)
 5377/EDB6 : C2 03                      CMP4:	LD	3(P2)			; restore P1
 5378/EDB8 : 31                         	XPAL	P1
 5379/EDB9 : C2 02                      	LD	2(P2)
 5380/EDBB : 35                         	XPAH	P1
 5381/EDBC :                            ; Finish compare, restore P2 and P3.
 5382/EDBC : C4 00                      CMPEND:	LDI	0
 5383/EDBE : CA 02                      	ST	2(P2)
 5384/EDC0 : CA 03                      	ST	3(P2)
 5385/EDC2 : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 5386/EDC4 : 33                         	XPAL	P3
 5387/EDC5 : 40                         	LDE
 5388/EDC6 : 37                         	XPAH	P3
 5389/EDC7 : C4 80                      	LDI	STKMID			; restore stack
 5390/EDC9 : 32                         	XPAL	P2
 5391/EDCA : 93 5B                      	JMP	SV_RTFUNC(P3)
 5392/EDCC :                            
 5393/EDCC :                            ; Implement POKE command.
 5394/EDCC : C2 FD                      PUTBYT:	LD	AEXOFF(P2)
 5395/EDCE : 32                         	XPAL	P2
 5396/EDCF : C6 04                      	LD	@4(P2)			; adjust AEXSTK top by four up
 5397/EDD1 : C2 FF                      	LD	-1(P2)
 5398/EDD3 : 33                         	XPAL	P3
 5399/EDD4 : C2 FE                      	LD	-2(P2)
 5400/EDD6 : 37                         	XPAH	P3
 5401/EDD7 : 01                         	XAE
 5402/EDD8 : C2 FD                      	LD	AEXOFF(P2)
 5403/EDDA : CB 00                      	ST	(P3)
 5404/EDDC : C4 80                      	LDI	STKMID			; restore stack
 5405/EDDE : 32                         	XPAL	P2
 5406/EDDF : CA FD                      	ST	AEXOFF(P2)		; save actual offset
 5407/EDE1 : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 5408/EDE3 : 33                         	XPAL	P3
 5409/EDE4 : 40                         	LDE
 5410/EDE5 : 37                         	XPAH	P3
 5411/EDE6 : 93 D6                      	JMP	SV_SPLOAD(P3)
 5412/EDE8 :                            
 5413/EDE8 :                            ; Implement PEEK command.
 5414/EDE8 : C2 FD                      GETBYT:	LD	AEXOFF(P2)
 5415/EDEA : 32                         	XPAL	P2
 5416/EDEB : C2 01                      	LD	1(P2)
 5417/EDED : 33                         	XPAL	P3
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 207 - 2024年05月30日 19時01分01秒


 5418/EDEE : C2 00                      	LD	(P2)
 5419/EDF0 : 37                         	XPAH	P3
 5420/EDF1 : 01                         	XAE
 5421/EDF2 : C3 00                      	LD	(P3)
 5422/EDF4 : CA 01                      	ST	1(P2)
 5423/EDF6 : C4 00                      	LDI	0
 5424/EDF8 : CA 00                      	ST	(P2)
 5425/EDFA : C4 80                      STRNG:	LDI	STKMID			; restore stack
 5426/EDFC : 32                         	XPAL	P2
 5427/EDFD : C4 80                      	LDI	L(SPRVSR)		; restore P3 to Supervisor
 5428/EDFF : 33                         	XPAL	P3
 5429/EE00 : 40                         	LDE
 5430/EE01 : 37                         	XPAH	P3
 5431/EE02 : 93 5B                      	JMP	SV_RTFUNC(P3)
 5432/EE04 :                            
 5433/EE04 :                            ; Take the first char of a quoted string and output its numeric value.
 5434/EE04 : C2 FD                      ASC:	LD	AEXOFF(P2)
 5435/EE06 : 32                         	XPAL	P2
 5436/EE07 : C4 00                      	LDI	0
 5437/EE09 : CE FF                      	ST	@-1(P2)
 5438/EE0B : CE FF                      	ST	@-1(P2)
 5439/EE0D : C5 01                      	LD	@1(P1)			; get byte from program and increase
 5440/EE0F : E4 22                      	XRI	'"'			; is it <quote> ?
 5441/EE11 : 98 59                      	JZ	LEN3			; yes, done
 5442/EE13 : E4 22                      	XRI	'"'			; undo XOR, restore char
 5443/EE15 : CA 01                      	ST	1(P2)
 5444/EE17 : C5 01                      ASC1:	LD	@1(P1)			; get byte from program and increase
 5445/EE19 : E4 22                      	XRI	'"'			; is it <quote> ?
 5446/EE1B : 9C FA                      	JNZ	ASC1			; no, keep scanning
 5447/EE1D : 90 4D                      	JMP	LEN3			; done
 5448/EE1F :                            
 5449/EE1F :                            ; Take the first char of a string variable and output its numeric value.
 5450/EE1F : C2 FD                      ASTRNG:	LD	AEXOFF(P2)
 5451/EE21 : 32                         	XPAL	P2
 5452/EE22 : C2 01                      	LD	1(P2)
 5453/EE24 : 33                         	XPAL	P3
 5454/EE25 : C2 00                      	LD	(P2)
 5455/EE27 : 37                         	XPAH	P3
 5456/EE28 : 01                         	XAE
 5457/EE29 : C4 00                      	LDI	0
 5458/EE2B : CA 00                      	ST	(P2)
 5459/EE2D : C7 01                      	LD	@1(P3)
 5460/EE2F : E4 0D                      	XRI	_CR			; is it <cr> ?
 5461/EE31 : 98 02                      	JZ	ASTR1			; yes
 5462/EE33 : E4 0D                      	XRI	_CR			; undo XOR, restore char
 5463/EE35 : CA 01                      ASTR1:	ST	1(P2)
 5464/EE37 : 90 C1                      	JMP	STRNG
 5465/EE39 :                            
 5466/EE39 :                            ; Store length of a string variable on stack.
 5467/EE39 : C2 FD                      LSTRNG:	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
 5468/EE3B : 32                         	XPAL	P2
 5469/EE3C : C2 01                      	LD	1(P2)
 5470/EE3E : 33                         	XPAL	P3
 5471/EE3F : C2 00                      	LD	(P2)
 5472/EE41 : 37                         	XPAH	P3
 5473/EE42 : 01                         	XAE
 5474/EE43 : C4 FF                      	LDI	0xFF
 5475/EE45 : CA 01                      	ST	1(P2)
 5476/EE47 : CA 00                      	ST	(P2)
 5477/EE49 : AA 01                      LSTR1:	ILD	1(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 208 - 2024年05月30日 19時01分01秒


 5478/EE4B : 9C 02                      	JNZ	LSTR2
 5479/EE4D : AA 00                      	ILD	(P2)
 5480/EE4F : C7 01                      LSTR2:	LD	@1(P3)
 5481/EE51 : E4 0D                      	XRI	_CR			; is it <cr> ?
 5482/EE53 : 9C F4                      	JNZ	LSTR1			; no, continue scanning
 5483/EE55 : 90 A3                      	JMP	STRNG			; yes, done
 5484/EE57 :                            
 5485/EE57 :                            ; Store length of a quoted string on stack.
 5486/EE57 : C2 FD                      LEN:	LD	AEXOFF(P2)		; load actual offset of AEXSTK.L
 5487/EE59 : 32                         	XPAL	P2
 5488/EE5A : C4 FF                      	LDI	-1
 5489/EE5C : CE FF                      	ST	@-1(P2)
 5490/EE5E : CE FF                      	ST	@-1(P2)			; reserve two bytes on stack
 5491/EE60 : AA 01                      LEN1:	ILD	1(P2)
 5492/EE62 : 9C 02                      	JNZ	LEN2
 5493/EE64 : AA 00                      	ILD	(P2)
 5494/EE66 : C5 01                      LEN2:	LD	@1(P1)			; get byte from program
 5495/EE68 : E4 22                      	XRI	'"'			; is it <quote> ?
 5496/EE6A : 9C F4                      	JNZ	LEN1			; no, continue counting
 5497/EE6C : C4 80                      LEN3:	LDI	STKMID			; yes, reset P2 stack
 5498/EE6E : 32                         	XPAL	P2
 5499/EE6F : CA FD                      	ST	AEXOFF(P2)		; save last AEXSTK.L
 5500/EE71 : C5 01                      LEN4:	LD	@1(P1)			; get byte from program
 5501/EE73 : E4 20                      	XRI	' '			; is it <space> ?
 5502/EE75 : 98 FA                      	JZ	LEN4			; yes, just eat it
 5503/EE77 : E4 09                      	XRI	' ' ! ')'		; we XOR'ed above, is it ')' ?
 5504/EE79 : 9B 5B                      	JZ	SV_RTFUNC(P3)
 5505/EE7B : C4 AC                      	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
 5506/EE7D : 93 B4                      	JMP	SV_MSGOUT(P3)
 5507/EE7F :                            
 5508/EE7F :                            ; After found variable check for existence of $ and closing parenthesis.
 5509/EE7F :                            ; NOTE: Needed at end of string functions.
 5510/EE7F : 98 04                      CKDLLR:	JZ	CKDLL1
 5511/EE81 : C4 F0                      	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
 5512/EE83 : 93 B4                      	JMP	SV_MSGOUT(P3)
 5513/EE85 : C5 01                      CKDLL1:	LD	@1(P1)			; get byte from program
 5514/EE87 : E4 24                      	XRI	'$'			; is it $ ?
 5515/EE89 : 98 04                      	JZ	CKDLL2
 5516/EE8B : C4 D7                      	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
 5517/EE8D : 93 B4                      	JMP	SV_MSGOUT(P3)
 5518/EE8F : C5 01                      CKDLL2:	LD	@1(P1)			; get byte from program
 5519/EE91 : E4 20                      	XRI	' '			; is it <space> ?
 5520/EE93 : 98 FA                      	JZ	CKDLL2			; yes, just eat it
 5521/EE95 : E4 09                      	XRI	' ' ! ')'		; we XOR'ed above, is it ')' ?
 5522/EE97 : 9B D6                      	JZ	SV_SPLOAD(P3)
 5523/EE99 : C4 AC                      	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
 5524/EE9B : 93 B4                      	JMP	SV_MSGOUT(P3)
 5525/EE9D :                            
 5526/EE9D :                            ; Implement CHR$ function.
 5527/EE9D : C2 EF                      PRCHAR:	LD	-17(P2)			; load value to be printed
 5528/EE9F : =>DEFINED                  	IFDEF	SCALLS
 5529/EE9F : (MACRO)                    	 SYSCALL	2
 5529/EE9F : 3F                                  XPPC   P3
 5529/EEA0 : 02                                  DB     2
 5530/EEA1 : =>FALSE                    	ELSE
 5531/EEA1 :                            	 CALL	PUTASC
 5532/EEA1 : [5528]                     	ENDIF
 5533/EEA1 : 93 5B                      	JMP	SV_RTFUNC(P3)		; .. and return
 5534/EEA3 :                            
 5535/EEA3 :                            ; Determine first free byte after BASIC program storage on actual page.
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 209 - 2024年05月30日 19時01分01秒


 5536/EEA3 :                            ; Put absolute address on STACK, return actual STACK.L value.
 5537/EEA3 : C2 F6                      TOP:	LD	CURPG(P2)		; convert page# into high address byte 
 5538/EEA5 : 1E                         	RR				; rotate right AC (multiply by 16)
 5539/EEA6 : 1E                         	RR
 5540/EEA7 : 1E                         	RR
 5541/EEA8 : 1E                         	RR
 5542/EEA9 : 33                         	XPAL	P3			; store temporarely in P3.L
 5543/EEAA : C4 02                      	LDI	2			; position of first program byte
 5544/EEAC : 33                         	XPAL	P3			; use pointer P3
 5545/EEAD : 37                         	XPAH	P3			; P3 holds pointer to program storage
 5546/EEAE : C3 00                      TOP1:	LD	(P3)			; get current program byte
 5547/EEB0 : E4 FF                      	XRI	0xFF			; is it first byte of end termination ?
 5548/EEB2 : 9C 06                      	JNZ	TOP2			; no, go ahead
 5549/EEB4 : C3 01                      	LD	1(P3)
 5550/EEB6 : E4 FF                      	XRI	0xFF			; do we have second byte ?
 5551/EEB8 : 98 07                      	JZ	TOP3			; yes, we are finished
 5552/EEBA : C3 02                      TOP2:	LD	2(P3)			; get byte, advance pointer by two
 5553/EEBC : 01                         	XAE				; E holds length of line
> > > NIBLFP.asm(5554):6: warning: numeric value -128 means usage of E register's content (use literal 'E' to avoid this warning)
 5554/EEBD : C7 80                      	LD	@EREG(P3)		; advance to next program line
 5555/EEBF : 90 ED                      	JMP	TOP1			; loop again
 5556/EEC1 : C7 02                      TOP3:	LD	@2(P3)			; advance to first free byte
 5557/EEC3 : C2 9C                      	LD	-100(P2)		; load SPRVSR.H
 5558/EEC5 : 37                         	XPAH	P3
 5559/EEC6 : 01                         	XAE				; TOP.H into E
 5560/EEC7 : C2 FD                      	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
 5561/EEC9 : 32                         	XPAL	P2			; P2 holds arithmetics stack
 5562/EECA : 33                         	XPAL	P3
 5563/EECB : CE FF                      	ST	@-1(P2)			; put TOP.L on stack
 5564/EECD : 40                         	LDE
 5565/EECE : CE FF                      	ST	@-1(P2)			; put TOP.H on stack
 5566/EED0 : C4 80                      	LDI	STKMID			; reset P2 stack
 5567/EED2 : 32                         	XPAL	P2
 5568/EED3 : CA FD                      	ST	AEXOFF(P2)		; save actual AEXSTK.L
 5569/EED5 : (MACRO)                    	RTRN
 5569/EED5 : 3F                                  XPPC   P3
 5569/EED6 : 00                                  DB     0
 5570/EED7 :                            
 5571/EED7 :                            ; Calculate amount of free space above BASIC program in page.
 5572/EED7 : C2 FD                      FREE:	LD	AEXOFF(P2)		; load actual offset to AEXSTK.L
 5573/EED9 : 32                         	XPAL	P2			; P2 holds arithmetics stack
 5574/EEDA : 03                         	SCL
 5575/EEDB : C4 00                      	LDI	0
 5576/EEDD : FA 01                      	CAD	1(P2)			; subtract TOP.L
 5577/EEDF : CA 01                      	ST	1(P2)			; store as FREE.L
 5578/EEE1 : C2 00                      	LD	(P2)			; load TOP.H
 5579/EEE3 : D4 F0                      	ANI	0xF0			; isolate PAGE, shifted by 16
 5580/EEE5 : E4 70                      	XRI	H(RAMBASE)		; compare with RAMBASE.H
 5581/EEE7 : 9C 04                      	JNZ	FREE1			; go, normal page
 5582/EEE9 : C4 0C                      	LDI	H(STKTOP)		; no, must subtract STACK space
 5583/EEEB : 90 02                      	JMP	FREE2
 5584/EEED : C4 00                      FREE1:	LDI	0
 5585/EEEF : FA 00                      FREE2:	CAD	(P2)			; subtract TOP.H
 5586/EEF1 : D4 0F                      	ANI	0x0F			; only last 4 bits are relevant
 5587/EEF3 : CA 00                      	ST	(P2)			; store as FREE.H
 5588/EEF5 : C4 80                      	LDI	STKMID
 5589/EEF7 : 32                         	XPAL	P2
 5590/EEF8 : 93 5B                      	JMP	SV_RTFUNC(P3)
 5591/EEFA :                            
 5592/EEFA :                            ; Read hexadecimal number and store on arithmetics stack.
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 210 - 2024年05月30日 19時01分01秒


 5593/EEFA :                            ; NOTE: Numbers greater than #7FFF are negative (#8000 is -32768.)
 5594/EEFA : BA FD                      HEX:	DLD	AEXOFF(P2)		; adjust STACK top by two down
 5595/EEFC : BA FD                      	DLD	AEXOFF(P2)
 5596/EEFE : 32                         	XPAL	P2			; P2 holds arithmetics stack
 5597/EEFF : C4 00                      	LDI	0			; clear the two reserved bytes
 5598/EF01 : CA 01                      	ST	1(P2)
 5599/EF03 : CA 00                      	ST	(P2)
 5600/EF05 : CA FF                      	ST	-1(P2)
 5601/EF07 : 01                         HEX1:	XAE
 5602/EF08 : C1 00                      	LD	(P1)
 5603/EF0A : 03                         	SCL
 5604/EF0B : FC 3A                      	CAI	'9'+1
 5605/EF0D : 94 06                      	JP	HEX2			; no digit
 5606/EF0F : F4 0A                      	ADI	10			; '9'-'0'+1
 5607/EF11 : 94 1D                      	JP	HEX6
 5608/EF13 : 90 08                      	JMP	HEX3
 5609/EF15 : FC 0D                      HEX2:	CAI	_CR
 5610/EF17 : 94 04                      	JP	HEX3
 5611/EF19 : F4 06                      	ADI	6
 5612/EF1B : 94 11                      	JP	HEX5
 5613/EF1D : C4 80                      HEX3:	LDI	STKMID			; reset P2 stack
 5614/EF1F : 32                         	XPAL	P2
 5615/EF20 : 40                         	LDE
 5616/EF21 : 9C 04                      	JNZ	HEX4
 5617/EF23 : C4 B7                      	LDI	(M_HEX-M_BASE)		; 'HEX ERROR', not a valid hexadecimal
 5618/EF25 : 93 B4                      	JMP	SV_MSGOUT(P3)
 5619/EF27 : 03                         HEX4:	SCL
 5620/EF28 : FC 05                      	CAI	5
 5621/EF2A : 97 6B                      	JP	SV_VALERR(P3)		; jump to 'VALUE ERROR'
 5622/EF2C : 93 5B                      	JMP	SV_RTFUNC(P3)
 5623/EF2E : F4 09                      HEX5:	ADI	9
 5624/EF30 : 01                         HEX6:	XAE
 5625/EF31 : C4 04                      	LDI	4			; shift four times left
 5626/EF33 : CA FE                      	ST	-2(P2)			; store as temporary counter
 5627/EF35 : 02                         HEX7:	CCL
 5628/EF36 : C2 01                      	LD	1(P2)
 5629/EF38 : F2 01                      	ADD	1(P2)
 5630/EF3A : CA 01                      	ST	1(P2)
 5631/EF3C : C2 00                      	LD	(P2)
 5632/EF3E : F2 00                      	ADD	(P2)
 5633/EF40 : CA 00                      	ST	(P2)
 5634/EF42 : BA FE                      	DLD	-2(P2)
 5635/EF44 : 9C EF                      	JNZ	HEX7
 5636/EF46 : C2 01                      	LD	1(P2)			; multiplication by 16 done
 5637/EF48 : 58                         	ORE
 5638/EF49 : CA 01                      	ST	1(P2)			; OR in new digit
 5639/EF4B : C5 01                      	LD	@1(P1)			; get byte from program and increase
 5640/EF4D : AA FF                      	ILD	-1(P2)
 5641/EF4F : 90 B6                      	JMP	HEX1
 5642/EF51 :                            
 5643/EF51 : =>DEFINED                  	IFDEF	SCALLS
 5644/EF51 :                            ; Print version string via external tty.
 5645/EF51 : C4 03                      VERS:	LDI	L(VERMSG)		; point P1 to string
 5646/EF53 : 31                         	XPAL	P1
 5647/EF54 : CA F1                      	ST	-15(P2)			; save prev P1.L
 5648/EF56 : C4 D0                      	LDI	H(VERMSG)
 5649/EF58 : 35                         	XPAH	P1
 5650/EF59 : CA F0                      	ST	-16(P2)			; save prev P1.H
 5651/EF5B : C5 01                      	LD	@1(P1)			; get first byte from string and increase
 5652/EF5D : (MACRO)                    	SYSCALL	2
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 211 - 2024年05月30日 19時01分01秒


 5652/EF5D : 3F                                  XPPC   P3
 5652/EF5E : 02                                  DB     2
 5653/EF5F : C1 00                      VER1:	LD	(P1)			; get byte from string
 5654/EF61 : E4 0D                      	XRI	_CR			; is it terminating <cr> ?
 5655/EF63 : 9B 30                      	JZ	SV_LINE(P3)		; return and print a newline
 5656/EF65 : C5 01                      	LD	@1(P1)			; get byte again and increase
 5657/EF67 : (MACRO)                    	SYSCALL	2
 5657/EF67 : 3F                                  XPPC   P3
 5657/EF68 : 02                                  DB     2
 5658/EF69 : 90 F4                      	JMP	VER1
 5659/EF6B : =>FALSE                    	ELSE
 5660/EF6B :                            ; Print version string via internal tty.
 5661/EF6B :                            VERS:	LDI	L(VERMSG)		; point P1 to string
 5662/EF6B :                            	XPAL	P1
 5663/EF6B :                            	ST	-15(P2)			; save prev P1.L
 5664/EF6B :                            	LDI	H(VERMSG)
 5665/EF6B :                            	XPAH	P1
 5666/EF6B :                            	ST	-16(P2)			; save prev P1.H
 5667/EF6B :                            	LD	@1(P1)			; get first byte from string and increase
 5668/EF6B :                            	CALL	PUTASC
 5669/EF6B :                            VER1:	LD	(P1)			; get byte from string
 5670/EF6B :                            	XRI	_CR			; is it terminating <cr> ?
 5671/EF6B :                            	JZ	SV_LINE(P3)		; return and print a newline
 5672/EF6B :                            	LD	@1(P1)			; get byte again and increase
 5673/EF6B :                            	CALL	PUTASC
 5674/EF6B :                            	JMP	VER1
 5675/EF6B : [5643]                     	ENDIF
 5676/EF6B :                            
 5677/EF6B :                            ;************************************
 5678/EF6B :                            ;*  PAGE BREAK - THIRD BLOCK OF 4K  *
 5679/EF6B :                            ;************************************
 5680/EF6B :                            ;
 5681/F000 :                            	ORG	BASE+0x2000
 5682/F000 : 08                         	NOP				; needed so Supervisor can do -1 here
 5683/F001 :                            
 5684/F001 :                            ; NEW command (store new page number.)
 5685/F001 : C2 EF                      NUPAGE:	LD	-17(P2)
 5686/F003 : D4 07                      	ANI	7			; allow pages 0..7
 5687/F005 : 9C 02                      	JNZ	NUPGE2
 5688/F007 : C4 01                      NUPGE1:	LDI	1			; reset page# to 1
 5689/F009 : CA F6                      NUPGE2:	ST	CURPG(P2)
 5690/F00B : 93 D6                      	JMP	SV_SPLOAD(P3)
 5691/F00D :                            
 5692/F00D :                            ; Mark current page as empty.
 5693/F00D : C4 02                      NEWPGM:	LDI	2			; set P1 to new page, offset 2
 5694/F00F : 31                         	XPAL	P1
 5695/F010 : C2 F6                      	LD	CURPG(P2)
 5696/F012 : 1E                         	RR
 5697/F013 : 1E                         	RR
 5698/F014 : 1E                         	RR
 5699/F015 : 1E                         	RR
 5700/F016 : 35                         	XPAH	P1
 5701/F017 : C4 0D                      	LDI	_CR			; store a <cr>
 5702/F019 : C9 FF                      	ST	-1(P1)
 5703/F01B : C4 FF                      	LDI	-1			; store line number -1
 5704/F01D : C9 00                      	ST	(P1)
 5705/F01F : C9 01                      	ST	1(P1)
 5706/F021 : 93 D6                      	JMP	SV_SPLOAD(P3)
 5707/F023 :                            
 5708/F023 :                            ; CLEAR command (clear stacks and all variables.)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 212 - 2024年05月30日 19時01分01秒


 5709/F023 : 93 A0                      CLEAR:	JMP	SV_RESTRT(P3)
 5710/F025 :                            
 5711/F025 :                            ; Swap first and second number on STACK in P1.
 5712/F025 : C1 05                      ABSWP:	LD	5(P1)
 5713/F027 : E1 01                      	XOR	1(P1)
 5714/F029 : CA EA                      	ST	-22(P2)
 5715/F02B : (MACRO)                    	CALL	ABSWP1
 5715/F02B : 3F                                  XPPC   P3
 5715/F02C : F0                                  DB     H(ABSWP1)
 5715/F02D : 2E                                  DB     L(ABSWP1)
 5716/F02E : C1 01                      ABSWP1:	LD	1(P1)
 5717/F030 : 94 03                      	JP	SWAP			; positive, go ahead
 5718/F032 : (MACRO)                    	CALL	FNEG			; negate number
 5718/F032 : 3F                                  XPPC   P3
 5718/F033 : F1                                  DB     H(FNEG)
 5718/F034 : AC                                  DB     L(FNEG)
 5719/F035 : C4 04                      SWAP:	LDI	4			; counter for 4-byte swap
 5720/F037 : CA E9                      	ST	-23(P2)
 5721/F039 : C5 01                      SWAP1:	LD	@1(P1)			; load byte of first number from stack
 5722/F03B : C9 FB                      	ST	-5(P1)			; temporary store 4 bytes lower
 5723/F03D : C1 03                      	LD	3(P1)			; load byte of second number from stack
 5724/F03F : C9 FF                      	ST	-1(P1)			; store byte into first number on stack
 5725/F041 : C1 FB                      	LD	-5(P1)			; load temporary stored byte
 5726/F043 : C9 03                      	ST	3(P1)			; store byte into second number on stack
 5727/F045 : BA E9                      	DLD	-23(P2)			; decrease counter
 5728/F047 : 9C F0                      	JNZ	SWAP1			; do again
 5729/F049 : C5 FC                      	LD	@-4(P1)
 5730/F04B : (MACRO)                    	RTRN
 5730/F04B : 3F                                  XPPC   P3
 5730/F04C : 00                                  DB     0
 5731/F04D :                            
 5732/F04D :                            ; Two floats are on AEX STACK at -4(P1) and (P1), E holds difference of exponents.
 5733/F04D : C4 00                      MD:	LDI	0
 5734/F04F : C9 03                      	ST	3(P1)
 5735/F051 : C9 02                      	ST	2(P1)
 5736/F053 : C9 01                      	ST	1(P1)
 5737/F055 : C9 00                      	ST	(P1)			; set topmost float to zero
 5738/F057 : 06                         	CSA
 5739/F058 : 94 09                      	JP	MD1
 5740/F05A : C4 A0                      	LDI	0xA0			; load b'10100000' 10<<4 ?
 5741/F05C : 01                         	XAE
 5742/F05D : 94 09                      	JP	MD2
 5743/F05F : C4 C6                      	LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
 5744/F061 : 93 B4                      	JMP	SV_MSGOUT(P3)
 5745/F063 : C4 A0                      MD1:	LDI	0xA0			; load b'10100000' 10<<4 ?
 5746/F065 : 01                         	XAE
 5747/F066 : 94 0A                      	JP	MD3
 5748/F068 : E4 80                      MD2:	XRI	0x80
 5749/F06A : C9 00                      	ST	(P1)
 5750/F06C : C4 18                      	LDI	0x18
 5751/F06E : C9 F8                      	ST	-8(P1)
 5752/F070 : 93 38                      	JMP	SV_RTRN(P3)
 5753/F072 : AA E3                      MD3:	ILD	SUBOFF(P2)		; adjust SUBSTK.L by two bytes up
 5754/F074 : AA E3                      	ILD	SUBOFF(P2)
 5755/F076 : 93 38                      	JMP	SV_RTRN(P3)
 5756/F078 :                            
 5757/F078 : (MACRO)                    FDIV:	CALL	ABSWP
 5757/F078 : 3F                                  XPPC   P3
 5757/F079 : F0                                  DB     H(ABSWP)
 5757/F07A : 25                                  DB     L(ABSWP)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 213 - 2024年05月30日 19時01分01秒


 5758/F07B : 02                         FDIV0:	CCL
 5759/F07C : C1 04                      	LD	4(P1)
 5760/F07E : FD 04                      	CAD	@4(P1)
 5761/F080 : (MACRO)                    	CALL	MD
 5761/F080 : 3F                                  XPPC   P3
 5761/F081 : F0                                  DB     H(MD)
 5761/F082 : 4D                                  DB     L(MD)
 5762/F083 : 03                         FDIV1:	SCL
 5763/F084 : C1 FB                      	LD	-5(P1)
 5764/F086 : F9 FF                      	CAD	-1(P1)
 5765/F088 : C9 FB                      	ST	-5(P1)
 5766/F08A : C1 FA                      	LD	-6(P1)
 5767/F08C : F9 FE                      	CAD	-2(P1)
 5768/F08E : C9 FA                      	ST	-6(P1)
 5769/F090 : C1 F9                      	LD	-7(P1)
 5770/F092 : F9 FD                      	CAD	-3(P1)
 5771/F094 : C9 F9                      	ST	-7(P1)
 5772/F096 : 94 15                      	JP	FDIV2
 5773/F098 : 02                         	CCL
 5774/F099 : C1 FB                      	LD	-5(P1)
 5775/F09B : F1 FF                      	ADD	-1(P1)
 5776/F09D : C9 FB                      	ST	-5(P1)
 5777/F09F : C1 FA                      	LD	-6(P1)
 5778/F0A1 : F1 FE                      	ADD	-2(P1)
 5779/F0A3 : C9 FA                      	ST	-6(P1)
 5780/F0A5 : C1 F9                      	LD	-7(P1)
 5781/F0A7 : F1 FD                      	ADD	-3(P1)
 5782/F0A9 : C9 F9                      	ST	-7(P1)
 5783/F0AB : 90 02                      	JMP	FDIV3
 5784/F0AD : A9 03                      FDIV2:	ILD	3(P1)
 5785/F0AF : B9 F8                      FDIV3:	DLD	-8(P1)
 5786/F0B1 : 98 78                      	JZ	MDEND
 5787/F0B3 : 02                         	CCL
 5788/F0B4 : 40                         	LDE
 5789/F0B5 : 70                         	ADE
 5790/F0B6 : 01                         	XAE
 5791/F0B7 : C1 FB                      	LD	-5(P1)
 5792/F0B9 : F1 FB                      	ADD	-5(P1)
 5793/F0BB : C9 FB                      	ST	-5(P1)
 5794/F0BD : C1 FA                      	LD	-6(P1)
 5795/F0BF : F1 FA                      	ADD	-6(P1)
 5796/F0C1 : C9 FA                      	ST	-6(P1)
 5797/F0C3 : C1 F9                      	LD	-7(P1)
 5798/F0C5 : 94 04                      	JP	FDIV4
 5799/F0C7 : C4 A7                      	LDI	(M_DIV0-M_BASE)		; 'DIVISION BY 0 ERROR'
 5800/F0C9 : 93 B4                      	JMP	SV_MSGOUT(P3)
 5801/F0CB : F1 F9                      FDIV4:	ADD	-7(P1)
 5802/F0CD : C9 F9                      	ST	-7(P1)
 5803/F0CF : C1 03                      	LD	3(P1)
 5804/F0D1 : F1 03                      	ADD	3(P1)
 5805/F0D3 : C9 03                      	ST	3(P1)
 5806/F0D5 : C1 02                      	LD	2(P1)
 5807/F0D7 : F1 02                      	ADD	2(P1)
 5808/F0D9 : C9 02                      	ST	2(P1)
 5809/F0DB : C1 01                      	LD	1(P1)
 5810/F0DD : F1 01                      	ADD	1(P1)
 5811/F0DF : C9 01                      	ST	1(P1)
 5812/F0E1 : 90 A0                      	JMP	FDIV1
 5813/F0E3 :                            
 5814/F0E3 : (MACRO)                    FMUL:	CALL	ABSWP
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 214 - 2024年05月30日 19時01分01秒


 5814/F0E3 : 3F                                  XPPC   P3
 5814/F0E4 : F0                                  DB     H(ABSWP)
 5814/F0E5 : 25                                  DB     L(ABSWP)
 5815/F0E6 : 02                         	CCL
 5816/F0E7 : C1 04                      	LD	4(P1)
 5817/F0E9 : F5 04                      	ADD	@4(P1)
 5818/F0EB : (MACRO)                    	CALL	MD
 5818/F0EB : 3F                                  XPPC   P3
 5818/F0EC : F0                                  DB     H(MD)
 5818/F0ED : 4D                                  DB     L(MD)
 5819/F0EE : 02                         FMUL1:	CCL
 5820/F0EF : C1 F9                      	LD	-7(P1)
 5821/F0F1 : 1F                         	RRL
 5822/F0F2 : C9 F9                      	ST	-7(P1)
 5823/F0F4 : C1 FA                      	LD	-6(P1)
 5824/F0F6 : 1F                         	RRL
 5825/F0F7 : C9 FA                      	ST	-6(P1)
 5826/F0F9 : C1 FB                      	LD	-5(P1)
 5827/F0FB : 1F                         	RRL
 5828/F0FC : C9 FB                      	ST	-5(P1)
 5829/F0FE : 06                         	CSA
 5830/F0FF : 94 12                      	JP	FMUL2
 5831/F101 : C1 03                      	LD	3(P1)
 5832/F103 : F1 FF                      	ADD	-1(P1)
 5833/F105 : C9 03                      	ST	3(P1)
 5834/F107 : C1 02                      	LD	2(P1)
 5835/F109 : F1 FE                      	ADD	-2(P1)
 5836/F10B : C9 02                      	ST	2(P1)
 5837/F10D : C1 01                      	LD	1(P1)
 5838/F10F : F1 FD                      	ADD	-3(P1)
 5839/F111 : C9 01                      	ST	1(P1)
 5840/F113 : B9 F8                      FMUL2:	DLD	-8(P1)
 5841/F115 : E4 01                      	XRI	1
 5842/F117 : 98 12                      	JZ	MDEND
 5843/F119 : 02                         	CCL
 5844/F11A : C1 01                      	LD	1(P1)
 5845/F11C : 1F                         	RRL
 5846/F11D : C9 01                      	ST	1(P1)
 5847/F11F : C1 02                      	LD	2(P1)
 5848/F121 : 1F                         	RRL
 5849/F122 : C9 02                      	ST	2(P1)
 5850/F124 : C1 03                      	LD	3(P1)
 5851/F126 : 1F                         	RRL
 5852/F127 : C9 03                      	ST	3(P1)
 5853/F129 : 90 C3                      	JMP	FMUL1
 5854/F12B : 02                         MDEND:	CCL
 5855/F12C : C1 01                      	LD	1(P1)
 5856/F12E : 94 03                      	JP	MDSGN
 5857/F130 : (MACRO)                    	CALL	ALGN2
 5857/F130 : 3F                                  XPPC   P3
 5857/F131 : F1                                  DB     H(ALGN2)
 5857/F132 : E9                                  DB     L(ALGN2)
 5858/F133 : C2 EA                      MDSGN:	LD	-22(P2)
 5859/F135 : 97 38                      	JP	SV_RTRN(P3)
 5860/F137 : 90 73                      	JMP	FNEG
 5861/F139 :                            
 5862/F139 :                            ; Subtract the two topmost floating point numbers on arithmetics stack.
 5863/F139 : (MACRO)                    FSUB:	CALL	FNEG			; negate and add
 5863/F139 : 3F                                  XPPC   P3
 5863/F13A : F1                                  DB     H(FNEG)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 215 - 2024年05月30日 19時01分01秒


 5863/F13B : AC                                  DB     L(FNEG)
 5864/F13C :                            
 5865/F13C :                            ; Add the two topmost floating point numbers on arithmetics stack.
 5866/F13C : (MACRO)                    FADD:	CALL	ALGEXP			; align exponents for addition
 5866/F13C : 3F                                  XPPC   P3
 5866/F13D : F2                                  DB     H(ALGEXP)
 5866/F13E : 59                                  DB     L(ALGEXP)
 5867/F13F : 02                         	CCL
 5868/F140 : C1 07                      	LD	7(P1)
 5869/F142 : F1 03                      	ADD	3(P1)
 5870/F144 : C9 07                      	ST	7(P1)
 5871/F146 : C1 06                      	LD	6(P1)
 5872/F148 : F1 02                      	ADD	2(P1)
 5873/F14A : C9 06                      	ST	6(P1)
 5874/F14C : C1 05                      	LD	5(P1)
 5875/F14E : F1 01                      	ADD	1(P1)
 5876/F150 : C9 05                      	ST	5(P1)
 5877/F152 : C5 04                      	LD	@4(P1)
 5878/F154 : 90 69                      	JMP	ALGN1
 5879/F156 :                            
 5880/F156 :                            ; Logical Operations with the two topmost floats on arithmetics stack.
 5881/F156 : C1 07                      AND:	LD	7(P1)
 5882/F158 : D1 03                      	AND	3(P1)
 5883/F15A : C9 07                      	ST	7(P1)
 5884/F15C : C1 06                      	LD	6(P1)
 5885/F15E : D1 02                      	AND	2(P1)
 5886/F160 : C9 06                      	ST	6(P1)
 5887/F162 : C1 05                      	LD	5(P1)
 5888/F164 : D1 01                      	AND	1(P1)
 5889/F166 : C9 05                      	ST	5(P1)
 5890/F168 : C5 04                      	LD	@4(P1)
 5891/F16A : 90 58                      	JMP	NORM
 5892/F16C :                            
 5893/F16C : C1 07                      OR:	LD	7(P1)
 5894/F16E : D9 03                      	OR	3(P1)
 5895/F170 : C9 07                      	ST	7(P1)
 5896/F172 : C1 06                      	LD	6(P1)
 5897/F174 : D9 02                      	OR	2(P1)
 5898/F176 : C9 06                      	ST	6(P1)
 5899/F178 : C1 05                      	LD	5(P1)
 5900/F17A : D9 01                      	OR	1(P1)
 5901/F17C : C9 05                      	ST	5(P1)
 5902/F17E : C5 04                      	LD	@4(P1)
 5903/F180 : 90 42                      	JMP	NORM
 5904/F182 :                            
 5905/F182 : 60                         NOT:	XRE
 5906/F183 : CD FF                      	ST	@-1(P1)
 5907/F185 : CD FF                      	ST	@-1(P1)
 5908/F187 : C4 80                      	LDI	0x80
 5909/F189 : CD FF                      	ST	@-1(P1)
 5910/F18B : C4 7F                      	LDI	0x7F
 5911/F18D : CD FF                      	ST	@-1(P1)
 5912/F18F : (MACRO)                    	CALL	ALGEXP
 5912/F18F : 3F                                  XPPC   P3
 5912/F190 : F2                                  DB     H(ALGEXP)
 5912/F191 : 59                                  DB     L(ALGEXP)
 5913/F192 :                            
 5914/F192 : C1 07                      EXOR:	LD	7(P1)
 5915/F194 : E1 03                      	XOR	3(P1)
 5916/F196 : C9 07                      	ST	7(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 216 - 2024年05月30日 19時01分01秒


 5917/F198 : C1 06                      	LD	6(P1)
 5918/F19A : E1 02                      	XOR	2(P1)
 5919/F19C : C9 06                      	ST	6(P1)
 5920/F19E : C1 05                      	LD	5(P1)
 5921/F1A0 : E1 01                      	XOR	1(P1)
 5922/F1A2 : C9 05                      	ST	5(P1)
 5923/F1A4 : C5 04                      	LD	@4(P1)
 5924/F1A6 : 90 1C                      	JMP	NORM
 5925/F1A8 :                            
 5926/F1A8 :                            ; Return absolute value of topmost float on arithmetics stack.
 5927/F1A8 : C1 01                      FABS:	LD	1(P1)
 5928/F1AA : 97 38                      	JP	SV_RTRN(P3)		; positive, do nothing
 5929/F1AC :                            ; Negate topmost floating point number on arithmetics stack.
 5930/F1AC : 03                         FNEG:	SCL
 5931/F1AD : C4 00                      	LDI	0
 5932/F1AF : F9 03                      	CAD	3(P1)
 5933/F1B1 : C9 03                      	ST	3(P1)
 5934/F1B3 : C4 00                      	LDI	0
 5935/F1B5 : F9 02                      	CAD	2(P1)
 5936/F1B7 : C9 02                      	ST	2(P1)
 5937/F1B9 : C4 00                      	LDI	0
 5938/F1BB : F9 01                      	CAD	1(P1)
 5939/F1BD : C9 01                      	ST	1(P1)
 5940/F1BF : 06                         ALGN1:	CSA
 5941/F1C0 : D4 40                      	ANI	0x40
 5942/F1C2 : 9C 25                      	JNZ	ALGN2
 5943/F1C4 : C1 01                      NORM:	LD	1(P1)
 5944/F1C6 : F1 01                      	ADD	1(P1)
 5945/F1C8 : E1 01                      	XOR	1(P1)
 5946/F1CA : 94 02                      	JP	NORM1
 5947/F1CC : 93 38                      	JMP	SV_RTRN(P3)
 5948/F1CE : C1 00                      NORM1:	LD	(P1)
 5949/F1D0 : 9B 38                      	JZ	SV_RTRN(P3)
 5950/F1D2 : B9 00                      	DLD	(P1)
 5951/F1D4 : 02                         	CCL
 5952/F1D5 : C1 03                      	LD	3(P1)
 5953/F1D7 : F1 03                      	ADD	3(P1)
 5954/F1D9 : C9 03                      	ST	3(P1)
 5955/F1DB : C1 02                      	LD	2(P1)
 5956/F1DD : F1 02                      	ADD	2(P1)
 5957/F1DF : C9 02                      	ST	2(P1)
 5958/F1E1 : C1 01                      	LD	1(P1)
 5959/F1E3 : F1 01                      	ADD	1(P1)
 5960/F1E5 : C9 01                      	ST	1(P1)
 5961/F1E7 : 90 DB                      	JMP	NORM
 5962/F1E9 : A9 00                      ALGN2:	ILD	(P1)
 5963/F1EB : 9C 04                      	JNZ	ALGN3
 5964/F1ED : C4 C6                      	LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
 5965/F1EF : 93 B4                      	JMP	SV_MSGOUT(P3)
 5966/F1F1 : C1 01                      ALGN3:	LD	1(P1)
 5967/F1F3 : 1F                         	RRL
 5968/F1F4 : C9 01                      	ST	1(P1)
 5969/F1F6 : C1 02                      	LD	2(P1)
 5970/F1F8 : 1F                         	RRL
 5971/F1F9 : C9 02                      	ST	2(P1)
 5972/F1FB : C1 03                      	LD	3(P1)
 5973/F1FD : 1F                         	RRL
 5974/F1FE : C9 03                      	ST	3(P1)
 5975/F200 : 93 38                      	JMP	SV_RTRN(P3)
 5976/F202 :                            
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 217 - 2024年05月30日 19時01分01秒


 5977/F202 : 60                         INT:	XRE
 5978/F203 : 01                         INT1:	XAE
 5979/F204 : 03                         INT2:	SCL
 5980/F205 : C1 00                      	LD	(P1)
 5981/F207 : 94 06                      	JP	INT3
 5982/F209 : FC 96                      	CAI	0x96
 5983/F20B : 98 1C                      	JZ	INT4
 5984/F20D : 97 38                      	JP	SV_RTRN(P3)
 5985/F20F : C1 01                      INT3:	LD	1(P1)
 5986/F211 : F1 01                      	ADD	1(P1)
 5987/F213 : C1 01                      	LD	1(P1)
 5988/F215 : 1F                         	RRL
 5989/F216 : C9 01                      	ST	1(P1)
 5990/F218 : C1 02                      	LD	2(P1)
 5991/F21A : 1F                         	RRL
 5992/F21B : C9 02                      	ST	2(P1)
 5993/F21D : C1 03                      	LD	3(P1)
 5994/F21F : 1F                         	RRL
 5995/F220 : C9 03                      	ST	3(P1)
 5996/F222 : A9 00                      	ILD	(P1)
 5997/F224 : 06                         	CSA
 5998/F225 : 94 DD                      	JP	INT2
 5999/F227 : 90 DA                      	JMP	INT1
 6000/F229 : 01                         INT4:	XAE
 6001/F22A : D1 01                      	AND	1(P1)
 6002/F22C : 94 96                      	JP	NORM
 6003/F22E : 40                         	LDE
 6004/F22F : F1 03                      	ADD	3(P1)
 6005/F231 : C9 03                      	ST	3(P1)
 6006/F233 : 40                         	LDE
 6007/F234 : F1 02                      	ADD	2(P1)
 6008/F236 : C9 02                      	ST	2(P1)
 6009/F238 : 40                         	LDE
 6010/F239 : F1 01                      	ADD	1(P1)
 6011/F23B : C9 01                      	ST	1(P1)
 6012/F23D : 90 80                      	JMP	ALGN1
 6013/F23F :                            
 6014/F23F :                            ; Print vertical tabs (number in AC and determined by stack value.)
 6015/F23F : 94 0A                      VERT:	JP	VERT2
 6016/F241 : C4 0B                      VERT1:	LDI	_CTLK			; used as <vtab> for lines upwards
 6017/F243 : =>DEFINED                  	IFDEF	SCALLS
 6018/F243 : (MACRO)                    	 SYSCALL	2
 6018/F243 : 3F                                  XPPC   P3
 6018/F244 : 02                                  DB     2
 6019/F245 : =>FALSE                    	ELSE
 6020/F245 :                            	 CALL	PUTASC
 6021/F245 : [6017]                     	ENDIF
 6022/F245 : AA EF                      	ILD	-17(P2)
 6023/F247 : 9C F8                      	JNZ	VERT1
 6024/F249 : 93 5B                      	JMP	SV_RTFUNC(P3)
 6025/F24B : DA EF                      VERT2:	OR	-17(P2)
 6026/F24D : 9B 5B                      	JZ	SV_RTFUNC(P3)		; do nothing if zero
 6027/F24F : C4 0A                      VERT3:	LDI	_LF			; lines downwards
 6028/F251 : =>DEFINED                  	IFDEF	SCALLS
 6029/F251 : (MACRO)                    	 SYSCALL	2
 6029/F251 : 3F                                  XPPC   P3
 6029/F252 : 02                                  DB     2
 6030/F253 : =>FALSE                    	ELSE
 6031/F253 :                            	 CALL	PUTASC
 6032/F253 : [6028]                     	ENDIF
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 218 - 2024年05月30日 19時01分01秒


 6033/F253 : BA EF                      	DLD	-17(P2)
 6034/F255 : 9C F8                      	JNZ	VERT3
 6035/F257 : 93 5B                      	JMP	SV_RTFUNC(P3)
 6036/F259 :                            
 6037/F259 :                            ; Align exponents of two floating point numbers on arithmetics stack.
 6038/F259 :                            ; NOTE: Pointer P1 contains actual arithmetics stack.
 6039/F259 : 03                         ALGEXP:	SCL
 6040/F25A : C1 00                      	LD	(P1)			; compare the exponents of the floats
 6041/F25C : F9 04                      	CAD	4(P1)
 6042/F25E : 9B 38                      	JZ	SV_RTRN(P3)		; all done when equal
 6043/F260 : 06                         	CSA
 6044/F261 : 94 14                      	JP	ALG2
 6045/F263 : C4 04                      	LDI	4
 6046/F265 : CA E9                      	ST	-23(P2)			; store as temporary counter
 6047/F267 : C5 01                      ALG1:	LD	@1(P1)			; swap two floats on STACK
 6048/F269 : 01                         	XAE
 6049/F26A : C1 03                      	LD	3(P1)
 6050/F26C : C9 FF                      	ST	-1(P1)
 6051/F26E : 40                         	LDE
 6052/F26F : C9 03                      	ST	3(P1)
 6053/F271 : BA E9                      	DLD	-23(P2)
 6054/F273 : 9C F2                      	JNZ	ALG1			; handle four bytes
 6055/F275 : C5 FC                      	LD	@-4(P1)
 6056/F277 : A9 00                      ALG2:	ILD	(P1)			; increment exponent..
 6057/F279 : C1 01                      	LD	1(P1)			; ..and shift mantissa one bit right
 6058/F27B : F1 01                      	ADD	1(P1)
 6059/F27D : C1 01                      	LD	1(P1)
 6060/F27F : 1F                         	RRL
 6061/F280 : C9 01                      	ST	1(P1)
 6062/F282 : C1 02                      	LD	2(P1)
 6063/F284 : 1F                         	RRL
 6064/F285 : C9 02                      	ST	2(P1)
 6065/F287 : C1 03                      	LD	3(P1)
 6066/F289 : 1F                         	RRL
 6067/F28A : C9 03                      	ST	3(P1)
 6068/F28C : 90 CB                      	JMP	ALGEXP
 6069/F28E :                            
 6070/F28E :                            ; Load arithmetics stack into P1 and save previous content.
 6071/F28E : C2 FD                      STACK:	LD	AEXOFF(P2)
 6072/F290 : 31                         	XPAL	P1
 6073/F291 : CA F3                      	ST	-13(P2)
 6074/F293 : C3 A2                      	LD	STKPHI(P3)
 6075/F295 : 35                         	XPAH	P1
 6076/F296 : CA F2                      	ST	-14(P2)
 6077/F298 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6078/F29A :                            
 6079/F29A :                            ; Convert 4-byte floating point number to ASCII-representation,
 6080/F29A :                            ; store beyond number as string (terminated by <null> byte.)
 6081/F29A :                            ; NOTE: Pointer P1 contains actual arithmetics stack.
 6082/F29A :                            ; 4 BYTES: CHARA MAN1 MAN2 MAN3, EXP = CHARA - 128
 6083/F29A :                            ; MAN1 bits 7:6 b'10' negative (whole mantissa 2's complement), bits 7:6 b'01' positive
 6084/F29A :                            ; AEXOFF = AEXSTK-4, means one fp number on AEX STACK
 6085/F29A :                            ; scratch is 4 bytes lower as fp number
 6086/F29A :                            ; NOTE:	DB	0x83, 0x50, 0, 0	; DCM  10.0
 6087/F29A :                            ;	DB	0x82, 0xB0, 0, 0	; DCM -10.0
 6088/F29A : C4 00                      FNUM:	LDI	0			; load zero
 6089/F29C : CA E7                      	ST	CHRNUM(P2)	; digit counter or sign ? 0 = positive ?
 6090/F29E : C4 20                      	LDI	' '			; load <space> for positive number
 6091/F2A0 : C9 FB                      	ST	-5(P1)			; store 5 bytes lower (below scratch)
 6092/F2A2 : C1 01                      	LD	1(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 219 - 2024年05月30日 19時01分01秒


 6093/F2A4 : 98 22                      	JZ	FZERO			; is MSB of mantissa <null> ?
 6094/F2A6 : 94 17                      	JP	FDIG10			; go, mantissa is positive
 6095/F2A8 : C4 2D                      	LDI	'-'			; load <minus> for negative number
 6096/F2AA : C9 FB                      	ST	-5(P1)			; store 5 bytes lower (below scratch)
 6097/F2AC : 03                         	SCL
 6098/F2AD : C4 00                      	LDI	0			; negate number on AEX STACK
 6099/F2AF : F9 03                      	CAD	3(P1)
 6100/F2B1 : C9 03                      	ST	3(P1)
 6101/F2B3 : C4 00                      	LDI	0
 6102/F2B5 : F9 02                      	CAD	2(P1)
 6103/F2B7 : C9 02                      	ST	2(P1)
 6104/F2B9 : C4 00                      	LDI	0
 6105/F2BB : F9 01                      	CAD	1(P1)
 6106/F2BD : C9 01                      	ST	1(P1)			; now positive BUT sometimes bit7 set!
 6107/F2BF :                            ; NOTE:	now invert bit7 of exponent (strip characteristic)
 6108/F2BF : C1 00                      FDIG10:	LD	(P1)
 6109/F2C1 : E4 80                      	XRI	0x80
 6110/F2C3 :                            ; NOTE:	If number is positive, skip and fall through directly to ZERO
 6111/F2C3 : 94 03                      	JP	FZERO			; go, exponent is positive
 6112/F2C5 : (MACRO)                    	CALL	NEGEXP
 6112/F2C5 : 3F                                  XPPC   P3
 6112/F2C6 : F3                                  DB     H(NEGEXP)
 6112/F2C7 : D8                                  DB     L(NEGEXP)
 6113/F2C8 : C4 01                      FZERO:	LDI	1
 6114/F2CA : C9 FC                      	ST	-4(P1)			; store 1 in temporary
 6115/F2CC : C1 01                      	LD	1(P1)			; load MANT1
 6116/F2CE : 98 77                      	JZ	FDIG19			; go, MANT1 is zero
 6117/F2D0 : C4 A0                      FDIG13:	LDI	0xA0			; load b'10100000' 10<<4 ?
 6118/F2D2 : 01                         	XAE				; preserve in E
 6119/F2D3 : C1 03                      	LD	3(P1)			; copy number four bytes down in SCRATCH
 6120/F2D5 : C9 FF                      	ST	-1(P1)
 6121/F2D7 : C1 02                      	LD	2(P1)
 6122/F2D9 : C9 FE                      	ST	-2(P1)
 6123/F2DB : C1 01                      	LD	1(P1)
 6124/F2DD : C9 FD                      	ST	-3(P1)
 6125/F2DF : C4 00                      	LDI	0			; set top mantissa to zero
 6126/F2E1 : C9 03                      	ST	3(P1)
 6127/F2E3 : C9 02                      	ST	2(P1)
 6128/F2E5 : C9 01                      	ST	1(P1)
 6129/F2E7 : C4 18                      	LDI	24			; shift 24 bit
 6130/F2E9 : C9 FA                      	ST	-6(P1)			; store bit counter
 6131/F2EB : 03                         FDIGLP:	SCL				; shift left loop
 6132/F2EC : C1 FD                      	LD	-3(P1)			; load MANT1
 6133/F2EE : FC 50                      	CAI	0x50			; subtract b'01010000' 10<<3 ?
 6134/F2F0 : 94 02                      	JP	FDIG15			; go, greater / equal 10
 6135/F2F2 : 90 04                      	JMP	FDIG16			; otherwise subtraction "failed"
 6136/F2F4 : C9 FD                      FDIG15:	ST	-3(P1)			; store again
 6137/F2F6 : A9 03                      	ILD	3(P1)			; increase quotient
 6138/F2F8 : B9 FA                      FDIG16:	DLD	-6(P1)			; decrease shift counter
 6139/F2FA : 98 2A                      	JZ	FDIG17			; zero, shift loop complete
 6140/F2FC : 02                         	CCL
 6141/F2FD : 40                         	LDE				; E holds 0xA0, see above
 6142/F2FE : 70                         	ADE
 6143/F2FF : 01                         	XAE
 6144/F300 : C1 FF                      	LD	-1(P1)
 6145/F302 : F1 FF                      	ADD	-1(P1)
 6146/F304 : C9 FF                      	ST	-1(P1)
 6147/F306 : C1 FE                      	LD	-2(P1)
 6148/F308 : F1 FE                      	ADD	-2(P1)
 6149/F30A : C9 FE                      	ST	-2(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 220 - 2024年05月30日 19時01分01秒


 6150/F30C : C1 FD                      	LD	-3(P1)
 6151/F30E : F1 FD                      	ADD	-3(P1)
 6152/F310 : C9 FD                      	ST	-3(P1)
 6153/F312 :                            ; NOTE: shifted E and mantissa 1 bit left
 6154/F312 : C1 03                      	LD	3(P1)
 6155/F314 : F1 03                      	ADD	3(P1)
 6156/F316 : C9 03                      	ST	3(P1)
 6157/F318 : C1 02                      	LD	2(P1)
 6158/F31A : F1 02                      	ADD	2(P1)
 6159/F31C : C9 02                      	ST	2(P1)
 6160/F31E : C1 01                      	LD	1(P1)
 6161/F320 : F1 01                      	ADD	1(P1)
 6162/F322 : C9 01                      	ST	1(P1)
 6163/F324 :                            ; NOTE: shifted quotient 1 bit left
 6164/F324 : 90 C5                      	JMP	FDIGLP			; continue shift loop
 6165/F326 : C1 01                      FDIG17:	LD	1(P1)			; comes here from shift loop
 6166/F328 : 94 10                      	JP	FDIG18			; test bit7 of QUOTIENT1
 6167/F32A :                            ; NOTE:	bit7 set, so shift quotient right one bit (dividde by 2)
 6168/F32A : 02                         	CCL
 6169/F32B : 1F                         	RRL
 6170/F32C : C9 01                      	ST	1(P1)
 6171/F32E : C1 02                      	LD	2(P1)
 6172/F330 : 1F                         	RRL
 6173/F331 : C9 02                      	ST	2(P1)
 6174/F333 : C1 03                      	LD	3(P1)
 6175/F335 : 1F                         	RRL
 6176/F336 : C9 03                      	ST	3(P1)
 6177/F338 :                            ; NOTE:	compensate divide by increasing exp by one
 6178/F338 : A9 00                      	ILD	(P1)
 6179/F33A : 03                         FDIG18:	SCL
 6180/F33B : C1 00                      	LD	(P1)
 6181/F33D : FC 04                      	CAI	4			; subtract exponent by 4
 6182/F33F : C9 00                      	ST	(P1)
 6183/F341 : 94 04                      	JP	FDIG19
 6184/F343 : A9 FC                      	ILD	-4(P1)			; increase temporary
 6185/F345 : 90 89                      	JMP	FDIG13
 6186/F347 : C1 FC                      FDIG19:	LD	-4(P1)			; load temporary
 6187/F349 : CA EB                      	ST	COUNTR(P2)		; store on STACK -21
 6188/F34B : C2 E7                      	LD	CHRNUM(P2)		; load digit counter
 6189/F34D : 9C 0F                      	JNZ	FDIG20
 6190/F34F : 03                         	SCL
 6191/F350 : C4 06                      	LDI	6			; maximal digit limit ?
 6192/F352 : F9 FC                      	CAD	-4(P1)
 6193/F354 : 94 08                      	JP	FDIG20			; not reached
 6194/F356 : B9 FC                      	DLD	-4(P1)			; decrease temporary..
 6195/F358 : CA E7                      	ST	CHRNUM(P2)		; ..store as digit counter
 6196/F35A : C4 01                      	LDI	1
 6197/F35C : C9 FC                      	ST	-4(P1)			; store one in temporary
 6198/F35E : 02                         FDIG20:	CCL
 6199/F35F : C1 01                      	LD	1(P1)
 6200/F361 : 1F                         	RRL
 6201/F362 : C9 01                      	ST	1(P1)
 6202/F364 : C1 02                      	LD	2(P1)
 6203/F366 : 1F                         	RRL
 6204/F367 : C9 02                      	ST	2(P1)
 6205/F369 : C1 03                      	LD	3(P1)
 6206/F36B : 1F                         	RRL
 6207/F36C : C9 03                      	ST	3(P1)
 6208/F36E : 40                         	LDE
 6209/F36F : 1F                         	RRL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 221 - 2024年05月30日 19時01分01秒


 6210/F370 : 01                         	XAE
 6211/F371 : A9 00                      	ILD	(P1)
 6212/F373 : E4 86                      	XRI	0x86
 6213/F375 : 9C E7                      	JNZ	FDIG20
 6214/F377 :                            ; shifted E and quotient 1 bit right until exp equal 6
 6215/F377 : 40                         	LDE
 6216/F378 : F4 02                      	ADI	2
 6217/F37A : C9 01                      	ST	1(P1)
 6218/F37C : C4 05                      	LDI	5
 6219/F37E : C9 00                      	ST	(P1)
 6220/F380 :                            ; NOTE:	advance AEX STACK pointer to begin of number string
 6221/F380 : C5 FB                      	LD	@-5(P1)
 6222/F382 : 06                         	CSA
 6223/F383 :                            ; NOTE: Bit7 in status reg is carry/link.
 6224/F383 : 94 1E                      	JP	FDEC
 6225/F385 : A9 08                      	ILD	8(P1)			; was before 3(P1)
 6226/F387 : 9C 1A                      	JNZ	FDEC
 6227/F389 : A9 07                      	ILD	7(P1)			; was before 2(P1)
 6228/F38B : 9C 16                      	JNZ	FDEC
 6229/F38D : C4 31                      	LDI	'1'
 6230/F38F : CD FF                      	ST	@-1(P1)			; increase and store <one>
 6231/F391 : C2 E7                      	LD	CHRNUM(P2)		; load digit counter
 6232/F393 : 9C 08                      	JNZ	FDIG21
 6233/F395 : C1 02                      	LD	2(P1)			; temporary, was before -4(P1) ?
 6234/F397 : E4 06                      	XRI	6
 6235/F399 : 9C 08                      	JNZ	FDEC
 6236/F39B : F4 05                      	ADI	5
 6237/F39D : F4 00                      FDIG21:	ADI	0
 6238/F39F : CA E7                      	ST	CHRNUM(P2)		; store digit counter
 6239/F3A1 : 90 07                      	JMP	FEXP
 6240/F3A3 : (MACRO)                    FDEC:	CALL	BINDEC			; convert binary to decimal
 6240/F3A3 : 3F                                  XPPC   P3
 6240/F3A4 : F4                                  DB     H(BINDEC)
 6240/F3A5 : 32                                  DB     L(BINDEC)
 6241/F3A6 : C2 E7                      	LD	CHRNUM(P2)		; load digit counter
 6242/F3A8 : 98 28                      	JZ	FNUMND 
 6243/F3AA : 01                         FEXP:	XAE				; calculate decimal exponent
 6244/F3AB : C4 45                      	LDI	'E'
 6245/F3AD : CD FF                      	ST	@-1(P1)			; store 'E' for exponent
 6246/F3AF : 40                         	LDE				; E holds exponent
 6247/F3B0 : 94 04                      	JP	FEXP1			; positive exponent ?
 6248/F3B2 : C4 2D                      	LDI	'-'
 6249/F3B4 : CD FF                      	ST	@-1(P1)			; store <minus> for negative exponent
 6250/F3B6 : 03                         FEXP1:	SCL
 6251/F3B7 : 40                         	LDE
 6252/F3B8 : D4 7F                      	ANI	0x7F			; strip characteristic
 6253/F3BA : FC 0A                      	CAI	10			; subtract 10
 6254/F3BC : 94 02                      	JP	FEXP2			; exponent is equal / greater 10
 6255/F3BE : 90 0E                      	JMP	FEXPD
 6256/F3C0 : 01                         FEXP2:	XAE
 6257/F3C1 : C4 30                      	LDI	'0'
 6258/F3C3 : CD FF                      	ST	@-1(P1)			; decrease and store <zero>
 6259/F3C5 : A9 00                      FEXP3:	ILD	(P1)			; increase digit
 6260/F3C7 : 40                         	LDE
 6261/F3C8 : FC 0A                      	CAI	10			; subtract 10 while positive and increase counter
 6262/F3CA : 01                         	XAE
 6263/F3CB : 40                         	LDE
 6264/F3CC : 94 F7                      	JP	FEXP3			; exponent still equal / greater 10
 6265/F3CE : F4 3A                      FEXPD:	ADI	'9'+1			; calculate ASCII value of latest digit
 6266/F3D0 : CD FF                      	ST	@-1(P1)			; decrease and store ASCII digit
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 222 - 2024年05月30日 19時01分01秒


 6267/F3D2 : C4 00                      FNUMND:	LDI	0			; load <null>
 6268/F3D4 : CD FF                      	ST	@-1(P1)			; and store as string delimiter
 6269/F3D6 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6270/F3D8 :                            
 6271/F3D8 :                            ; Special treatment for floats with negative exponent.
 6272/F3D8 : 02                         NEGEXP:	CCL				; exponent is negative
 6273/F3D9 : F4 09                      	ADI	9			; add 9 (lb 512 = 9)
 6274/F3DB : 94 53                      	JP	NEGSKP			; exponent < 9, so < 1/512 or >= -1/512
 6275/F3DD : C4 80                      	LDI	0x80			; load 128
 6276/F3DF : CA E7                      	ST	CHRNUM(P2)	; digit counter or sign ? 128 = negative ?
 6277/F3E1 :                            ; NOTE:
 6278/F3E1 :                            ; Following only if exponent is negative and greater/equal -1/512 or less than 1/512.
 6279/F3E1 :                            ; Printed number will then have scientific notation,
 6280/F3E1 :                            ; so count zero before and zero(s) behind decimal point.
 6281/F3E1 :                            ; -1/512 = -1.95312E-3 and 1/512 = 0.00195
 6282/F3E1 : AA E7                      FDIG11:	ILD	CHRNUM(P2)		; increase digit counter by one
 6283/F3E3 : 02                         	CCL
 6284/F3E4 : C1 01                      	LD	1(P1)			; shift MANT1 right
 6285/F3E6 : 1F                         	RRL
 6286/F3E7 : C9 FD                      	ST	-3(P1)			; store 4 bytes lower SCRATCH1
 6287/F3E9 : C1 02                      	LD	2(P1)			; shift MANT2 right
 6288/F3EB : 1F                         	RRL
 6289/F3EC : C9 FE                      	ST	-2(P1)			; store 4 bytes lower SCRATCH2
 6290/F3EE : C1 03                      	LD	3(P1)			; shift MANT3 right
 6291/F3F0 : 1F                         	RRL
 6292/F3F1 : C9 FF                      	ST	-1(P1)			; store 4 bytes lower SCRATCH3
 6293/F3F3 :                            ; NOTE:	shifted mantissa one bit right and stored in scratch
 6294/F3F3 :                            ; scratch = mantissa / 2
 6295/F3F3 : 02                         	CCL
 6296/F3F4 : C1 FD                      	LD	-3(P1)			; shift SCRATCH1 right
 6297/F3F6 : 1F                         	RRL
 6298/F3F7 : C9 FD                      	ST	-3(P1)			; store in SCRATCH1
 6299/F3F9 : C1 FE                      	LD	-2(P1)			; shift SCRATCH2 right
 6300/F3FB : 1F                         	RRL
 6301/F3FC : C9 FE                      	ST	-2(P1)			; store in SCRATCH2
 6302/F3FE : C1 FF                      	LD	-1(P1)			; shift SCRATCH3 right
 6303/F400 : 1F                         	RRL
 6304/F401 : C9 FF                      	ST	-1(P1)			; store in SCRATCH3
 6305/F403 :                            ; NOTE:	shifted scratch one bit right,
 6306/F403 :                            ; scratch = scratch / 2
 6307/F403 : C1 03                      	LD	3(P1)
 6308/F405 : F1 FF                      	ADD	-1(P1)
 6309/F407 : C9 03                      	ST	3(P1)
 6310/F409 : C1 02                      	LD	2(P1)
 6311/F40B : F1 FE                      	ADD	-2(P1)
 6312/F40D : C9 02                      	ST	2(P1)
 6313/F40F : C1 01                      	LD	1(P1)
 6314/F411 : F1 FD                      	ADD	-3(P1)
 6315/F413 : C9 01                      	ST	1(P1)
 6316/F415 :                            ; NOTE: added mantissa and scratch
 6317/F415 :                            ; result = mantissa + mantissa / 4
 6318/F415 : 94 10                      	JP	FDIG12			; bit7=0, so no more shift right
 6319/F417 : 02                         	CCL
 6320/F418 : 1F                         	RRL
 6321/F419 : C9 01                      	ST	1(P1)
 6322/F41B : C1 02                      	LD	2(P1)
 6323/F41D : 1F                         	RRL
 6324/F41E : C9 02                      	ST	2(P1)
 6325/F420 : C1 03                      	LD	3(P1)
 6326/F422 : 1F                         	RRL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 223 - 2024年05月30日 19時01分01秒


 6327/F423 : C9 03                      	ST	3(P1)
 6328/F425 :                            ; NOTE: mantissa has an extra shift right
 6329/F425 : A9 00                      	ILD	(P1)			; increase exponent
 6330/F427 : 02                         FDIG12:	CCL
 6331/F428 : C1 00                      	LD	(P1)
 6332/F42A : F4 03                      	ADI	3
 6333/F42C : C9 00                      	ST	(P1)			; add 3 to exponent (multiply mantissa by 8)
 6334/F42E : 94 B1                      	JP	FDIG11			; positive, repeat
 6335/F430 : (MACRO)                    NEGSKP:	RTRN
 6335/F430 : 3F                                  XPPC   P3
 6335/F431 : 00                                  DB     0
 6336/F432 :                            
 6337/F432 :                            ; Convert binary to decimal number, digits are stored on arithmetics stack.
 6338/F432 : C2 FD                      BINDEC:	LD	AEXOFF(P2)		; load P2 with offset to topmost number
 6339/F434 : 32                         	XPAL	P2
 6340/F435 : C4 06                      FDEC1:	LDI	6			; evaluate decimal fraction
 6341/F437 : 01                         	XAE
 6342/F438 :                            ; NOTE:	E holds b'00000110', after 3 left shifts it is b'0011xxxx'.
 6343/F438 :                            ;	After multiplication by 10 there is the searched decimal as ASCII digit
 6344/F438 : 02                         	CCL
 6345/F439 : C2 01                      	LD	1(P2)
 6346/F43B : F2 01                      	ADD	1(P2)
 6347/F43D : CA FF                      	ST	-1(P2)
 6348/F43F : C2 03                      	LD	3(P2)
 6349/F441 : F2 03                      	ADD	3(P2)
 6350/F443 : CA FE                      	ST	-2(P2)
 6351/F445 : C2 02                      	LD	2(P2)
 6352/F447 : F2 02                      	ADD	2(P2)
 6353/F449 : CA FD                      	ST	-3(P2)
 6354/F44B : 40                         	LDE
 6355/F44C : 70                         	ADE
 6356/F44D : 01                         	XAE
 6357/F44E :                            ; NOTE: shifted quotient and E one bit left and store result in scratch and E
 6358/F44E : C2 FF                      	LD	-1(P2)
 6359/F450 : F2 FF                      	ADD	-1(P2)
 6360/F452 : CA FF                      	ST	-1(P2)
 6361/F454 : C2 FE                      	LD	-2(P2)
 6362/F456 : F2 FE                      	ADD	-2(P2)
 6363/F458 : CA FE                      	ST	-2(P2)
 6364/F45A : C2 FD                      	LD	-3(P2)
 6365/F45C : F2 FD                      	ADD	-3(P2)
 6366/F45E : CA FD                      	ST	-3(P2)
 6367/F460 : 40                         	LDE
 6368/F461 : 70                         	ADE
 6369/F462 : 01                         	XAE
 6370/F463 :                            ; NOTE: shifted scratch and E one bit left,
 6371/F463 :                            ; result = quotient * 4
 6372/F463 : C2 01                      	LD	1(P2)
 6373/F465 : F2 FF                      	ADD	-1(P2)
 6374/F467 : CA 01                      	ST	1(P2)
 6375/F469 : C2 03                      	LD	3(P2)
 6376/F46B : F2 FE                      	ADD	-2(P2)
 6377/F46D : CA 03                      	ST	3(P2)
 6378/F46F : C2 02                      	LD	2(P2)
 6379/F471 : F2 FD                      	ADD	-3(P2)
 6380/F473 : CA 02                      	ST	2(P2)
 6381/F475 : 40                         	LDE
 6382/F476 : F4 00                      	ADI	0			; take care of carry/link
 6383/F478 : 01                         	XAE
 6384/F479 :                            ; NOTE: added scratch to quotient
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 224 - 2024年05月30日 19時01分01秒


 6385/F479 :                            ; result = 4 * quotient + quotient = 5 * quotient
 6386/F479 : C2 01                      	LD	1(P2)
 6387/F47B : F2 01                      	ADD	1(P2)
 6388/F47D : CA 01                      	ST	1(P2)
 6389/F47F : C2 03                      	LD	3(P2)
 6390/F481 : F2 03                      	ADD	3(P2)
 6391/F483 : CA 03                      	ST	3(P2)
 6392/F485 : C2 02                      	LD	2(P2)
 6393/F487 : F2 02                      	ADD	2(P2)
 6394/F489 : CA 02                      	ST	2(P2)
 6395/F48B : 40                         	LDE
 6396/F48C : 70                         	ADE
 6397/F48D : CD FF                      	ST	@-1(P1)			; store as next decimal digit
 6398/F48F :                            ; NOTE:	shifted modified quotient one bit left
 6399/F48F :                            ; result = (5 * quotient) * 2 = 10 * quotient
 6400/F48F : BA 00                      	DLD	(P2)
 6401/F491 : BA FC                      	DLD	-4(P2)
 6402/F493 : 9C 04                      	JNZ	FDEC2
 6403/F495 : C4 2E                      	LDI	'.'			; load <period>
 6404/F497 : CD FF                      	ST	@-1(P1)			; store as decimal point
 6405/F499 : C2 00                      FDEC2:	LD	(P2)
 6406/F49B : 94 98                      	JP	FDEC1
 6407/F49D : C5 01                      FDEC3:	LD	@1(P1)			; get byte from number string and increase
 6408/F49F : E4 30                      	XRI	'0'			; is it leading <zero> ?
 6409/F4A1 : 98 FA                      	JZ	FDEC3			; yes, just eat it
 6410/F4A3 : D4 F0                      	ANI	0xF0
 6411/F4A5 : 9C 02                      	JNZ	FDEC4			; was there another digit ?
 6412/F4A7 : C5 FF                      	LD	@-1(P1)			; yes, set back to previous byte
 6413/F4A9 : C4 80                      FDEC4:	LDI	STKMID			; load P2 with STACK
 6414/F4AB : 32                         	XPAL	P2
 6415/F4AC : (MACRO)                    	RTRN
 6415/F4AC : 3F                                  XPPC   P3
 6415/F4AD : 00                                  DB     0
 6416/F4AE :                            
 6417/F4AE :                            ; restore only P1, leave top of AEX STACK unchanged.
 6418/F4AE : C2 F3                      STPBCK:	LD	-13(P2)
 6419/F4B0 : 31                         	XPAL	P1
 6420/F4B1 : C2 F2                      	LD	-14(P2)
 6421/F4B3 : 35                         	XPAH	P1
 6422/F4B4 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6423/F4B6 :                            
 6424/F4B6 :                            ; Characteristic has bias 128, so subtract 128 to obtain exponent
 6425/F4B6 :                            ; 00 = -128 ... 7F = -1, 80 = 0, 81 = +1 ... FF = +127
 6426/F4B6 :                            ; e is Euler's number
 6427/F4B6 :                            ; 80 5C 55 1E	L2E	DCM 1.4426950409	; log base 2 of e ( lb e )
 6428/F4B6 :                            ; 86 57 6A E1	A2	DCM 87.417497202
 6429/F4B6 :                            ; 89 4D 3F 1D	B2	DCM 617.9722695
 6430/F4B6 :                            ; 7B 46 FA 70	C2	DCM 0.034657359		; (ln 2) / 20
 6431/F4B6 :                            ; 83 4F A3 03	D	DCM 9.9545957821
 6432/F4B6 :                            ; 7E 6F 2D ED	L10E	DCM 0.4342945		; log base 10 of e ( log e )
 6433/F4B6 :                            ; 7E 4D 10 4D	L102	DCM 0.301029996		; log base 10 of 2 ( log 2 )
 6434/F4B6 :                            ; 80 5A 82 7A	R22	DCM 1.414213562		; sqrt(2)
 6435/F4B6 :                            ; 7F 58 B9 0C	LE2	DCM 0.69314718		; log base e of 2 ( ln 2 )
 6436/F4B6 :                            ; 80 52 B0 40	A1	DCM 1.2920074
 6437/F4B6 :                            ; 81 AB 86 49	MB	DCM -2.6398577
 6438/F4B6 :                            ; 80 6A 08 66	C	DCM 1.6567626
 6439/F4B6 :                            ; 7F 40 00 00	MHLF	DCM 0.5
 6440/F4B6 :                            ; 7E 80 00 00	MMHLF	DCM -0.5
 6441/F4B6 :                            ; 80 40 00 00	ONE	DCM 1.0
 6442/F4B6 :                            ; 7F 80 00 00	MONE	DCM -1.0
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 225 - 2024年05月30日 19時01分01秒


 6443/F4B6 :                            ; 81 64 87 ED	PI	DCM 3.14159265		; circle number
 6444/F4B6 :                            
 6445/F4B6 :                            ; Put logarithmic base 10 of 2 ( log 2 ) on stack.
 6446/F4B6 : C4 4D                      LG2:	LDI	0x4D
 6447/F4B8 : CD FF                      	ST	@-1(P1)
 6448/F4BA : CD FE                      	ST	@-2(P1)
 6449/F4BC : C4 10                      	LDI	0x10
 6450/F4BE : C9 01                      	ST	1(P1)
 6451/F4C0 : C4 7E                      	LDI	0x7E
 6452/F4C2 : CD FF                      	ST	@-1(P1)			; 7E 4D 10 4D -> DCM 0.301029996
 6453/F4C4 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6454/F4C6 :                            
 6455/F4C6 :                            ; Put logarithmic base e of 2 ( ln 2 ) on stack.
 6456/F4C6 : C4 0C                      LN2:	LDI	0x0C
 6457/F4C8 : CD FF                      	ST	@-1(P1)
 6458/F4CA : C4 B9                      	LDI	0xB9
 6459/F4CC : CD FF                      	ST	@-1(P1)
 6460/F4CE : C4 58                      	LDI	0x58
 6461/F4D0 : CD FF                      	ST	@-1(P1)
 6462/F4D2 : C4 7F                      	LDI	0x7F
 6463/F4D4 : CD FF                      	ST	@-1(P1)			; 7F 58 B9 0C -> DCM 0.69314718
 6464/F4D6 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6465/F4D8 :                            
 6466/F4D8 :                            ; Calculate natural log of topmost floating point number.
 6467/F4D8 :                            ; NOTE: Pointer P1 contains actual arithmetics stack.
 6468/F4D8 : C1 01                      LOG2:	LD	1(P1)
 6469/F4DA : 94 04                      	JP	LOG21
 6470/F4DC : C4 88                      LGERR:	LDI	(M_ARG-M_BASE)		; 'ARGUMENT ERROR', can not be negative..
 6471/F4DE : 93 B4                      	JMP	SV_MSGOUT(P3)
 6472/F4E0 : D9 02                      LOG21:	OR	2(P1)
 6473/F4E2 : D9 03                      	OR	3(P1)
 6474/F4E4 : 98 F6                      	JZ	LGERR			; ..let alone zero
 6475/F4E6 : C4 00                      	LDI	0
 6476/F4E8 : C9 FF                      	ST	-1(P1)
 6477/F4EA : C1 00                      	LD	(P1)
 6478/F4EC : E4 80                      	XRI	0x80			; complement sign bit of original exp
 6479/F4EE : C9 FD                      	ST	-3(P1)
 6480/F4F0 : C4 80                      	LDI	0x80
 6481/F4F2 : C9 00                      	ST	(P1)
 6482/F4F4 : C9 FE                      	ST	-2(P1)
 6483/F4F6 : C4 86                      	LDI	0x86
 6484/F4F8 : CD FC                      	ST	@-4(P1)
 6485/F4FA : (MACRO)                    	CALL	NORM
 6485/F4FA : 3F                                  XPPC   P3
 6485/F4FB : F1                                  DB     H(NORM)
 6485/F4FC : C4                                  DB     L(NORM)
 6486/F4FD : (MACRO)                    	CALL	SWAP
 6486/F4FD : 3F                                  XPPC   P3
 6486/F4FE : F0                                  DB     H(SWAP)
 6486/F4FF : 35                                  DB     L(SWAP)
 6487/F500 : C1 03                      	LD	3(P1)
 6488/F502 : C9 FF                      	ST	-1(P1)
 6489/F504 : C1 02                      	LD	2(P1)
 6490/F506 : C9 FE                      	ST	-2(P1)
 6491/F508 : C1 01                      	LD	1(P1)
 6492/F50A : C9 FD                      	ST	-3(P1)
 6493/F50C : C1 00                      	LD	(P1)
 6494/F50E : CD FC                      	ST	@-4(P1)			; adjust stack by four down
 6495/F510 : C4 7A                      	LDI	0x7A			; load sqrt(2) on stack
 6496/F512 : CD FF                      	ST	@-1(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 226 - 2024年05月30日 19時01分01秒


 6497/F514 : C4 82                      	LDI	0x82
 6498/F516 : CD FF                      	ST	@-1(P1)
 6499/F518 : C4 5A                      	LDI	0x5A
 6500/F51A : CD FF                      	ST	@-1(P1)
 6501/F51C : C4 80                      	LDI	0x80
 6502/F51E : CD FF                      	ST	@-1(P1)			; 80 5A 82 7A -> DCM 1.414213562 ( SQRT(2) )
 6503/F520 : (MACRO)                    	CALL	FSUB			; z - sqrt(2)
 6503/F520 : 3F                                  XPPC   P3
 6503/F521 : F1                                  DB     H(FSUB)
 6503/F522 : 39                                  DB     L(FSUB)
 6504/F523 : (MACRO)                    	CALL	SWAP
 6504/F523 : 3F                                  XPPC   P3
 6504/F524 : F0                                  DB     H(SWAP)
 6504/F525 : 35                                  DB     L(SWAP)
 6505/F526 : C4 7A                      	LDI	0x7A			; load sqrt(2) on stack
 6506/F528 : CD FF                      	ST	@-1(P1)
 6507/F52A : C4 82                      	LDI	0x82
 6508/F52C : CD FF                      	ST	@-1(P1)
 6509/F52E : C4 5A                      	LDI	0x5A
 6510/F530 : CD FF                      	ST	@-1(P1)
 6511/F532 : C4 80                      	LDI	0x80
 6512/F534 : CD FF                      	ST	@-1(P1)			; 80 5A 82 7A -> DCM 1.414213562 ( SQRT(2) )
 6513/F536 : (MACRO)                    	CALL	FADD			; z + sqrt(2)
 6513/F536 : 3F                                  XPPC   P3
 6513/F537 : F1                                  DB     H(FADD)
 6513/F538 : 3C                                  DB     L(FADD)
 6514/F539 : (MACRO)                    	CALL	FDIV			; z - sqrt(2) / z + sqrt(2)
 6514/F539 : 3F                                  XPPC   P3
 6514/F53A : F0                                  DB     H(FDIV)
 6514/F53B : 78                                  DB     L(FDIV)
 6515/F53C : C4 49                      	LDI	0x49			; load mb on stack
 6516/F53E : CD FF                      	ST	@-1(P1)
 6517/F540 : C4 86                      	LDI	0x86
 6518/F542 : CD FF                      	ST	@-1(P1)
 6519/F544 : C4 AB                      	LDI	0xAB
 6520/F546 : CD FF                      	ST	@-1(P1)
 6521/F548 : C4 81                      	LDI	0x81
 6522/F54A : CD FF                      	ST	@-1(P1)			; 81 AB 86 49 -> DCM -2.6398577 ( MB )
 6523/F54C : C1 07                      	LD	7(P1)
 6524/F54E : C9 FF                      	ST	-1(P1)
 6525/F550 : C9 FB                      	ST	-5(P1)
 6526/F552 : C1 06                      	LD	6(P1)
 6527/F554 : C9 FE                      	ST	-2(P1)
 6528/F556 : C9 FA                      	ST	-6(P1)
 6529/F558 : C1 05                      	LD	5(P1)
 6530/F55A : C9 FD                      	ST	-3(P1)
 6531/F55C : C9 F9                      	ST	-7(P1)
 6532/F55E : C1 04                      	LD	4(P1)
 6533/F560 : C9 FC                      	ST	-4(P1)
 6534/F562 : CD F8                      	ST	@-8(P1)
 6535/F564 : (MACRO)                    	CALL	FMUL			; t * t
 6535/F564 : 3F                                  XPPC   P3
 6535/F565 : F0                                  DB     H(FMUL)
 6535/F566 : E3                                  DB     L(FMUL)
 6536/F567 : C4 66                      	LDI	0x66			; load c on stack
 6537/F569 : CD FF                      	ST	@-1(P1)
 6538/F56B : C4 08                      	LDI	8
 6539/F56D : CD FF                      	ST	@-1(P1)
 6540/F56F : C4 6A                      	LDI	0x6A
 6541/F571 : CD FF                      	ST	@-1(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 227 - 2024年05月30日 19時01分01秒


 6542/F573 : C4 80                      	LDI	0x80
 6543/F575 : CD FF                      	ST	@-1(P1)			; 80 6A 08 66 -> DCM 1.6567626 ( C )
 6544/F577 : (MACRO)                    	CALL	FSUB			; t * t -c 
 6544/F577 : 3F                                  XPPC   P3
 6544/F578 : F1                                  DB     H(FSUB)
 6544/F579 : 39                                  DB     L(FSUB)
 6545/F57A : (MACRO)                    	CALL	FDIV			; mb / (t * t - c)
 6545/F57A : 3F                                  XPPC   P3
 6545/F57B : F0                                  DB     H(FDIV)
 6545/F57C : 78                                  DB     L(FDIV)
 6546/F57D : C4 40                      	LDI	0x40			; load a1 on stack
 6547/F57F : CD FF                      	ST	@-1(P1)
 6548/F581 : C4 B0                      	LDI	0xB0
 6549/F583 : CD FF                      	ST	@-1(P1)
 6550/F585 : C4 52                      	LDI	0x52
 6551/F587 : CD FF                      	ST	@-1(P1)
 6552/F589 : C4 80                      	LDI	0x80
 6553/F58B : CD FF                      	ST	@-1(P1)			; 80 52 B0 40 -> DCM 1.2920074 ( A1 )
 6554/F58D : (MACRO)                    	CALL	FADD			; mb / (t * t - c) + a1
 6554/F58D : 3F                                  XPPC   P3
 6554/F58E : F1                                  DB     H(FADD)
 6554/F58F : 3C                                  DB     L(FADD)
 6555/F590 : (MACRO)                    	CALL	FMUL			; (mb / (t * t - c) + a1) * t
 6555/F590 : 3F                                  XPPC   P3
 6555/F591 : F0                                  DB     H(FMUL)
 6555/F592 : E3                                  DB     L(FMUL)
 6556/F593 : (MACRO)                    	CALL	FADD
 6556/F593 : 3F                                  XPPC   P3
 6556/F594 : F1                                  DB     H(FADD)
 6556/F595 : 3C                                  DB     L(FADD)
 6557/F596 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6558/F598 :                            
 6559/F598 :                            ; Calculate exponentiation.
 6560/F598 :                            ; NOTE: Pointer P1 contains actual arithmetics stack.
 6561/F598 : C4 00                      EXP2:	LDI	0
 6562/F59A : C9 FF                      	ST	-1(P1)
 6563/F59C : C9 FE                      	ST	-2(P1)
 6564/F59E : C1 01                      	LD	1(P1)
 6565/F5A0 : 9C 09                      	JNZ	EXP21
 6566/F5A2 : C4 80                      	LDI	0x80
 6567/F5A4 : C9 00                      	ST	(P1)
 6568/F5A6 : 1C                         	SR
 6569/F5A7 : C9 01                      	ST	1(P1)
 6570/F5A9 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6571/F5AB : C9 FD                      EXP21:	ST	-3(P1)
 6572/F5AD : C1 00                      	LD	(P1)
 6573/F5AF : CD FC                      	ST	@-4(P1)
 6574/F5B1 : 03                         EXP22:	SCL
 6575/F5B2 : C4 86                      	LDI	0x86
 6576/F5B4 : F9 00                      	CAD	(P1)
 6577/F5B6 : 98 25                      	JZ	EXP25
 6578/F5B8 : 94 16                      	JP	EXP24
 6579/F5BA : C1 01                      	LD	1(P1)
 6580/F5BC : 94 0E                      	JP	EXP23
 6581/F5BE : C5 04                      	LD	@4(P1)
 6582/F5C0 : C4 00                      	LDI	0
 6583/F5C2 : C9 03                      	ST	3(P1)
 6584/F5C4 : C9 02                      	ST	2(P1)
 6585/F5C6 : C9 01                      	ST	1(P1)
 6586/F5C8 : C9 00                      	ST	(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 228 - 2024年05月30日 19時01分01秒


 6587/F5CA : 93 D6                      	JMP	SV_SPLOAD(P3)
 6588/F5CC : C4 C6                      EXP23:	LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
 6589/F5CE : 93 B4                      	JMP	SV_MSGOUT(P3)
 6590/F5D0 : C1 01                      EXP24:	LD	1(P1)
 6591/F5D2 : F1 01                      	ADD	1(P1)
 6592/F5D4 : C1 01                      	LD	1(P1)
 6593/F5D6 : 1D                         	SRL
 6594/F5D7 : C9 01                      	ST	1(P1)
 6595/F5D9 : A9 00                      	ILD	(P1)
 6596/F5DB : 90 D4                      	JMP	EXP22
 6597/F5DD : C1 01                      EXP25:	LD	1(P1)
 6598/F5DF : CA E8                      	ST	-24(P2)
 6599/F5E1 : (MACRO)                    	CALL	NORM
 6599/F5E1 : 3F                                  XPPC   P3
 6599/F5E2 : F1                                  DB     H(NORM)
 6599/F5E3 : C4                                  DB     L(NORM)
 6600/F5E4 : (MACRO)                    	CALL	FSUB
 6600/F5E4 : 3F                                  XPPC   P3
 6600/F5E5 : F1                                  DB     H(FSUB)
 6600/F5E6 : 39                                  DB     L(FSUB)
 6601/F5E7 : C4 70                      	LDI	0x70
 6602/F5E9 : CD FF                      	ST	@-1(P1)
 6603/F5EB : C4 FA                      	LDI	0xFA
 6604/F5ED : CD FF                      	ST	@-1(P1)
 6605/F5EF : C4 46                      	LDI	0x46
 6606/F5F1 : CD FF                      	ST	@-1(P1)
 6607/F5F3 : C4 7B                      	LDI	0x7B
 6608/F5F5 : CD FF                      	ST	@-1(P1)			; 7B 46 FA 70 -> DCM .03465735903 ( C2 )
 6609/F5F7 : C1 07                      	LD	7(P1)
 6610/F5F9 : C9 FF                      	ST	-1(P1)
 6611/F5FB : C9 FB                      	ST	-5(P1)
 6612/F5FD : C1 06                      	LD	6(P1)
 6613/F5FF : C9 FE                      	ST	-2(P1)
 6614/F601 : C9 FA                      	ST	-6(P1)
 6615/F603 : C1 05                      	LD	5(P1)
 6616/F605 : C9 FD                      	ST	-3(P1)
 6617/F607 : C9 F9                      	ST	-7(P1)
 6618/F609 : C1 04                      	LD	4(P1)
 6619/F60B : C9 FC                      	ST	-4(P1)
 6620/F60D : CD F8                      	ST	@-8(P1)
 6621/F60F : (MACRO)                    	CALL	FMUL
 6621/F60F : 3F                                  XPPC   P3
 6621/F610 : F0                                  DB     H(FMUL)
 6621/F611 : E3                                  DB     L(FMUL)
 6622/F612 : (MACRO)                    	CALL	FMUL
 6622/F612 : 3F                                  XPPC   P3
 6622/F613 : F0                                  DB     H(FMUL)
 6622/F614 : E3                                  DB     L(FMUL)
 6623/F615 : C4 E1                      	LDI	0xE1
 6624/F617 : CD FB                      	ST	@-5(P1)
 6625/F619 : C4 6A                      	LDI	0x6A
 6626/F61B : CD FF                      	ST	@-1(P1)
 6627/F61D : C4 57                      	LDI	0x57
 6628/F61F : CD FF                      	ST	@-1(P1)
 6629/F621 : C4 86                      	LDI	0x86
 6630/F623 : CD FF                      	ST	@-1(P1)			; 86 57 6A E1 -> DCM 87.417497202 ( A2 )
 6631/F625 : (MACRO)                    	CALL	FADD			; z * z + a2
 6631/F625 : 3F                                  XPPC   P3
 6631/F626 : F1                                  DB     H(FADD)
 6631/F627 : 3C                                  DB     L(FADD)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 229 - 2024年05月30日 19時01分01秒


 6632/F628 : C4 1D                      	LDI	0x1D
 6633/F62A : CD FF                      	ST	@-1(P1)
 6634/F62C : C4 3F                      	LDI	0x3F
 6635/F62E : CD FF                      	ST	@-1(P1)
 6636/F630 : C4 4D                      	LDI	0x4D
 6637/F632 : CD FF                      	ST	@-1(P1)
 6638/F634 : C4 89                      	LDI	0x89
 6639/F636 : CD FF                      	ST	@-1(P1)			; 89 4D 3F 1D -> DCM 617.9722695 ( B2 )
 6640/F638 : C1 05                      	LD	5(P1)
 6641/F63A : E1 01                      	XOR	1(P1)
 6642/F63C : CA EA                      	ST	-22(P2)
 6643/F63E : (MACRO)                    	CALL	SWAP
 6643/F63E : 3F                                  XPPC   P3
 6643/F63F : F0                                  DB     H(SWAP)
 6643/F640 : 35                                  DB     L(SWAP)
 6644/F641 : (MACRO)                    	CALL	FDIV0
 6644/F641 : 3F                                  XPPC   P3
 6644/F642 : F0                                  DB     H(FDIV0)
 6644/F643 : 7B                                  DB     L(FDIV0)
 6645/F644 : (MACRO)                    	CALL	FSUB
 6645/F644 : 3F                                  XPPC   P3
 6645/F645 : F1                                  DB     H(FSUB)
 6645/F646 : 39                                  DB     L(FSUB)
 6646/F647 : C1 07                      	LD	7(P1)
 6647/F649 : C9 FF                      	ST	-1(P1)
 6648/F64B : C1 06                      	LD	6(P1)
 6649/F64D : C9 FE                      	ST	-2(P1)
 6650/F64F : C1 05                      	LD	5(P1)
 6651/F651 : C9 FD                      	ST	-3(P1)
 6652/F653 : C1 04                      	LD	4(P1)
 6653/F655 : CD FC                      	ST	@-4(P1)
 6654/F657 : (MACRO)                    	CALL	FSUB
 6654/F657 : 3F                                  XPPC   P3
 6654/F658 : F1                                  DB     H(FSUB)
 6654/F659 : 39                                  DB     L(FSUB)
 6655/F65A : C4 03                      	LDI	3
 6656/F65C : CD FF                      	ST	@-1(P1)
 6657/F65E : C4 A3                      	LDI	0xA3
 6658/F660 : CD FF                      	ST	@-1(P1)
 6659/F662 : C4 4F                      	LDI	0x4F
 6660/F664 : CD FF                      	ST	@-1(P1)
 6661/F666 : C4 83                      	LDI	0x83
 6662/F668 : CD FF                      	ST	@-1(P1)			; 83 4F A3 03 -> DCM 9.9545957821 ( D )
 6663/F66A : (MACRO)                    	CALL	FADD			; d + c2 * z * z - b2 / (z * z + a2)
 6663/F66A : 3F                                  XPPC   P3
 6663/F66B : F1                                  DB     H(FADD)
 6663/F66C : 3C                                  DB     L(FADD)
 6664/F66D : (MACRO)                    	CALL	FDIV			; z / (d + c2 * z * z - b2 / (z * z + a2))
 6664/F66D : 3F                                  XPPC   P3
 6664/F66E : F0                                  DB     H(FDIV)
 6664/F66F : 78                                  DB     L(FDIV)
 6665/F670 : C4 00                      	LDI	0
 6666/F672 : CD FF                      	ST	@-1(P1)
 6667/F674 : CD FF                      	ST	@-1(P1)
 6668/F676 : C4 40                      	LDI	0x40
 6669/F678 : CD FF                      	ST	@-1(P1)
 6670/F67A : C4 7F                      	LDI	0x7F
 6671/F67C : CD FF                      	ST	@-1(P1)			; 7F 40 00 00 -> DCM 0.5 ( MHLF )
 6672/F67E : (MACRO)                    	CALL	FADD			; z / (d + c2 * z * z - b2 / (z * z + a2)) + 0.5
 6672/F67E : 3F                                  XPPC   P3
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 230 - 2024年05月30日 19時01分01秒


 6672/F67F : F1                                  DB     H(FADD)
 6672/F680 : 3C                                  DB     L(FADD)
 6673/F681 : 03                         	SCL
 6674/F682 : C2 E8                      	LD	-24(P2)
 6675/F684 : F1 00                      	ADD	(P1)
 6676/F686 : C9 00                      	ST	(P1)
 6677/F688 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6678/F68A :                            
 6679/F68A :                            ; Modulo operation
 6680/F68A :                            ; Return remainder or signed remainder of a division.
 6681/F68A :                            ; NOTE: Pointer P1 is set to actual arithmetics stack.
 6682/F68A : (MACRO)                    FMOD:	CALL	ABSWP
 6682/F68A : 3F                                  XPPC   P3
 6682/F68B : F0                                  DB     H(ABSWP)
 6682/F68C : 25                                  DB     L(ABSWP)
 6683/F68D : 02                         	CCL
 6684/F68E : C1 04                      	LD	4(P1)
 6685/F690 : FD 04                      	CAD	@4(P1)
 6686/F692 : (MACRO)                    	CALL	MD
 6686/F692 : 3F                                  XPPC   P3
 6686/F693 : F0                                  DB     H(MD)
 6686/F694 : 4D                                  DB     L(MD)
 6687/F695 : 03                         FMOD1:	SCL
 6688/F696 : C1 FB                      	LD	-5(P1)
 6689/F698 : F9 FF                      	CAD	-1(P1)
 6690/F69A : C9 FB                      	ST	-5(P1)
 6691/F69C : C1 FA                      	LD	-6(P1)
 6692/F69E : F9 FE                      	CAD	-2(P1)
 6693/F6A0 : C9 FA                      	ST	-6(P1)
 6694/F6A2 : C1 F9                      	LD	-7(P1)
 6695/F6A4 : F9 FD                      	CAD	-3(P1)
 6696/F6A6 : C9 F9                      	ST	-7(P1)
 6697/F6A8 : 94 14                      	JP	FMOD2
 6698/F6AA : C1 FB                      	LD	-5(P1)
 6699/F6AC : F1 FF                      	ADD	-1(P1)
 6700/F6AE : C9 FB                      	ST	-5(P1)
 6701/F6B0 : C1 FA                      	LD	-6(P1)
 6702/F6B2 : F1 FE                      	ADD	-2(P1)
 6703/F6B4 : C9 FA                      	ST	-6(P1)
 6704/F6B6 : C1 F9                      	LD	-7(P1)
 6705/F6B8 : F1 FD                      	ADD	-3(P1)
 6706/F6BA : C9 F9                      	ST	-7(P1)
 6707/F6BC : 90 02                      	JMP	FMOD3
 6708/F6BE : A9 03                      FMOD2:	ILD	3(P1)
 6709/F6C0 : B9 F8                      FMOD3:	DLD	-8(P1)
 6710/F6C2 : FC 01                      	CAI	1
 6711/F6C4 : 94 0E                      	JP	FMOD5
 6712/F6C6 : C1 00                      	LD	(P1)
 6713/F6C8 : 98 4E                      	JZ	FMOD10
 6714/F6CA : 94 35                      	JP	FMOD7
 6715/F6CC : B9 00                      FMOD4:	DLD	(P1)
 6716/F6CE : C1 01                      	LD	1(P1)
 6717/F6D0 : D4 3F                      	ANI	0x3F
 6718/F6D2 : C9 01                      	ST	1(P1)
 6719/F6D4 : 02                         FMOD5:	CCL
 6720/F6D5 : C1 FB                      	LD	-5(P1)
 6721/F6D7 : F1 FB                      	ADD	-5(P1)
 6722/F6D9 : C9 FB                      	ST	-5(P1)
 6723/F6DB : C1 FA                      	LD	-6(P1)
 6724/F6DD : F1 FA                      	ADD	-6(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 231 - 2024年05月30日 19時01分01秒


 6725/F6DF : C9 FA                      	ST	-6(P1)
 6726/F6E1 : C1 F9                      	LD	-7(P1)
 6727/F6E3 : 94 04                      	JP	FMOD6
 6728/F6E5 : C4 A7                      	LDI	(M_DIV0-M_BASE)		; 'DIVISION BY 0 ERROR'
 6729/F6E7 : 93 B4                      	JMP	SV_MSGOUT(P3)
 6730/F6E9 : F1 F9                      FMOD6:	ADD	-7(P1)
 6731/F6EB : C9 F9                      	ST	-7(P1)
 6732/F6ED : C1 03                      	LD	3(P1)
 6733/F6EF : F1 03                      	ADD	3(P1)
 6734/F6F1 : C9 03                      	ST	3(P1)
 6735/F6F3 : C1 02                      	LD	2(P1)
 6736/F6F5 : F1 02                      	ADD	2(P1)
 6737/F6F7 : C9 02                      	ST	2(P1)
 6738/F6F9 : C1 01                      	LD	1(P1)
 6739/F6FB : F1 01                      	ADD	1(P1)
 6740/F6FD : C9 01                      	ST	1(P1)
 6741/F6FF : 90 94                      	JMP	FMOD1
 6742/F701 : E4 7F                      FMOD7:	XRI	0x7F
 6743/F703 : 9C 08                      	JNZ	FMOD8
 6744/F705 : C1 01                      	LD	1(P1)
 6745/F707 : 94 06                      	JP	FMOD9
 6746/F709 : D4 7F                      	ANI	0x7F
 6747/F70B : C9 01                      	ST	1(P1)
 6748/F70D : C1 01                      FMOD8:	LD	1(P1)
 6749/F70F : D4 C0                      FMOD9:	ANI	0xC0
 6750/F711 : 98 B9                      	JZ	FMOD4
 6751/F713 : 94 03                      	JP	FMOD10
 6752/F715 : (MACRO)                    	CALL	ALGN2
 6752/F715 : 3F                                  XPPC   P3
 6752/F716 : F1                                  DB     H(ALGN2)
 6752/F717 : E9                                  DB     L(ALGN2)
 6753/F718 : C2 EA                      FMOD10:	LD	-22(P2)
 6754/F71A : 97 D6                      	JP	SV_SPLOAD(P3)
 6755/F71C : (MACRO)                    	CALL	FNEG
 6755/F71C : 3F                                  XPPC   P3
 6755/F71D : F1                                  DB     H(FNEG)
 6755/F71E : AC                                  DB     L(FNEG)
 6756/F71F : 93 D6                      	JMP	SV_SPLOAD(P3)
 6757/F721 :                            
 6758/F721 :                            ; Push four bytes on STACK and swap with former topmost four bytes.
 6759/F721 : C5 FC                      PSHSWP:	LD	@-4(P1)			; reserve four bytes on STACK
 6760/F723 : C4 04                      	LDI	4
 6761/F725 : CA E9                      	ST	-23(P2)			; temporary counter
 6762/F727 : C5 01                      SWP1:	LD	@1(P1)			; get byte from STACK and increase
 6763/F729 : 01                         	XAE
 6764/F72A : C1 03                      	LD	3(P1)
 6765/F72C : C9 FF                      	ST	-1(P1)
 6766/F72E : 40                         	LDE
 6767/F72F : C9 03                      	ST	3(P1)
 6768/F731 : BA E9                      	DLD	-23(P2)			; decrease counter
 6769/F733 : 9C F2                      	JNZ	SWP1			; loop four times
 6770/F735 : C5 FC                      	LD	@-4(P1)			; reset STACK
 6771/F737 : 93 D6                      	JMP	SV_SPLOAD(P3)
 6772/F739 :                            
 6773/F739 :                            ; Number on AEXSTK represents fractional part of decimal number
 6774/F739 :                            ; and is transformed into the corresponding binary float.
 6775/F739 :                            ; NOTE: Pointer P1 is set to actual arithmetics stack.
 6776/F739 : C1 01                      FD10:	LD	1(P1)
 6777/F73B : 9B D6                      	JZ	SV_SPLOAD(P3)
 6778/F73D : C4 A0                      FD11:	LDI	0xA0
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 232 - 2024年05月30日 19時01分01秒


 6779/F73F : 01                         	XAE
 6780/F740 : C1 03                      	LD	3(P1)			
 6781/F742 : C9 FF                      	ST	-1(P1)
 6782/F744 : C1 02                      	LD	2(P1)
 6783/F746 : C9 FE                      	ST	-2(P1)
 6784/F748 : C1 01                      	LD	1(P1)
 6785/F74A : C9 FD                      	ST	-3(P1)			; topmost 3-byte number is copied downwards
 6786/F74C : C4 00                      	LDI	0
 6787/F74E : C9 03                      	ST	3(P1)			; topmost 3 bytes are set to zero..
 6788/F750 : C9 02                      	ST	2(P1)
 6789/F752 : C9 01                      	ST	1(P1)			; ..and used as mantissa
 6790/F754 : C4 18                      	LDI	0x18			; corresponding to 24 bit
 6791/F756 : C9 FC                      	ST	-4(P1)			; store as bit counter
 6792/F758 : 03                         FD12:	SCL
 6793/F759 : C1 FD                      	LD	-3(P1)
 6794/F75B : FC 50                      	CAI	0x50
 6795/F75D : 94 02                      	JP	FD13
 6796/F75F : 90 04                      	JMP	FD14
 6797/F761 : C9 FD                      FD13:	ST	-3(P1)
 6798/F763 : A9 03                      	ILD	3(P1)
 6799/F765 : B9 FC                      FD14:	DLD	-4(P1)			; decrease bit counter
 6800/F767 : 98 2A                      	JZ	FD15			; all bits processed ?
 6801/F769 : 02                         	CCL				; clear carry for addition
 6802/F76A :                            ; NOTE:	both mantissas are shifted left one bit (multiplied by 2)
 6803/F76A : 40                         	LDE
 6804/F76B : 70                         	ADE
 6805/F76C : 01                         	XAE
 6806/F76D : C1 FF                      	LD	-1(P1)
 6807/F76F : F1 FF                      	ADD	-1(P1)
 6808/F771 : C9 FF                      	ST	-1(P1)
 6809/F773 : C1 FE                      	LD	-2(P1)
 6810/F775 : F1 FE                      	ADD	-2(P1)
 6811/F777 : C9 FE                      	ST	-2(P1)
 6812/F779 : C1 FD                      	LD	-3(P1)
 6813/F77B : F1 FD                      	ADD	-3(P1)
 6814/F77D : C9 FD                      	ST	-3(P1)
 6815/F77F : C1 03                      	LD	3(P1)
 6816/F781 : F1 03                      	ADD	3(P1)
 6817/F783 : C9 03                      	ST	3(P1)
 6818/F785 : C1 02                      	LD	2(P1)
 6819/F787 : F1 02                      	ADD	2(P1)
 6820/F789 : C9 02                      	ST	2(P1)
 6821/F78B : C1 01                      	LD	1(P1)
 6822/F78D : F1 01                      	ADD	1(P1)
 6823/F78F : C9 01                      	ST	1(P1)
 6824/F791 : 90 C5                      	JMP	FD12
 6825/F793 :                            ; NOTE:	topmost mantissa is shifted right one bit (divided by 2)
 6826/F793 : C1 01                      FD15:	LD	1(P1)
 6827/F795 : 94 10                      	JP	FD16
 6828/F797 : 02                         	CCL
 6829/F798 : 1F                         	RRL
 6830/F799 : C9 01                      	ST	1(P1)
 6831/F79B : C1 02                      	LD	2(P1)
 6832/F79D : 1F                         	RRL
 6833/F79E : C9 02                      	ST	2(P1)
 6834/F7A0 : C1 03                      	LD	3(P1)
 6835/F7A2 : 1F                         	RRL
 6836/F7A3 : C9 03                      	ST	3(P1)
 6837/F7A5 : A9 00                      	ILD	(P1)
 6838/F7A7 : 03                         FD16:	SCL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 233 - 2024年05月30日 19時01分01秒


 6839/F7A8 : C1 00                      	LD	(P1)
 6840/F7AA : FC 04                      	CAI	4
 6841/F7AC : C9 00                      	ST	(P1)
 6842/F7AE : E4 80                      	XRI	0x80
 6843/F7B0 : 94 8B                      	JP	FD11
 6844/F7B2 : BA E8                      	DLD	-24(P2)			; take the digit count from TESTN routine
 6845/F7B4 : 94 87                      	JP	FD11			; process all digits
 6846/F7B6 : 93 D6                      	JMP	SV_SPLOAD(P3)		; we're done
 6847/F7B8 :                            
 6848/F7B8 :                            ; Build-in the number for the negative exponent to binary float.
 6849/F7B8 :                            ; Divide binary representation on AEXSTK by 10 and adjust exponent.
 6850/F7B8 : C2 FD                      FDIV11:	LD	AEXOFF(P2)
 6851/F7BA : 32                         	XPAL	P2
 6852/F7BB : C6 02                      	LD	@2(P2)			; load MSB of number, advance 2 bytes
 6853/F7BD : 9F 6B                      	JNZ	SV_VALERR(P3)		; exponent > 255 not valid	
 6854/F7BF : C2 01                      	LD	1(P2)
 6855/F7C1 : 98 7B                      	JZ	FDEND
 6856/F7C3 : 03                         FDIV12:	SCL
 6857/F7C4 : C2 00                      	LD	(P2)
 6858/F7C6 : FC 04                      	CAI	4
 6859/F7C8 : 01                         	XAE
 6860/F7C9 : C2 03                      	LD	3(P2)
 6861/F7CB : CA FE                      	ST	-2(P2)
 6862/F7CD : C2 02                      	LD	2(P2)
 6863/F7CF : CA FD                      	ST	-3(P2)
 6864/F7D1 : C2 01                      	LD	1(P2)
 6865/F7D3 : CA FC                      	ST	-4(P2)			; topmost 3-byte number is copied downwards
 6866/F7D5 : C4 00                      	LDI	0
 6867/F7D7 : CA 03                      	ST	3(P2)			; topmost 4 bytes are set to zero..
 6868/F7D9 : CA 02                      	ST	2(P2)
 6869/F7DB : CA 01                      	ST	1(P2)
 6870/F7DD : CA 00                      	ST	(P2)			; ..and used as mantissa with exponent
 6871/F7DF : 06                         	CSA
 6872/F7E0 : 94 5C                      	JP	FDEND
 6873/F7E2 : C4 A0                      	LDI	0xA0
 6874/F7E4 : 01                         	XAE
 6875/F7E5 : CA 00                      	ST	(P2)
 6876/F7E7 : C4 18                      	LDI	0x18			; corresponding to 24 bit
 6877/F7E9 : CA FB                      	ST	-5(P2)			; store as temporary counter
 6878/F7EB : 03                         FDIV13:	SCL
 6879/F7EC : C2 FC                      	LD	-4(P2)
 6880/F7EE : FC 50                      	CAI	0x50
 6881/F7F0 : 94 02                      	JP	FDIV14
 6882/F7F2 : 90 04                      	JMP	FDIV15
 6883/F7F4 : CA FC                      FDIV14:	ST	-4(P2)
 6884/F7F6 : AA 03                      	ILD	3(P2)
 6885/F7F8 : BA FB                      FDIV15:	DLD	-5(P2)			; decrease bit counter
 6886/F7FA : 98 2A                      	JZ	FDIV16			; all bits processed ?
 6887/F7FC : 02                         	CCL
 6888/F7FD : 40                         	LDE
 6889/F7FE : 70                         	ADE
 6890/F7FF : 01                         	XAE
 6891/F800 : C2 FE                      	LD	-2(P2)
 6892/F802 : F2 FE                      	ADD	-2(P2)
 6893/F804 : CA FE                      	ST	-2(P2)
 6894/F806 : C2 FD                      	LD	-3(P2)
 6895/F808 : F2 FD                      	ADD	-3(P2)
 6896/F80A : CA FD                      	ST	-3(P2)
 6897/F80C : C2 FC                      	LD	-4(P2)
 6898/F80E : F2 FC                      	ADD	-4(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 234 - 2024年05月30日 19時01分01秒


 6899/F810 : CA FC                      	ST	-4(P2)
 6900/F812 : C2 03                      	LD	3(P2)
 6901/F814 : F2 03                      	ADD	3(P2)
 6902/F816 : CA 03                      	ST	3(P2)
 6903/F818 : C2 02                      	LD	2(P2)
 6904/F81A : F2 02                      	ADD	2(P2)
 6905/F81C : CA 02                      	ST	2(P2)
 6906/F81E : C2 01                      	LD	1(P2)
 6907/F820 : F2 01                      	ADD	1(P2)
 6908/F822 : CA 01                      	ST	1(P2)
 6909/F824 : 90 C5                      	JMP	FDIV13
 6910/F826 : C2 01                      FDIV16:	LD	1(P2)
 6911/F828 : 94 10                      	JP	FDIV17
 6912/F82A : 02                         	CCL
 6913/F82B : 1F                         	RRL
 6914/F82C : CA 01                      	ST	1(P2)
 6915/F82E : C2 02                      	LD	2(P2)
 6916/F830 : 1F                         	RRL
 6917/F831 : CA 02                      	ST	2(P2)
 6918/F833 : C2 03                      	LD	3(P2)
 6919/F835 : 1F                         	RRL
 6920/F836 : CA 03                      	ST	3(P2)
 6921/F838 : AA 00                      	ILD	(P2)
 6922/F83A : BA FF                      FDIV17:	DLD	-1(P2)
 6923/F83C : 9C 85                      	JNZ	FDIV12
 6924/F83E : C4 80                      FDEND:	LDI	STKMID
 6925/F840 : 32                         	XPAL	P2
 6926/F841 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 6927/F843 : 93 5B                      	JMP	SV_RTFUNC(P3)
 6928/F845 :                            
 6929/F845 :                            ; Build-in the number for the positive exponent to binary float.
 6930/F845 :                            ; Multiply binary representation on AEXSTK by 10 and adjust exponent.
 6931/F845 : C2 FD                      FMUL11:	LD	AEXOFF(P2)
 6932/F847 : 32                         	XPAL	P2
 6933/F848 : C6 02                      	LD	@2(P2)			; load MSB of number, advance 2 bytes
 6934/F84A : 9F 6B                      	JNZ	SV_VALERR(P3)		; exponent > 255 not valid
 6935/F84C : C2 01                      	LD	1(P2)
 6936/F84E : 98 58                      	JZ	FMEND
 6937/F850 : 02                         FMUL12:	CCL
 6938/F851 : C2 01                      	LD	1(P2)
 6939/F853 : 1F                         	RRL
 6940/F854 : CA FC                      	ST	-4(P2)
 6941/F856 : C2 02                      	LD	2(P2)
 6942/F858 : 1F                         	RRL
 6943/F859 : CA FD                      	ST	-3(P2)
 6944/F85B : C2 03                      	LD	3(P2)
 6945/F85D : 1F                         	RRL
 6946/F85E : CA FE                      	ST	-2(P2)
 6947/F860 : 02                         	CCL
 6948/F861 : C2 FC                      	LD	-4(P2)
 6949/F863 : 1F                         	RRL
 6950/F864 : CA FC                      	ST	-4(P2)
 6951/F866 : C2 FD                      	LD	-3(P2)
 6952/F868 : 1F                         	RRL
 6953/F869 : CA FD                      	ST	-3(P2)
 6954/F86B : C2 FE                      	LD	-2(P2)
 6955/F86D : 1F                         	RRL
 6956/F86E : CA FE                      	ST	-2(P2)
 6957/F870 : C2 03                      	LD	3(P2)
 6958/F872 : F2 FE                      	ADD	-2(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 235 - 2024年05月30日 19時01分01秒


 6959/F874 : CA 03                      	ST	3(P2)
 6960/F876 : C2 02                      	LD	2(P2)
 6961/F878 : F2 FD                      	ADD	-3(P2)
 6962/F87A : CA 02                      	ST	2(P2)
 6963/F87C : C2 01                      	LD	1(P2)
 6964/F87E : F2 FC                      	ADD	-4(P2)
 6965/F880 : CA 01                      	ST	1(P2)
 6966/F882 : 94 12                      	JP	FMUL13
 6967/F884 : 02                         	CCL
 6968/F885 : 1F                         	RRL
 6969/F886 : CA 01                      	ST	1(P2)
 6970/F888 : C2 02                      	LD	2(P2)
 6971/F88A : 1F                         	RRL
 6972/F88B : CA 02                      	ST	2(P2)
 6973/F88D : C2 03                      	LD	3(P2)
 6974/F88F : 1F                         	RRL
 6975/F890 : CA 03                      	ST	3(P2)
 6976/F892 : AA 00                      	ILD	(P2)
 6977/F894 : 98 0A                      	JZ	FMUL14
 6978/F896 : 02                         FMUL13:	CCL
 6979/F897 : C2 00                      	LD	(P2)
 6980/F899 : F4 03                      	ADI	3
 6981/F89B : CA 00                      	ST	(P2)
 6982/F89D : 06                         	CSA
 6983/F89E : 94 04                      	JP	FMUL15
 6984/F8A0 : C4 C6                      FMUL14: LDI	(M_OVRF-M_BASE)		; 'OVERFLOW ERROR'
 6985/F8A2 : 93 27                      	JMP	SV_RTERRN(P3)
 6986/F8A4 : BA FF                      FMUL15:	DLD	-1(P2)
 6987/F8A6 : 9C A8                      	JNZ	FMUL12
 6988/F8A8 : C4 80                      FMEND:	LDI	STKMID
 6989/F8AA : 32                         	XPAL	P2
 6990/F8AB : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 6991/F8AD : 93 5B                      	JMP	SV_RTFUNC(P3)
 6992/F8AF :                            
 6993/F8AF :                            ; Calculate the trigonometric function arctangens by a Taylor series.
 6994/F8AF : C1 01                      ATN:	LD	1(P1)
 6995/F8B1 : 9B D6                      	JZ	SV_SPLOAD(P3)
 6996/F8B3 : CA E8                      	ST	-24(P2)
 6997/F8B5 : 94 03                      	JP	ATN1
 6998/F8B7 : (MACRO)                    	CALL	FNEG
 6998/F8B7 : 3F                                  XPPC   P3
 6998/F8B8 : F1                                  DB     H(FNEG)
 6998/F8B9 : AC                                  DB     L(FNEG)
 6999/F8BA : C1 00                      ATN1:	LD	(P1)
 7000/F8BC : CA EB                      	ST	COUNTR(P2)
 7001/F8BE : 94 1E                      	JP	ATN2
 7002/F8C0 : CD FC                      	ST	@-4(P1)
 7003/F8C2 : C1 05                      	LD	5(P1)
 7004/F8C4 : C9 01                      	ST	1(P1)
 7005/F8C6 : C1 06                      	LD	6(P1)
 7006/F8C8 : C9 02                      	ST	2(P1)
 7007/F8CA : C1 07                      	LD	7(P1)
 7008/F8CC : C9 03                      	ST	3(P1)
 7009/F8CE : C4 80                      	LDI	0x80
 7010/F8D0 : C9 04                      	ST	4(P1)
 7011/F8D2 : 1C                         	SR
 7012/F8D3 : C9 05                      	ST	5(P1)
 7013/F8D5 : C4 00                      	LDI	0
 7014/F8D7 : C9 06                      	ST	6(P1)
 7015/F8D9 : C9 07                      	ST	7(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 236 - 2024年05月30日 19時01分01秒


 7016/F8DB : (MACRO)                    	CALL	FDIV
 7016/F8DB : 3F                                  XPPC   P3
 7016/F8DC : F0                                  DB     H(FDIV)
 7016/F8DD : 78                                  DB     L(FDIV)
 7017/F8DE : C4 81                      ATN2:	LDI	0x81
 7018/F8E0 : C9 FF                      	ST	-1(P1)
 7019/F8E2 : C4 D5                      	LDI	0xD5
 7020/F8E4 : C9 FE                      	ST	-2(P1)
 7021/F8E6 : C4 6B                      	LDI	0x6B
 7022/F8E8 : C9 FD                      	ST	-3(P1)
 7023/F8EA : C4 7B                      	LDI	0x7B
 7024/F8EC : C9 FC                      	ST	-4(P1)			; 7B 6B D5 81 -> DCM 0.05265332
 7025/F8EE : C4 DD                      	LDI	0xDD
 7026/F8F0 : C9 FB                      	ST	-5(P1)
 7027/F8F2 : C4 FA                      	LDI	0xFA
 7028/F8F4 : C9 FA                      	ST	-6(P1)
 7029/F8F6 : C4 9F                      	LDI	0x9F
 7030/F8F8 : C9 F9                      	ST	-7(P1)
 7031/F8FA : C4 79                      	LDI	0x79
 7032/F8FC : C9 F8                      	ST	-8(P1)			; 79 9F FA DD -> DCM -0.0117212
 7033/F8FE : C1 03                      	LD	3(P1)
 7034/F900 : C9 F7                      	ST	-9(P1)
 7035/F902 : C9 F3                      	ST	-13(P1)
 7036/F904 : C1 02                      	LD	2(P1)
 7037/F906 : C9 F6                      	ST	-10(P1)
 7038/F908 : C9 F2                      	ST	-14(P1)
 7039/F90A : C1 01                      	LD	1(P1)
 7040/F90C : C9 F5                      	ST	-11(P1)
 7041/F90E : C9 F1                      	ST	-15(P1)
 7042/F910 : C1 00                      	LD	(P1)
 7043/F912 : C9 F4                      	ST	-12(P1)
 7044/F914 : CD F0                      	ST	@-16(P1)
 7045/F916 : (MACRO)                    	CALL	FMUL
 7045/F916 : 3F                                  XPPC   P3
 7045/F917 : F0                                  DB     H(FMUL)
 7045/F918 : E3                                  DB     L(FMUL)
 7046/F919 : (MACRO)                    	CALL	FMUL
 7046/F919 : 3F                                  XPPC   P3
 7046/F91A : F0                                  DB     H(FMUL)
 7046/F91B : E3                                  DB     L(FMUL)
 7047/F91C : (MACRO)                    	CALL	FADD
 7047/F91C : 3F                                  XPPC   P3
 7047/F91D : F1                                  DB     H(FADD)
 7047/F91E : 3C                                  DB     L(FADD)
 7048/F91F : C4 D2                      	LDI	0xD2
 7049/F921 : C9 FF                      	ST	-1(P1)
 7050/F923 : C4 C5                      	LDI	0xC5
 7051/F925 : C9 FE                      	ST	-2(P1)
 7052/F927 : C4 88                      	LDI	0x88
 7053/F929 : C9 FD                      	ST	-3(P1)
 7054/F92B : C4 7C                      	LDI	0x7C
 7055/F92D : CD FC                      	ST	@-4(P1)
 7056/F92F : (MACRO)                    	CALL	SWPMUL
 7056/F92F : 3F                                  XPPC   P3
 7056/F930 : F9                                  DB     H(SWPMUL)
 7056/F931 : 82                                  DB     L(SWPMUL)
 7057/F932 : C4 21                      	LDI	0x21
 7058/F934 : C9 FF                      	ST	-1(P1)
 7059/F936 : C4 18                      	LDI	0x18
 7060/F938 : C9 FE                      	ST	-2(P1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 237 - 2024年05月30日 19時01分01秒


 7061/F93A : C4 63                      	LDI	0x63
 7062/F93C : C9 FD                      	ST	-3(P1)
 7063/F93E : C4 7D                      	LDI	0x7D
 7064/F940 : CD FC                      	ST	@-4(P1)			; 7D 63 18 21 -> DCM 0.1935435
 7065/F942 : (MACRO)                    	CALL	SWPMUL
 7065/F942 : 3F                                  XPPC   P3
 7065/F943 : F9                                  DB     H(SWPMUL)
 7065/F944 : 82                                  DB     L(SWPMUL)
 7066/F945 : C4 30                      	LDI	0x30
 7067/F947 : C9 FF                      	ST	-1(P1)
 7068/F949 : C4 D9                      	LDI	0xD9
 7069/F94B : C9 FE                      	ST	-2(P1)
 7070/F94D : C4 AA                      	LDI	0xAA
 7071/F94F : C9 FD                      	ST	-3(P1)
 7072/F951 : C4 7E                      	LDI	0x7E
 7073/F953 : CD FC                      	ST	@-4(P1)			; 7E AA D9 30 -> DCM -0.3326235
 7074/F955 : (MACRO)                    	CALL	SWPMUL
 7074/F955 : 3F                                  XPPC   P3
 7074/F956 : F9                                  DB     H(SWPMUL)
 7074/F957 : 82                                  DB     L(SWPMUL)
 7075/F958 : C4 41                      	LDI	0x41
 7076/F95A : C9 FF                      	ST	-1(P1)
 7077/F95C : C4 FF                      	LDI	0xFF
 7078/F95E : C9 FE                      	ST	-2(P1)
 7079/F960 : C4 7F                      	LDI	0x7F
 7080/F962 : C9 FD                      	ST	-3(P1)			; 7F 7F FF 41 -> DCM 0.9999772
 7081/F964 : CD FC                      	ST	@-4(P1)
 7082/F966 : (MACRO)                    	CALL	SWPMUL
 7082/F966 : 3F                                  XPPC   P3
 7082/F967 : F9                                  DB     H(SWPMUL)
 7082/F968 : 82                                  DB     L(SWPMUL)
 7083/F969 : (MACRO)                    	CALL	FMUL
 7083/F969 : 3F                                  XPPC   P3
 7083/F96A : F0                                  DB     H(FMUL)
 7083/F96B : E3                                  DB     L(FMUL)
 7084/F96C : C2 EB                      	LD	COUNTR(P2)
 7085/F96E : 94 09                      	JP	ATN3
 7086/F970 : (MACRO)                    	CALL	PI2
 7086/F970 : 3F                                  XPPC   P3
 7086/F971 : F9                                  DB     H(PI2)
 7086/F972 : A0                                  DB     L(PI2)
 7087/F973 : (MACRO)                    	CALL	SWAP
 7087/F973 : 3F                                  XPPC   P3
 7087/F974 : F0                                  DB     H(SWAP)
 7087/F975 : 35                                  DB     L(SWAP)
 7088/F976 : (MACRO)                    	CALL	FSUB
 7088/F976 : 3F                                  XPPC   P3
 7088/F977 : F1                                  DB     H(FSUB)
 7088/F978 : 39                                  DB     L(FSUB)
 7089/F979 : C2 E8                      ATN3:	LD	-24(P2)
 7090/F97B : 97 D6                      	JP	SV_SPLOAD(P3)
 7091/F97D : (MACRO)                    	CALL	FNEG
 7091/F97D : 3F                                  XPPC   P3
 7091/F97E : F1                                  DB     H(FNEG)
 7091/F97F : AC                                  DB     L(FNEG)
 7092/F980 : 93 D6                      	JMP	SV_SPLOAD(P3)
 7093/F982 :                            
 7094/F982 :                            ; Bytewise swap topmost two floating point numbers,
 7095/F982 :                            ; multiply and add.
 7096/F982 : C4 04                      SWPMUL:	LDI	4
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 238 - 2024年05月30日 19時01分01秒


 7097/F984 : CA E9                      	ST	-23(P2)			; store as byte counter
 7098/F986 : C5 01                      SWPM:	LD	@1(P1)			; get byte from STACK and increase
 7099/F988 : C9 F7                      	ST	-9(P1)
 7100/F98A : C1 03                      	LD	3(P1)
 7101/F98C : C9 FF                      	ST	-1(P1)
 7102/F98E : C1 F7                      	LD	-9(P1)
 7103/F990 : C9 03                      	ST	3(P1)
 7104/F992 : BA E9                      	DLD	-23(P2)
 7105/F994 : 9C F0                      	JNZ	SWPM
 7106/F996 : C5 F8                      	LD	@-8(P1)
 7107/F998 : (MACRO)                    	CALL	FMUL
 7107/F998 : 3F                                  XPPC   P3
 7107/F999 : F0                                  DB     H(FMUL)
 7107/F99A : E3                                  DB     L(FMUL)
 7108/F99B : (MACRO)                    	CALL	FADD
 7108/F99B : 3F                                  XPPC   P3
 7108/F99C : F1                                  DB     H(FADD)
 7108/F99D : 3C                                  DB     L(FADD)
 7109/F99E : (MACRO)                    	RTRN
 7109/F99E : 3F                                  XPPC   P3
 7109/F99F : 00                                  DB     0
 7110/F9A0 :                            
 7111/F9A0 :                            ; Put half of circle number PI (90 degrees) onto STACK.
 7112/F9A0 : C4 ED                      PI2:	LDI	0xED
 7113/F9A2 : CD FF                      	ST	@-1(P1)
 7114/F9A4 : C4 87                      	LDI	0x87
 7115/F9A6 : CD FF                      	ST	@-1(P1)
 7116/F9A8 : C4 64                      	LDI	0x64
 7117/F9AA : CD FF                      	ST	@-1(P1)
 7118/F9AC : C4 80                      	LDI	0x80
 7119/F9AE : CD FF                      	ST	@-1(P1)
 7120/F9B0 : (MACRO)                    	RTRN
 7120/F9B0 : 3F                                  XPPC   P3
 7120/F9B1 : 00                                  DB     0
 7121/F9B2 :                            
 7122/F9B2 :                            ; Calculate the trigonometric functions tangens and sinus by Taylor series.
 7123/F9B2 : C1 03                      TAN:	LD	3(P1)
 7124/F9B4 : C9 FF                      	ST	-1(P1)
 7125/F9B6 : C1 02                      	LD	2(P1)
 7126/F9B8 : C9 FE                      	ST	-2(P1)
 7127/F9BA : C1 01                      	LD	1(P1)
 7128/F9BC : C9 FD                      	ST	-3(P1)
 7129/F9BE : C1 00                      	LD	(P1)
 7130/F9C0 : CD FC                      	ST	@-4(P1)
 7131/F9C2 : C1 01                      SIN:	LD	1(P1)
 7132/F9C4 : 9B D6                      	JZ	SV_SPLOAD(P3)
 7133/F9C6 : CA E8                      	ST	-24(P2)
 7134/F9C8 : 94 03                      	JP	SIN1
 7135/F9CA : (MACRO)                    	CALL	FNEG
 7135/F9CA : 3F                                  XPPC   P3
 7135/F9CB : F1                                  DB     H(FNEG)
 7135/F9CC : AC                                  DB     L(FNEG)
 7136/F9CD : C4 EC                      SIN1:	LDI	0xEC
 7137/F9CF : C9 FF                      	ST	-1(P1)
 7138/F9D1 : C4 87                      	LDI	0x87
 7139/F9D3 : C9 FE                      	ST	-2(P1)
 7140/F9D5 : C4 64                      	LDI	0x64
 7141/F9D7 : C9 FD                      	ST	-3(P1)
 7142/F9D9 : C4 80                      	LDI	0x80
 7143/F9DB : CD FC                      	ST	@-4(P1)			; 80 64 87 EC -> DCM 
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 239 - 2024年05月30日 19時01分01秒


 7144/F9DD : (MACRO)                    	CALL	FDIV
 7144/F9DD : 3F                                  XPPC   P3
 7144/F9DE : F0                                  DB     H(FDIV)
 7144/F9DF : 78                                  DB     L(FDIV)
 7145/F9E0 : C1 00                      	LD	(P1)
 7146/F9E2 : 94 2A                      	JP	SIN4
 7147/F9E4 : C1 03                      	LD	3(P1)
 7148/F9E6 : D4 FE                      	ANI	0xFE
 7149/F9E8 : C9 03                      	ST	3(P1)
 7150/F9EA : 02                         SIN2:	CCL
 7151/F9EB : C1 03                      	LD	3(P1)
 7152/F9ED : F1 03                      	ADD	3(P1)
 7153/F9EF : C9 03                      	ST	3(P1)
 7154/F9F1 : C1 02                      	LD	2(P1)
 7155/F9F3 : F1 02                      	ADD	2(P1)
 7156/F9F5 : C9 02                      	ST	2(P1)
 7157/F9F7 : C1 01                      	LD	1(P1)
 7158/F9F9 : F1 01                      	ADD	1(P1)
 7159/F9FB : C9 01                      	ST	1(P1)
 7160/F9FD : B9 00                      	DLD	(P1)
 7161/F9FF : E4 7F                      	XRI	0x7F
 7162/FA01 : 9C E7                      	JNZ	SIN2
 7163/FA03 : 06                         	CSA
 7164/FA04 : E1 01                      	XOR	1(P1)
 7165/FA06 : (MACRO)                    	CALL	NORM
 7165/FA06 : 3F                                  XPPC   P3
 7165/FA07 : F1                                  DB     H(NORM)
 7165/FA08 : C4                                  DB     L(NORM)
 7166/FA09 : 94 03                      	JP	SIN4
 7167/FA0B : (MACRO)                    	CALL	FNEG
 7167/FA0B : 3F                                  XPPC   P3
 7167/FA0C : F1                                  DB     H(FNEG)
 7167/FA0D : AC                                  DB     L(FNEG)
 7168/FA0E : 03                         SIN4:	SCL
 7169/FA0F : C1 00                      	LD	(P1)
 7170/FA11 : FC 76                      	CAI	0x76
 7171/FA13 : 94 07                      	JP	SIN5
 7172/FA15 : C5 FC                      	LD	@-4(P1)
 7173/FA17 : (MACRO)                    	CALL	FMUL
 7173/FA17 : 3F                                  XPPC   P3
 7173/FA18 : F0                                  DB     H(FMUL)
 7173/FA19 : E3                                  DB     L(FMUL)
 7174/FA1A : 90 7B                      	JMP	SIN7
 7175/FA1C : FC 0A                      SIN5:	CAI	10
 7176/FA1E : 98 77                      	JZ	SIN7
 7177/FA20 : F4 01                      	ADI	1
 7178/FA22 : 9C 09                      	JNZ	SIN6
 7179/FA24 : 1D                         	SRL
 7180/FA25 : E1 01                      	XOR	1(P1)
 7181/FA27 : D9 02                      	OR	2(P1)
 7182/FA29 : D9 03                      	OR	3(P1)
 7183/FA2B : 98 6A                      	JZ	SIN7
 7184/FA2D : C4 37                      SIN6:	LDI	0x37
 7185/FA2F : C9 FF                      	ST	-1(P1)
 7186/FA31 : C4 65                      	LDI	0x65
 7187/FA33 : C9 FE                      	ST	-2(P1)
 7188/FA35 : C4 51                      	LDI	0x51
 7189/FA37 : C9 FD                      	ST	-3(P1)
 7190/FA39 : C4 7C                      	LDI	0x7C
 7191/FA3B : C9 FC                      	ST	-4(P1)			; 7C 51 65 37 -> DCM 
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 240 - 2024年05月30日 19時01分01秒


 7192/FA3D : C4 73                      	LDI	0x73
 7193/FA3F : C9 FB                      	ST	-5(P1)
 7194/FA41 : C4 86                      	LDI	0x86
 7195/FA43 : C9 FA                      	ST	-6(P1)
 7196/FA45 : C4 B8                      	LDI	0xB8
 7197/FA47 : C9 F9                      	ST	-7(P1)
 7198/FA49 : C4 78                      	LDI	0x78
 7199/FA4B : C9 F8                      	ST	-8(P1)			; 78 B8 86 73 -> DCM 
 7200/FA4D : C1 03                      	LD	3(P1)
 7201/FA4F : C9 F7                      	ST	-9(P1)
 7202/FA51 : C9 F3                      	ST	-13(P1)
 7203/FA53 : C1 02                      	LD	2(P1)
 7204/FA55 : C9 F6                      	ST	-10(P1)
 7205/FA57 : C9 F2                      	ST	-14(P1)
 7206/FA59 : C1 01                      	LD	1(P1)
 7207/FA5B : C9 F5                      	ST	-11(P1)
 7208/FA5D : C9 F1                      	ST	-15(P1)
 7209/FA5F : C1 00                      	LD	(P1)
 7210/FA61 : C9 F4                      	ST	-12(P1)
 7211/FA63 : CD F0                      	ST	@-16(P1)
 7212/FA65 : (MACRO)                    	CALL	FMUL
 7212/FA65 : 3F                                  XPPC   P3
 7212/FA66 : F0                                  DB     H(FMUL)
 7212/FA67 : E3                                  DB     L(FMUL)
 7213/FA68 : (MACRO)                    	CALL	FMUL
 7213/FA68 : 3F                                  XPPC   P3
 7213/FA69 : F0                                  DB     H(FMUL)
 7213/FA6A : E3                                  DB     L(FMUL)
 7214/FA6B : (MACRO)                    	CALL	FADD
 7214/FA6B : 3F                                  XPPC   P3
 7214/FA6C : F1                                  DB     H(FADD)
 7214/FA6D : 3C                                  DB     L(FADD)
 7215/FA6E : C4 76                      	LDI	0x76
 7216/FA70 : C9 FF                      	ST	-1(P1)
 7217/FA72 : C4 52                      	LDI	0x52
 7218/FA74 : C9 FE                      	ST	-2(P1)
 7219/FA76 : C4 AD                      	LDI	0xAD
 7220/FA78 : C9 FD                      	ST	-3(P1)
 7221/FA7A : C4 7F                      	LDI	0x7F
 7222/FA7C : CD FC                      	ST	@-4(P1)			; 7F AD 52 76 -> DCM 
 7223/FA7E : (MACRO)                    	CALL	SWPMUL
 7223/FA7E : 3F                                  XPPC   P3
 7223/FA7F : F9                                  DB     H(SWPMUL)
 7223/FA80 : 82                                  DB     L(SWPMUL)
 7224/FA81 : C4 E7                      	LDI	0xE7
 7225/FA83 : C9 FF                      	ST	-1(P1)
 7226/FA85 : C4 87                      	LDI	0x87
 7227/FA87 : C9 FE                      	ST	-2(P1)
 7228/FA89 : C4 64                      	LDI	0x64
 7229/FA8B : C9 FD                      	ST	-3(P1)
 7230/FA8D : C4 80                      	LDI	0x80
 7231/FA8F : CD FC                      	ST	@-4(P1)			; 80 64 87 E7 -> DCM 
 7232/FA91 : (MACRO)                    	CALL	SWPMUL
 7232/FA91 : 3F                                  XPPC   P3
 7232/FA92 : F9                                  DB     H(SWPMUL)
 7232/FA93 : 82                                  DB     L(SWPMUL)
 7233/FA94 : (MACRO)                    	CALL	FMUL
 7233/FA94 : 3F                                  XPPC   P3
 7233/FA95 : F0                                  DB     H(FMUL)
 7233/FA96 : E3                                  DB     L(FMUL)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 241 - 2024年05月30日 19時01分01秒


 7234/FA97 : C2 E8                      SIN7:	LD	-24(P2)
 7235/FA99 : 97 D6                      	JP	SV_SPLOAD(P3)
 7236/FA9B : (MACRO)                    	CALL	FNEG
 7236/FA9B : 3F                                  XPPC   P3
 7236/FA9C : F1                                  DB     H(FNEG)
 7236/FA9D : AC                                  DB     L(FNEG)
 7237/FA9E : 93 D6                      	JMP	SV_SPLOAD(P3)
 7238/FAA0 :                            
 7239/FAA0 :                            ; Put circle number PI onto arithmetics stack.
 7240/FAA0 : C2 FD                      PI:	LD	AEXOFF(P2)
 7241/FAA2 : 32                         	XPAL	P2
 7242/FAA3 : C4 ED                      	LDI	0xED
 7243/FAA5 : CE FF                      	ST	@-1(P2)
 7244/FAA7 : C4 87                      	LDI	0x87
 7245/FAA9 : CE FF                      	ST	@-1(P2)
 7246/FAAB : C4 64                      	LDI	0x64
 7247/FAAD : CE FF                      	ST	@-1(P2)
 7248/FAAF : C4 81                      	LDI	0x81
 7249/FAB1 : CE FF                      	ST	@-1(P2)
 7250/FAB3 : C4 80                      	LDI	STKMID
 7251/FAB5 : 32                         	XPAL	P2
 7252/FAB6 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 7253/FAB8 : 93 5B                      	JMP	SV_RTFUNC(P3)
 7254/FABA :                            
 7255/FABA :                            ; Put ten ( 10 ) as 16-bit number onto arithmetics stack.
 7256/FABA : C2 FD                      TEN:	LD	AEXOFF(P2)
 7257/FABC : 32                         	XPAL	P2
 7258/FABD : C4 0A                      	LDI	L(10)
 7259/FABF : CE FF                      	ST	@-1(P2)
 7260/FAC1 : C4 00                      	LDI	H(10)
 7261/FAC3 : CE FF                      	ST	@-1(P2)
 7262/FAC5 : C4 80                      	LDI	STKMID
 7263/FAC7 : 32                         	XPAL	P2
 7264/FAC8 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 7265/FACA : 93 D6                      	JMP	SV_SPLOAD(P3)
 7266/FACC :                            
 7267/FACC :                            ; Calculate a float random number from 0..1 and put it onto STACK.
 7268/FACC : C4 08                      RND:	LDI	8
 7269/FACE : CA E9                      	ST	-23(P2)
 7270/FAD0 : C2 E4                      	LD	RNDY(P2)
 7271/FAD2 : CD FF                      	ST	@-1(P1)
 7272/FAD4 : C2 E5                      	LD	RNDX(P2)
 7273/FAD6 : CD FF                      	ST	@-1(P1)
 7274/FAD8 : C2 E6                      	LD	RNDF(P2)
 7275/FADA : 01                         	XAE
 7276/FADB : 02                         RND1:	CCL
 7277/FADC : C2 E4                      	LD	RNDY(P2)
 7278/FADE : F1 01                      	ADD	1(P1)
 7279/FAE0 : CA E4                      	ST	RNDY(P2)
 7280/FAE2 : 02                         	CCL
 7281/FAE3 : C2 E5                      	LD	RNDX(P2)
 7282/FAE5 : F1 00                      	ADD	(P1)
 7283/FAE7 : CA E5                      	ST	RNDX(P2)
 7284/FAE9 : 02                         	CCL
 7285/FAEA : C2 E6                      	LD	RNDF(P2)
 7286/FAEC : 70                         	ADE
 7287/FAED : 01                         	XAE
 7288/FAEE : BA E9                      	DLD	-23(P2)
 7289/FAF0 : 9C E9                      	JNZ	RND1
 7290/FAF2 : 02                         	CCL
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 242 - 2024年05月30日 19時01分01秒


 7291/FAF3 : C2 E4                      	LD	RNDY(P2)
 7292/FAF5 : F4 07                      	ADI	7
 7293/FAF7 : 1E                         	RR
 7294/FAF8 : CA E4                      	ST	RNDY(P2)
 7295/FAFA : C9 01                      	ST	1(P1)
 7296/FAFC : 02                         	CCL
 7297/FAFD : C2 E5                      	LD	RNDX(P2)
 7298/FAFF : F4 07                      	ADI	7
 7299/FB01 : 1E                         	RR
 7300/FB02 : CA E5                      	ST	RNDX(P2)
 7301/FB04 : C9 00                      	ST	(P1)
 7302/FB06 : 02                         	CCL
 7303/FB07 : 40                         	LDE
 7304/FB08 : F4 07                      	ADI	7
 7305/FB0A : 01                         	XAE
 7306/FB0B : AA A0                      	ILD	-96(P2)
 7307/FB0D : 98 03                      	JZ	RND2
 7308/FB0F : 40                         	LDE
 7309/FB10 : CA E6                      	ST	RNDF(P2)
 7310/FB12 : C2 E6                      RND2:	LD	RNDF(P2)
 7311/FB14 : E4 FF                      	XRI	0xFF
 7312/FB16 : D4 7F                      	ANI	0x7F
 7313/FB18 : CD FF                      	ST	@-1(P1)
 7314/FB1A : C4 7F                      	LDI	0x7F
 7315/FB1C : CD FF                      	ST	@-1(P1)
 7316/FB1E : 93 D6                      	JMP	SV_SPLOAD(P3)
 7317/FB20 :                            
 7318/FB20 :                            ; Depending on the sign put +1, 0 or -1 onto STACK.
 7319/FB20 : C2 FD                      SGN:	LD	AEXOFF(P2)
 7320/FB22 : 32                         	XPAL	P2
 7321/FB23 : 01                         	XAE				; E holds STKMID
 7322/FB24 : C2 01                      	LD	1(P2)
 7323/FB26 : 98 17                      	JZ	SGN3			; SGN(0) is 0 so return
 7324/FB28 : 94 09                      	JP	SGN1			; is mantissa positive ?
 7325/FB2A : C4 7F                      	LDI	0x7F			; prepare exp and MSB of -1
 7326/FB2C : CA 00                      	ST	(P2)
 7327/FB2E : 40                         	LDE
 7328/FB2F : CA 01                      	ST	1(P2)
 7329/FB31 : 90 06                      	JMP	SGN2
 7330/FB33 : 40                         SGN1:	LDE				; prepare exp and MSB of +1
 7331/FB34 : CA 00                      	ST	(P2)
 7332/FB36 : 1C                         	SR
 7333/FB37 : CA 01                      	ST	1(P2)
 7334/FB39 : C4 00                      SGN2:	LDI	0			; complete mantissa with zeros
 7335/FB3B : CA 02                      	ST	2(P2)
 7336/FB3D : CA 03                      	ST	3(P2)
 7337/FB3F : 40                         SGN3:	LDE
 7338/FB40 : 32                         	XPAL	P2
 7339/FB41 : 93 5B                      	JMP	SV_RTFUNC(P3)
 7340/FB43 :                            
 7341/FB43 :                            ; Calculate square root of (positive) number S following Heron's method.
 7342/FB43 :                            ; Iterate over (xi + S / xi) / 2
 7343/FB43 : C1 01                      SQRT:	LD	1(P1)			; load first byte of mantissa
 7344/FB45 : 94 04                      	JP	SQRT1			; go, valid number
 7345/FB47 : C4 88                      	LDI	(M_ARG-M_BASE)		; 'ARGUMENT ERROR', cannot be negative
 7346/FB49 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7347/FB4B : C9 FD                      SQRT1:	ST	-3(P1)			; test mantissa for zero
 7348/FB4D : D9 02                      	OR	2(P1)
 7349/FB4F : D9 03                      	OR	3(P1)
 7350/FB51 : 9B D6                      	JZ	SV_SPLOAD(P3)		; sqrt(0) is 0, we're done
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 243 - 2024年05月30日 19時01分01秒


 7351/FB53 : C1 03                      	LD	3(P1)
 7352/FB55 : C9 FF                      	ST	-1(P1)
 7353/FB57 : C1 02                      	LD	2(P1)
 7354/FB59 : C9 FE                      	ST	-2(P1)
 7355/FB5B : C1 00                      	LD	(P1)
 7356/FB5D : CD FC                      	ST	@-4(P1)			; argument is copied downwards
 7357/FB5F :                            ; NOTE: arithmetics stack was adjusted by four down
 7358/FB5F : C4 00                      	LDI	0
 7359/FB61 : CD FF                      	ST	@-1(P1)
 7360/FB63 : CD FF                      	ST	@-1(P1)
 7361/FB65 : C4 40                      	LDI	0x40
 7362/FB67 : CD FF                      	ST	@-1(P1)			; 7F 40 00 00 -> DCM 0.5
 7363/FB69 : 02                         	CCL
 7364/FB6A : C1 03                      	LD	3(P1)
 7365/FB6C : 94 01                      	JP	SQRT2
 7366/FB6E : 03                         	SCL
 7367/FB6F : 1D                         SQRT2:	SRL				; shift right (divide by 2)
 7368/FB70 : E4 40                      	XRI	0x40
 7369/FB72 : CD FF                      	ST	@-1(P1)
 7370/FB74 : (MACRO)                    	CALL	FDIV
 7370/FB74 : 3F                                  XPPC   P3
 7370/FB75 : F0                                  DB     H(FDIV)
 7370/FB76 : 78                                  DB     L(FDIV)
 7371/FB77 : C4 04                      	LDI	4
 7372/FB79 : CA E8                      	ST	-24(P2)			; temporary counter
 7373/FB7B : C1 03                      SQRT3:	LD	3(P1)
 7374/FB7D : C9 FF                      	ST	-1(P1)
 7375/FB7F : C1 02                      	LD	2(P1)
 7376/FB81 : C9 FE                      	ST	-2(P1)
 7377/FB83 : C1 01                      	LD	1(P1)
 7378/FB85 : C9 FD                      	ST	-3(P1)
 7379/FB87 : C1 00                      	LD	(P1)
 7380/FB89 : CD FC                      	ST	@-4(P1)			; adjust arithmetics stack by four down
 7381/FB8B : C1 0B                      	LD	11(P1)
 7382/FB8D : C9 07                      	ST	7(P1)
 7383/FB8F : C1 0A                      	LD	10(P1)
 7384/FB91 : C9 06                      	ST	6(P1)
 7385/FB93 : C1 09                      	LD	9(P1)
 7386/FB95 : C9 05                      	ST	5(P1)
 7387/FB97 : C1 08                      	LD	8(P1)
 7388/FB99 : C9 04                      	ST	4(P1)
 7389/FB9B : (MACRO)                    	CALL	FDIV
 7389/FB9B : 3F                                  XPPC   P3
 7389/FB9C : F0                                  DB     H(FDIV)
 7389/FB9D : 78                                  DB     L(FDIV)
 7390/FB9E : C5 FC                      	LD	@-4(P1)
 7391/FBA0 : (MACRO)                    	CALL	FADD
 7391/FBA0 : 3F                                  XPPC   P3
 7391/FBA1 : F1                                  DB     H(FADD)
 7391/FBA2 : 3C                                  DB     L(FADD)
 7392/FBA3 : B9 00                      	DLD	(P1)
 7393/FBA5 : BA E8                      	DLD	-24(P2)			; decrease counter
 7394/FBA7 : 9C D2                      	JNZ	SQRT3			; do four loops
 7395/FBA9 : C1 03                      	LD	3(P1)
 7396/FBAB : C9 07                      	ST	7(P1)
 7397/FBAD : C1 02                      	LD	2(P1)
 7398/FBAF : C9 06                      	ST	6(P1)
 7399/FBB1 : C1 01                      	LD	1(P1)
 7400/FBB3 : C9 05                      	ST	5(P1)
 7401/FBB5 : C5 04                      	LD	@4(P1)			; re-adjust arithmetics stack
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 244 - 2024年05月30日 19時01分01秒


 7402/FBB7 : C9 00                      	ST	(P1)
 7403/FBB9 : 93 D6                      	JMP	SV_SPLOAD(P3)
 7404/FBBB :                            
 7405/FBBB :                            ; Final action to perform VAL() function.
 7406/FBBB :                            ; Pull pointer P1 from top of arithmetics stack as begin of string
 7407/FBBB :                            ;  and resave on normal STACK -16,15 to be used by RNUM.
 7408/FBBB : AA FD                      VALSTR:	ILD	AEXOFF(P2)		; adjust AEXSTK by two up
 7409/FBBD : AA FD                      	ILD	AEXOFF(P2)
 7410/FBBF : 32                         	XPAL	P2
 7411/FBC0 : C2 FF                      	LD	-1(P2)
 7412/FBC2 : 31                         	XPAL	P1
 7413/FBC3 : 01                         	XAE
 7414/FBC4 : C2 FE                      	LD	-2(P2)
 7415/FBC6 : 35                         	XPAH	P1
 7416/FBC7 : 32                         	XPAL	P2
 7417/FBC8 : C4 80                      	LDI	STKMID
 7418/FBCA : 32                         	XPAL	P2
 7419/FBCB : CA F0                      	ST	-16(P2)
 7420/FBCD : 40                         	LDE
 7421/FBCE : CA F1                      	ST	-15(P2)			; store begin of string in STACK -16,-15
 7422/FBD0 : 93 D6                      	JMP	SV_SPLOAD(P3)
 7423/FBD2 :                            
 7424/FBD2 :                            ; Convert 16-bit integer into 4-byte float.
 7425/FBD2 : C2 FD                      FLOAT2:	LD	AEXOFF(P2)
 7426/FBD4 : 32                         	XPAL	P2
 7427/FBD5 : C2 00                      	LD	(P2)
 7428/FBD7 : CA FF                      	ST	-1(P2)
 7429/FBD9 : C2 01                      	LD	1(P2)
 7430/FBDB : CA 00                      	ST	(P2)
 7431/FBDD : C4 00                      	LDI	0
 7432/FBDF : CA 01                      	ST	1(P2)
 7433/FBE1 : C4 8E                      	LDI	0x8E			; load +14 as exponent
 7434/FBE3 : CE FE                      	ST	@-2(P2)			; adjust two byte down and store exp
 7435/FBE5 : C2 01                      FNORM:	LD	1(P2)
 7436/FBE7 : F2 01                      	ADD	1(P2)
 7437/FBE9 : E2 01                      	XOR	1(P2)
 7438/FBEB : 94 07                      	JP	FNORM1			; go, normalize number
 7439/FBED : C4 80                      FLEND:	LDI	STKMID			; reset pointer P2
 7440/FBEF : 32                         	XPAL	P2
 7441/FBF0 : CA FD                      	ST	AEXOFF(P2)		; store last offset to AEXSTK
 7442/FBF2 : 93 5B                      	JMP	SV_RTFUNC(P3)		; return
 7443/FBF4 : C2 00                      FNORM1:	LD	(P2)			; normalize floating point number
 7444/FBF6 : 98 F5                      	JZ	FLEND
 7445/FBF8 : BA 00                      	DLD	(P2)			; decrease exponent..
 7446/FBFA : 02                         	CCL				; ..and shift mantissa one bit left
 7447/FBFB : C2 03                      	LD	3(P2)
 7448/FBFD : F2 03                      	ADD	3(P2)
 7449/FBFF : CA 03                      	ST	3(P2)
 7450/FC01 : C2 02                      	LD	2(P2)
 7451/FC03 : F2 02                      	ADD	2(P2)
 7452/FC05 : CA 02                      	ST	2(P2)
 7453/FC07 : C2 01                      	LD	1(P2)
 7454/FC09 : F2 01                      	ADD	1(P2)
 7455/FC0B : CA 01                      	ST	1(P2)
 7456/FC0D : 90 D6                      	JMP	FNORM
 7457/FC0F :                            
 7458/FC0F : 98 04                      LODVAR:	JZ	LOD1
 7459/FC11 : C4 F0                      	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
 7460/FC13 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7461/FC15 : C5 01                      LOD1:	LD	@1(P1)			; get byte from program and increase
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 245 - 2024年05月30日 19時01分01秒


 7462/FC17 : E4 28                      	XRI	'('
 7463/FC19 : 98 06                      	JZ	LOD2
 7464/FC1B : C5 FF                      	LD	@-1(P1)
 7465/FC1D : C4 D7                      	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
 7466/FC1F : 93 B4                      	JMP	SV_MSGOUT(P3)
 7467/FC21 : C2 FD                      LOD2:	LD	AEXOFF(P2)
 7468/FC23 : 32                         	XPAL	P2
 7469/FC24 : C2 01                      	LD	1(P2)
 7470/FC26 : 31                         	XPAL	P1
 7471/FC27 : CA FB                      	ST	-5(P2)
 7472/FC29 : C2 00                      	LD	(P2)
 7473/FC2B : 35                         	XPAH	P1
 7474/FC2C : CA FA                      	ST	FOROFF(P2)
 7475/FC2E : C1 04                      	LD	4(P1)
 7476/FC30 : CE FF                      	ST	@-1(P2)
 7477/FC32 : C1 03                      	LD	3(P1)
 7478/FC34 : CE FF                      	ST	@-1(P2)
 7479/FC36 : C1 02                      	LD	2(P1)
 7480/FC38 : 9C 04                      	JNZ	LOD3
 7481/FC3A : C4 A2                      	LDI	(M_RDIM-M_BASE)		; 'REDIMENSION ERROR'
 7482/FC3C : 93 27                      	JMP	SV_RTERRN(P3)
 7483/FC3E : CE FF                      LOD3:	ST	@-1(P2)
 7484/FC40 : C1 01                      	LD	1(P1)
 7485/FC42 : CE FF                      	ST	@-1(P2)
 7486/FC44 : C2 FF                      	LD	-1(P2)
 7487/FC46 : 31                         	XPAL	P1
 7488/FC47 : C2 FE                      	LD	-2(P2)
 7489/FC49 : 35                         	XPAH	P1
 7490/FC4A : C4 80                      	LDI	STKMID
 7491/FC4C : 32                         	XPAL	P2
 7492/FC4D : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 7493/FC4F : 93 D6                      	JMP	SV_SPLOAD(P3)
 7494/FC51 :                            
 7495/FC51 : C2 FD                      STFLD:	LD	AEXOFF(P2)
 7496/FC53 : 32                         	XPAL	P2
 7497/FC54 : C2 03                      	LD	3(P2)
 7498/FC56 : 33                         	XPAL	P3
 7499/FC57 : C2 02                      	LD	2(P2)
 7500/FC59 : 37                         	XPAH	P3
 7501/FC5A : 01                         	XAE
 7502/FC5B : C2 01                      	LD	1(P2)
 7503/FC5D : CA 03                      	ST	3(P2)
 7504/FC5F : CB 04                      	ST	4(P3)
 7505/FC61 : C6 02                      	LD	@2(P2)
 7506/FC63 : CA 00                      	ST	(P2)
 7507/FC65 : CB 03                      	ST	3(P3)
 7508/FC67 : C4 00                      	LDI	0
 7509/FC69 : CB 02                      	ST	2(P3)
 7510/FC6B : CB 01                      	ST	1(P3)
 7511/FC6D : C4 80                      	LDI	0x80
 7512/FC6F : 33                         	XPAL	P3
 7513/FC70 : 40                         	LDE
 7514/FC71 : 37                         	XPAH	P3
 7515/FC72 : C4 80                      	LDI	STKMID
 7516/FC74 : 32                         	XPAL	P2
 7517/FC75 : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 7518/FC77 : 93 D6                      	JMP	SV_SPLOAD(P3)
 7519/FC79 :                            
 7520/FC79 : C2 FD                      DIMSN:	LD	AEXOFF(P2)
 7521/FC7B : 32                         	XPAL	P2
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 246 - 2024年05月30日 19時01分01秒


 7522/FC7C : C2 00                      	LD	(P2)
 7523/FC7E : D4 FC                      	ANI	0xFC
 7524/FC80 : 98 04                      	JZ	DIMS1
 7525/FC82 : C4 A4                      	LDI	(M_DIM-M_BASE)		; 'DIMENSION ERROR'
 7526/FC84 : 93 27                      	JMP	SV_RTERRN(P3)
 7527/FC86 : 02                         DIMS1:	CCL
 7528/FC87 : C2 01                      	LD	1(P2)
 7529/FC89 : F2 01                      	ADD	1(P2)
 7530/FC8B : CA FF                      	ST	-1(P2)
 7531/FC8D : C2 00                      	LD	(P2)
 7532/FC8F : F2 00                      	ADD	(P2)
 7533/FC91 : CA FE                      	ST	-2(P2)
 7534/FC93 : C2 FF                      	LD	-1(P2)
 7535/FC95 : F2 FF                      	ADD	-1(P2)
 7536/FC97 : CA FF                      	ST	-1(P2)
 7537/FC99 : C2 FE                      	LD	-2(P2)
 7538/FC9B : F2 FE                      	ADD	-2(P2)
 7539/FC9D : CA FE                      	ST	-2(P2)
 7540/FC9F : C2 FF                      	LD	-1(P2)
 7541/FCA1 : F4 04                      	ADI	4
 7542/FCA3 : CA FF                      	ST	-1(P2)
 7543/FCA5 : C2 FE                      	LD	-2(P2)
 7544/FCA7 : F4 00                      	ADI	0
 7545/FCA9 : CA FE                      	ST	-2(P2)
 7546/FCAB : C2 03                      	LD	3(P2)
 7547/FCAD : F4 02                      	ADI	2
 7548/FCAF : CA 03                      	ST	3(P2)
 7549/FCB1 : C2 02                      	LD	2(P2)
 7550/FCB3 : F4 00                      	ADI	0
 7551/FCB5 : E2 02                      	XOR	2(P2)
 7552/FCB7 : D4 F0                      	ANI	0xF0
 7553/FCB9 : 98 04                      	JZ	DIMS2
 7554/FCBB : C4 84                      ARERR:	LDI	(M_AREA-M_BASE)		; 'AREA ERROR'
 7555/FCBD : 93 27                      	JMP	SV_RTERRN(P3)
 7556/FCBF : C2 02                      DIMS2:	LD	2(P2)
 7557/FCC1 : F4 00                      	ADI	0
 7558/FCC3 : CA 02                      	ST	2(P2)
 7559/FCC5 : C2 03                      	LD	3(P2)
 7560/FCC7 : F2 FF                      	ADD	-1(P2)
 7561/FCC9 : C2 02                      	LD	2(P2)
 7562/FCCB : F2 FE                      	ADD	-2(P2)
 7563/FCCD : E2 02                      	XOR	2(P2)
 7564/FCCF : D4 F0                      	ANI	0xF0
 7565/FCD1 : 9C E8                      	JNZ	ARERR
 7566/FCD3 : C2 03                      	LD	3(P2)
 7567/FCD5 : 33                         	XPAL	P3
 7568/FCD6 : C2 02                      	LD	2(P2)
 7569/FCD8 : 37                         	XPAH	P3
 7570/FCD9 : 01                         	XAE
 7571/FCDA : C2 01                      	LD	1(P2)
 7572/FCDC : CB FE                      	ST	-2(P3)
 7573/FCDE : C6 04                      	LD	@4(P2)
 7574/FCE0 : CB FF                      	ST	-1(P3)
 7575/FCE2 : C4 00                      DIMS3:	LDI	0
 7576/FCE4 : CF 01                      	ST	@1(P3)
 7577/FCE6 : C2 FB                      	LD	-5(P2)
 7578/FCE8 : 9C 02                      	JNZ	DIMS4
 7579/FCEA : BA FA                      	DLD	FOROFF(P2)
 7580/FCEC : BA FB                      DIMS4:	DLD	-5(P2)
 7581/FCEE : DA FA                      	OR	FOROFF(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 247 - 2024年05月30日 19時01分01秒


 7582/FCF0 : 9C F0                      	JNZ	DIMS3
 7583/FCF2 : C4 80                      	LDI	L(SPRVSR)
 7584/FCF4 : 33                         	XPAL	P3
 7585/FCF5 : 40                         	LDE
 7586/FCF6 : 37                         	XPAH	P3
 7587/FCF7 : C4 80                      	LDI	STKMID
 7588/FCF9 : 32                         	XPAL	P2
 7589/FCFA : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 7590/FCFC : 93 D6                      	JMP	SV_SPLOAD(P3)
 7591/FCFE :                            
 7592/FCFE :                            ; Check for opening parenthesis.
 7593/FCFE : 98 04                      CKPT:	JZ	CKP1
 7594/FD00 : C4 F0                      	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
 7595/FD02 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7596/FD04 : C5 01                      CKP1:	LD	@1(P1)			; get byte from program and increase
 7597/FD06 : E4 28                      	XRI	'('
 7598/FD08 : 9B D6                      	JZ	SV_SPLOAD(P3)
 7599/FD0A : C5 FF                      	LD	@-1(P1)
 7600/FD0C : 93 5B                      	JMP	SV_RTFUNC(P3)
 7601/FD0E :                            
 7602/FD0E : C2 FD                      LADVAR:	LD	AEXOFF(P2)
 7603/FD10 : 32                         	XPAL	P2
 7604/FD11 : C2 01                      	LD	1(P2)
 7605/FD13 : 31                         	XPAL	P1
 7606/FD14 : CA FF                      	ST	-1(P2)
 7607/FD16 : C2 00                      	LD	(P2)
 7608/FD18 : 35                         	XPAH	P1
 7609/FD19 : CA FE                      	ST	-2(P2)
 7610/FD1B : C1 01                      	LD	1(P1)
 7611/FD1D : D9 02                      	OR	2(P1)
 7612/FD1F : 98 04                      	JZ	LAD1
 7613/FD21 : C4 A4                      	LDI	(M_DIM-M_BASE)		; 'DIMENSION ERROR'
 7614/FD23 : 93 27                      	JMP	SV_RTERRN(P3)
 7615/FD25 : C1 04                      LAD1:	LD	4(P1)
 7616/FD27 : CA 01                      	ST	1(P2)
 7617/FD29 : C1 03                      	LD	3(P1)
 7618/FD2B : CA 00                      	ST	(P2)
 7619/FD2D : C2 FF                      	LD	-1(P2)
 7620/FD2F : 31                         	XPAL	P1
 7621/FD30 : C2 FE                      	LD	-2(P2)
 7622/FD32 : 35                         	XPAH	P1
 7623/FD33 : C4 80                      	LDI	STKMID
 7624/FD35 : 32                         	XPAL	P2
 7625/FD36 : 93 D6                      	JMP	SV_SPLOAD(P3)
 7626/FD38 :                            
 7627/FD38 : C2 FD                      DMNSN:	LD	AEXOFF(P2)
 7628/FD3A : 32                         	XPAL	P2
 7629/FD3B : C2 03                      	LD	3(P2)
 7630/FD3D : 31                         	XPAL	P1
 7631/FD3E : CA 03                      	ST	3(P2)
 7632/FD40 : C2 02                      	LD	2(P2)
 7633/FD42 : 35                         	XPAH	P1
 7634/FD43 : CA 02                      	ST	2(P2)
 7635/FD45 : 03                         	SCL
 7636/FD46 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 7637/FD48 : FA 01                      	CAD	1(P2)
 7638/FD4A : C1 00                      	LD	(P1)
 7639/FD4C : FA 00                      	CAD	(P2)
 7640/FD4E : 94 04                      	JP	DMN1
 7641/FD50 : C4 A4                      	LDI	(M_DIM-M_BASE)		; 'DIMENSION ERROR'
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 248 - 2024年05月30日 19時01分01秒


 7642/FD52 : 93 27                      	JMP	SV_RTERRN(P3)
 7643/FD54 : 02                         DMN1:	CCL
 7644/FD55 : C2 01                      	LD	1(P2)
 7645/FD57 : F2 01                      	ADD	1(P2)
 7646/FD59 : CA 01                      	ST	1(P2)
 7647/FD5B : C2 00                      	LD	(P2)
 7648/FD5D : F2 00                      	ADD	(P2)
 7649/FD5F : CA 00                      	ST	(P2)
 7650/FD61 : C2 01                      	LD	1(P2)
 7651/FD63 : F2 01                      	ADD	1(P2)
 7652/FD65 : CA 01                      	ST	1(P2)
 7653/FD67 : C2 00                      	LD	(P2)
 7654/FD69 : F2 00                      	ADD	(P2)
 7655/FD6B : CA 00                      	ST	(P2)
 7656/FD6D : C2 03                      	LD	3(P2)
 7657/FD6F : 31                         	XPAL	P1
 7658/FD70 : F2 01                      	ADD	1(P2)
 7659/FD72 : CA 03                      	ST	3(P2)
 7660/FD74 : C2 02                      	LD	2(P2)
 7661/FD76 : 35                         	XPAH	P1
 7662/FD77 : F6 02                      	ADD	@2(P2)
 7663/FD79 : CA 00                      	ST	(P2)
 7664/FD7B : C4 80                      	LDI	STKMID
 7665/FD7D : 32                         	XPAL	P2
 7666/FD7E : CA FD                      	ST	AEXOFF(P2)		; store last AEXSTK.L
 7667/FD80 : C5 01                      DMN2:	LD	@1(P1)			; get byte from program and increase
 7668/FD82 : E4 20                      	XRI	' '			; is it <space> ?
 7669/FD84 : 98 FA                      	JZ	DMN2			; yes, just eat it
 7670/FD86 : E4 09                      	XRI	' ' ! ')'		; we XOR'ed above, is it ')' ?
 7671/FD88 : 9B 5B                      	JZ	SV_RTFUNC(P3)
 7672/FD8A : C5 FF                      	LD	@-1(P1)			; decrease, so pointing to last byte
 7673/FD8C : C4 AC                      	LDI	(M_ENDP-M_BASE)		; 'END) ERROR'
 7674/FD8E : 93 B4                      	JMP	SV_MSGOUT(P3)
 7675/FD90 :                            
 7676/FD90 : 98 04                      POPDLR:	JZ	PD1
 7677/FD92 : C4 F0                      	LDI	(M_VAR-M_BASE)		; 'VARIABLE ERROR'
 7678/FD94 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7679/FD96 : C1 00                      PD1:	LD	(P1)
 7680/FD98 : E4 24                      	XRI	'$'
 7681/FD9A : 9B D6                      	JZ	SV_SPLOAD(P3)
 7682/FD9C : AA FD                      	ILD	AEXOFF(P2)		; adjust AEXSTK by two up
 7683/FD9E : AA FD                      	ILD	AEXOFF(P2)
 7684/FDA0 : 93 D6                      	JMP	SV_SPLOAD(P3)
 7685/FDA2 :                            
 7686/FDA2 :                            ; Print version string (abuse PSTRNG routine).
 7687/FDA2 : C4 13                      VSTRNG:	LDI	L(VERSTR)
 7688/FDA4 : CA EF                      	ST	-17(P2)
 7689/FDA6 : C4 D0                      	LDI	H(VERSTR)
 7690/FDA8 : CA EE                      	ST	-18(P2)
 7691/FDAA :                            
 7692/FDAA :                            ; Print string variable.
 7693/FDAA : C2 EF                      PSTRNG:	LD	-17(P2)			; load P1 and save prev content
 7694/FDAC : 31                         	XPAL	P1
 7695/FDAD : CA EF                      	ST	-17(P2)
 7696/FDAF : C2 EE                      	LD	-18(P2)
 7697/FDB1 : 35                         	XPAH	P1
 7698/FDB2 : CA EE                      	ST	-18(P2)
 7699/FDB4 : C5 01                      PSTR1:	LD	@1(P1)			; get byte from program and increase
 7700/FDB6 : E4 0D                      	XRI	_CR
 7701/FDB8 : 98 09                      	JZ	PSTR2
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 249 - 2024年05月30日 19時01分01秒


 7702/FDBA : E4 0D                      	XRI	_CR
 7703/FDBC : =>DEFINED                  	IFDEF	SCALLS
 7704/FDBC : (MACRO)                    	 SYSCALL	2
 7704/FDBC : 3F                                  XPPC   P3
 7704/FDBD : 02                                  DB     2
 7705/FDBE : =>FALSE                    	ELSE
 7706/FDBE :                            	 CALL	PUTASC
 7707/FDBE : [7703]                     	ENDIF
 7708/FDBE : 06                         	CSA				; get CPU status
 7709/FDBF : D4 20                      	ANI	0x20			; check for SENSEB (start bit)
 7710/FDC1 : 9C F1                      	JNZ	PSTR1			; no input, continue
 7711/FDC3 : C2 EF                      PSTR2:	LD	-17(P2)			; restore P1
 7712/FDC5 : 31                         	XPAL	P1
 7713/FDC6 : C2 EE                      	LD	-18(P2)
 7714/FDC8 : 35                         	XPAH	P1
 7715/FDC9 : 93 5B                      	JMP	SV_RTFUNC(P3)
 7716/FDCB :                            
 7717/FDCB : C4 1D                      TAB:	LDI	0x1D
 7718/FDCD : =>DEFINED                  	IFDEF	SCALLS
 7719/FDCD : (MACRO)                    	 SYSCALL	2
 7719/FDCD : 3F                                  XPPC   P3
 7719/FDCE : 02                                  DB     2
 7720/FDCF : =>FALSE                    	ELSE
 7721/FDCF :                            	 CALL	PUTASC
 7722/FDCF : [7718]                     	ENDIF
 7723/FDCF : C2 EF                      	LD	-17(P2)
 7724/FDD1 : 9B 5B                      	JZ	SV_RTFUNC(P3)
 7725/FDD3 : C4 09                      TAB1:	LDI	_HTAB
 7726/FDD5 : =>DEFINED                  	IFDEF	SCALLS
 7727/FDD5 : (MACRO)                    	 SYSCALL	2
 7727/FDD5 : 3F                                  XPPC   P3
 7727/FDD6 : 02                                  DB     2
 7728/FDD7 : =>FALSE                    	ELSE
 7729/FDD7 :                            	 CALL	PUTASC
 7730/FDD7 : [7726]                     	ENDIF
 7731/FDD7 : BA EF                      	DLD	-17(P2)
 7732/FDD9 : 9C F8                      	JNZ	TAB1
 7733/FDDB : 93 5B                      	JMP	SV_RTFUNC(P3)
 7734/FDDD :                            
 7735/FDDD :                            ; Put status register as 16-bit integer onto STACK.
 7736/FDDD : 06                         STATUS:	CSA				; load CPU status register
 7737/FDDE : 90 02                      	JMP	PSH
 7738/FDE0 :                            ; Put current page as 16-bit integer onto STACK
 7739/FDE0 : C2 F6                      PGE:	LD	CURPG(P2)		; load value for current page
 7740/FDE2 : 01                         PSH:	XAE				; save in E
 7741/FDE3 : C2 FD                      	LD	AEXOFF(P2)		; load actual offset of AEXSTK
 7742/FDE5 : 32                         	XPAL	P2
 7743/FDE6 : 01                         	XAE				; save prev P2.L in E
 7744/FDE7 : CE FF                      	ST	@-1(P2)			; push value as low byte onto STACK
 7745/FDE9 : C4 00                      	LDI	0
 7746/FDEB : CE FF                      	ST	@-1(P2)			; push zero as high byte
 7747/FDED : 40                         	LDE				; load prev P2.L
 7748/FDEE : 32                         	XPAL	P2			; restore P2..
 7749/FDEF : CA FD                      	ST	AEXOFF(P2)		; ..and save AEXSTK.L
 7750/FDF1 : 93 5B                      	JMP	SV_RTFUNC(P3)
 7751/FDF3 :                            
 7752/FDF3 :                            ; Find 'DEF' token with following 'FN' in current page containing BASIC program.
 7753/FDF3 : C4 02                      FNDDEF:	LDI	2			; load begin of basic program into P1
 7754/FDF5 : 31                         	XPAL	P1
 7755/FDF6 : CA F1                      	ST	-15(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 250 - 2024年05月30日 19時01分01秒


 7756/FDF8 : C2 F6                      	LD	CURPG(P2)		; convert current page# into P1.H
 7757/FDFA : 1E                         	RR
 7758/FDFB : 1E                         	RR
 7759/FDFC : 1E                         	RR
 7760/FDFD : 1E                         	RR
 7761/FDFE : 35                         	XPAH	P1
 7762/FDFF : CA F0                      	ST	-16(P2)			; save prev P1 in STACK -16,-15
 7763/FE01 : C1 00                      DEF1:	LD	(P1)
 7764/FE03 : E4 FF                      	XRI	0xFF			; end of program ?
 7765/FE05 : 9C 04                      	JNZ	DEF2			; go ahead
 7766/FE07 : C4 98                      	LDI	(M_DEF-M_BASE)		; 'DEFINE ERROR'
 7767/FE09 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7768/FE0B : C5 01                      DEF2:	LD	@1(P1)			; load number.H and increase
 7769/FE0D : CA F4                      	ST	-12(P2)
 7770/FE0F : C5 02                      	LD	@2(P1)			; load number.L and skip line length
 7771/FE11 : CA F5                      	ST	-11(P2)			; save number on STACK -12, -11
 7772/FE13 : C5 01                      DEF3:	LD	@1(P1)			; get byte from program and increase
 7773/FE15 : E4 20                      	XRI	' '			; is it <space> ?
 7774/FE17 : 98 FA                      	JZ	DEF3			; yes, just eat it
 7775/FE19 : E4 AB                      	XRI	' ' ! T_DEF		; we XOR'ed above, is it 'DEF' token ?
 7776/FE1B : 98 0E                      	JZ	DEF5			; found, go ahead
 7777/FE1D : C1 FF                      DEF4:	LD	-1(P1)			; get previous byte
 7778/FE1F : E4 3A                      	XRI	':'			; is it <colon> ?
 7779/FE21 : 98 F0                      	JZ	DEF3			; search token on line behind colon
 7780/FE23 : E4 37                      	XRI	':' ! _CR		; we XOR'ed above, is it <cr> ?
 7781/FE25 : 98 DA                      	JZ	DEF1			; search token on next line
 7782/FE27 : C5 01                      	LD	@1(P1)			; get byte from program and incr
 7783/FE29 : 90 F2                      	JMP	DEF4			; keep searching
 7784/FE2B : C5 01                      DEF5:	LD	@1(P1)			; get byte from program and incr
 7785/FE2D : E4 20                      	XRI	' '			; is it <space> ?
 7786/FE2F : 98 FA                      	JZ	DEF5			; yes, just eat it
 7787/FE31 : E4 90                      	XRI	' ' ! T_FN		; we XOR'ed above, is it 'FN' token ?
 7788/FE33 : 98 0C                      	JZ	DEF6			; found, go ahead
 7789/FE35 : C2 F5                      FNERR:	LD	-11(P2)			; prepare error message
 7790/FE37 : CA F8                      	ST	NUMLO(P2)		; load line number from STACK -12,-11
 7791/FE39 : C2 F4                      	LD	-12(P2)
 7792/FE3B : CA F7                      	ST	NUMHI(P2)		; put line number onto STACK -9, -8
 7793/FE3D : C4 D7                      	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
 7794/FE3F : 93 B4                      	JMP	SV_MSGOUT(P3)
 7795/FE41 : C5 01                      DEF6:	LD	@1(P1)			; get byte from program and incr
 7796/FE43 : 60                         	XRE
 7797/FE44 : E4 80                      	XRI	0x80
 7798/FE46 : 9C D5                      	JNZ	DEF4
 7799/FE48 : 03                         	SCL
 7800/FE49 : C1 00                      	LD	(P1)			; get current byte
 7801/FE4B : FC 5B                      	CAI	'Z'+1			; no beginning letter
 7802/FE4D : 97 D6                      	JP	SV_SPLOAD(P3)
 7803/FE4F : F4 1A                      	ADI	26			; 'Z'-'A'+1
 7804/FE51 : 94 CA                      	JP	DEF4			; found letter
 7805/FE53 : F4 07                      	ADI	7			; 'A'-'9'-1
 7806/FE55 : 97 D6                      	JP	SV_SPLOAD(P3)		; no digit
 7807/FE57 : F4 0A                      	ADI	10			; '9'-'0'+1
 7808/FE59 : 94 C2                      	JP	DEF4			; is digit
 7809/FE5B : 93 D6                      	JMP	SV_SPLOAD(P3)
 7810/FE5D :                            
 7811/FE5D : C2 F5                      FNT:	LD	-11(P2)
 7812/FE5F : CA F8                      	ST	NUMLO(P2)
 7813/FE61 : C2 F4                      	LD	-12(P2)
 7814/FE63 : CA F7                      	ST	NUMHI(P2)
 7815/FE65 : C2 F1                      	LD	-15(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 251 - 2024年05月30日 19時01分01秒


 7816/FE67 : CA F5                      	ST	-11(P2)
 7817/FE69 : C2 F0                      	LD	-16(P2)
 7818/FE6B : CA F4                      	ST	-12(P2)
 7819/FE6D : 93 D6                      	JMP	SV_SPLOAD(P3)
 7820/FE6F :                            
 7821/FE6F : C5 01                      FNDNE:	LD	@1(P1)			; get byte from program and increase
 7822/FE71 : E4 20                      	XRI	' '			; is it <space> ?
 7823/FE73 : 98 FA                      	JZ	FNDNE			; yes, just eat it
 7824/FE75 : E4 2D                      	XRI	_CR ! ' '		; we XOR'ed above, is it <cr> ?
 7825/FE77 : 98 08                      	JZ	FNDN
 7826/FE79 : E4 37                      	XRI	_CR ! ':'		; we XOR'ed above, is it <colon> ?
 7827/FE7B : 98 04                      	JZ	FNDN
 7828/FE7D : C4 94                      	LDI	(M_CHAR-M_BASE)		; 'CHARACTER ERROR'
 7829/FE7F : 93 B4                      	JMP	SV_MSGOUT(P3)
 7830/FE81 : C2 F5                      FNDN:	LD	-11(P2)
 7831/FE83 : 31                         	XPAL	P1
 7832/FE84 : C2 F4                      	LD	-12(P2)
 7833/FE86 : 35                         	XPAH	P1
 7834/FE87 : C5 FF                      FNDN1:	LD	@-1(P1)
 7835/FE89 : E4 0D                      	XRI	_CR
 7836/FE8B : 9C FA                      	JNZ	FNDN1
 7837/FE8D : C1 01                      	LD	1(P1)
 7838/FE8F : CA F7                      	ST	NUMHI(P2)
 7839/FE91 : C1 02                      	LD	2(P1)
 7840/FE93 : CA F8                      	ST	NUMLO(P2)
 7841/FE95 : C2 F5                      	LD	-11(P2)
 7842/FE97 : 31                         	XPAL	P1
 7843/FE98 : C2 F4                      	LD	-12(P2)
 7844/FE9A : 35                         	XPAH	P1
 7845/FE9B : 93 5B                      	JMP	SV_RTFUNC(P3)
 7846/FE9D :                            
 7847/FE9D :                            ; Implement the USING keyword.
 7848/FE9D :                            ; Takes string argument and counts '#' before and behind the decimal comma.
 7849/FE9D :                            ; After FNUM had generated a number string, the quoted string determines
 7850/FE9D :                            ;  the format for printing the number string.
 7851/FE9D : C4 00                      USING:	LDI	0
 7852/FE9F : CA E1                      	ST	UFRACS(P2)		; counter for '#'s behind decimal comma
 7853/FEA1 : CA E2                      	ST	UTOTAL(P2)		; total counter for '#'s
 7854/FEA3 : C5 01                      USNG1:	LD	@1(P1)			; get byte from program and increase
 7855/FEA5 : E4 20                      	XRI	' '			; is it <space> ?
 7856/FEA7 : 98 FA                      	JZ	USNG1			; yes, just eat it
 7857/FEA9 : C1 FF                      	LD	-1(P1)			; get previous byte of program
 7858/FEAB : E4 23                      	XRI	'#'			; is it '#' ?
 7859/FEAD : 9C 28                      	JNZ	USNG5			; at least one '#' must be there
 7860/FEAF : AA E2                      USNG2:	ILD	UTOTAL(P2)
 7861/FEB1 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 7862/FEB3 : E4 23                      	XRI	'#'			; is it '#' ?
 7863/FEB5 : 98 F8                      	JZ	USNG2
 7864/FEB7 : E4 0F                      	XRI	'#' ! ','		; we XOR'ed above, is it ',' ?
 7865/FEB9 : 9C 12                      	JNZ	USNG4
 7866/FEBB : C2 E2                      	LD	UTOTAL(P2)
 7867/FEBD : DC 80                      	ORI	0x80			; set bit7 (found separator <comma>)
 7868/FEBF : CA E2                      	ST	UTOTAL(P2)
 7869/FEC1 : AA E2                      USNG3:	ILD	UTOTAL(P2)
 7870/FEC3 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 7871/FEC5 : E4 23                      	XRI	'#'
 7872/FEC7 : 9C 04                      	JNZ	USNG4
 7873/FEC9 : AA E1                      	ILD	UFRACS(P2)
 7874/FECB : 90 F4                      	JMP	USNG3
 7875/FECD : C1 FF                      USNG4:	LD	-1(P1)			; get previous byte of program
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 252 - 2024年05月30日 19時01分01秒


 7876/FECF : E4 22                      	XRI	'"'			; is it <quote> ?
 7877/FED1 : 9B D6                      	JZ	SV_SPLOAD(P3)		; yes, we are done
 7878/FED3 : C4 B0                      	LDI	(M_ENDQ-M_BASE)		; 'ENDQUOTE ERROR'
 7879/FED5 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7880/FED7 : C4 D7                      USNG5:	LDI	(M_SNTX-M_BASE)		; 'SYNTAX ERROR'
 7881/FED9 : 93 B4                      	JMP	SV_MSGOUT(P3)
 7882/FEDB :                            
 7883/FEDB :                            ; Print floating point number after applying of formatting from USING statement.
 7884/FEDB : C2 FD                      USING2:	LD	AEXOFF(P2)		; load actual AEXSTK.L
 7885/FEDD : E4 60                      	XRI	L(AEXSTK)		; default top of AEXSTK
 7886/FEDF : 9B D6                      	JZ	SV_SPLOAD(P3)		; STACK empty, jump back
 7887/FEE1 : E4 60                      	XRI	L(AEXSTK)		; we XOR'ed above
 7888/FEE3 : 31                         	XPAL	P1
 7889/FEE4 : C3 A2                      	LD	STKPHI(P3)
 7890/FEE6 : 35                         	XPAH	P1
 7891/FEE7 : C5 FC                      	LD	@-4(P1)			; set P1 to begin of number string
 7892/FEE9 : 03                         	SCL
 7893/FEEA : C2 E2                      	LD	UTOTAL(P2)
 7894/FEEC : D4 7F                      	ANI	0x7F
 7895/FEEE : CA EE                      	ST	-18(P2)			; store total count of '#'s
 7896/FEF0 : FA E1                      	CAD	UFRACS(P2)
 7897/FEF2 : CA EF                      	ST	-17(P2)
 7898/FEF4 : C2 E2                      	LD	UTOTAL(P2)
 7899/FEF6 : 94 04                      	JP	USNG21			; bit7 not set, so no separator <comma>
 7900/FEF8 : BA EF                      	DLD	-17(P2)
 7901/FEFA : 98 13                      	JZ	USNG23
 7902/FEFC : C5 FF                      USNG21:	LD	@-1(P1)			; decrease and get byte from program
 7903/FEFE : E4 2D                      	XRI	'-'
 7904/FF00 : 9C 06                      	JNZ	USNG22
 7905/FF02 : C5 01                      	LD	@1(P1)			; get byte from program and increase
 7906/FF04 : AA EB                      	ILD	COUNTR(P2)
 7907/FF06 : 98 07                      	JZ	USNG23
 7908/FF08 : 03                         USNG22:	SCL
 7909/FF09 : C2 EF                      	LD	-17(P2)
 7910/FF0B : FA EB                      	CAD	COUNTR(P2)
 7911/FF0D : 94 0A                      	JP	USNG24
 7912/FF0F : C4 2A                      USNG23:	LDI	'*'			; fill with '*' if format too small
 7913/FF11 : =>DEFINED                  	IFDEF	SCALLS
 7914/FF11 : (MACRO)                    	 SYSCALL	2
 7914/FF11 : 3F                                  XPPC   P3
 7914/FF12 : 02                                  DB     2
 7915/FF13 : =>FALSE                    	ELSE
 7916/FF13 :                            	 CALL	PUTASC
 7917/FF13 : [7913]                     	ENDIF
 7918/FF13 : BA EE                      	DLD	-18(P2)
 7919/FF15 : 9C F8                      	JNZ	USNG23
 7920/FF17 : 90 64                      	JMP	STINIT
 7921/FF19 : 98 0A                      USNG24:	JZ	USNG26
 7922/FF1B : CA EA                      	ST	-22(P2)
 7923/FF1D : C4 20                      USNG25:	LDI	' '			; fill with spaces
 7924/FF1F : =>DEFINED                  	IFDEF	SCALLS
 7925/FF1F : (MACRO)                    	 SYSCALL	2
 7925/FF1F : 3F                                  XPPC   P3
 7925/FF20 : 02                                  DB     2
 7926/FF21 : =>FALSE                    	ELSE
 7927/FF21 :                            	 CALL	PUTASC
 7928/FF21 : [7924]                     	ENDIF
 7929/FF21 : BA EA                      	DLD	-22(P2)
 7930/FF23 : 9C F8                      	JNZ	USNG25
 7931/FF25 : C2 E7                      USNG26:	LD	CHRNUM(P2)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 253 - 2024年05月30日 19時01分01秒


 7932/FF27 : 94 12                      	JP	USNG28
 7933/FF29 : C1 FF                      	LD	-1(P1)
 7934/FF2B : E4 2D                      	XRI	'-'
 7935/FF2D : 9C 06                      	JNZ	USNG27
 7936/FF2F : BA EB                      	DLD	COUNTR(P2)
 7937/FF31 : C5 FF                      	LD	@-1(P1)
 7938/FF33 : =>DEFINED                  	IFDEF	SCALLS
 7939/FF33 : (MACRO)                    	 SYSCALL	2
 7939/FF33 : 3F                                  XPPC   P3
 7939/FF34 : 02                                  DB     2
 7940/FF35 : =>FALSE                    	ELSE
 7941/FF35 :                            	 CALL	PUTASC
 7942/FF35 : [7938]                     	ENDIF
 7943/FF35 : C4 30                      USNG27:	LDI	'0'
 7944/FF37 : =>DEFINED                  	IFDEF	SCALLS
 7945/FF37 : (MACRO)                    	 SYSCALL	2
 7945/FF37 : 3F                                  XPPC   P3
 7945/FF38 : 02                                  DB     2
 7946/FF39 : =>FALSE                    	ELSE
 7947/FF39 :                            	 CALL	PUTASC
 7948/FF39 : [7944]                     	ENDIF
 7949/FF39 : 90 03                      	JMP	USNG29
 7950/FF3B : (MACRO)                    USNG28:	CALL	USING3
 7950/FF3B : 3F                                  XPPC   P3
 7950/FF3C : DB                                  DB     H(USING3)
 7950/FF3D : 1D                                  DB     L(USING3)
 7951/FF3E : C2 E2                      USNG29:	LD	UTOTAL(P2)
 7952/FF40 : 94 3B                      	JP	STINIT
 7953/FF42 : C4 2C                      	LDI	','
 7954/FF44 : =>DEFINED                  	IFDEF	SCALLS
 7955/FF44 : (MACRO)                    	 SYSCALL	2
 7955/FF44 : 3F                                  XPPC   P3
 7955/FF45 : 02                                  DB     2
 7956/FF46 : =>FALSE                    	ELSE
 7957/FF46 :                            	 CALL	PUTASC
 7958/FF46 : [7954]                     	ENDIF
 7959/FF46 : C2 E1                      	LD	UFRACS(P2)
 7960/FF48 : 98 33                      	JZ	STINIT
 7961/FF4A : CA EB                      	ST	COUNTR(P2)
 7962/FF4C : C2 E7                      	LD	CHRNUM(P2)
 7963/FF4E : 94 10                      	JP	USNG2B
 7964/FF50 : CA EA                      	ST	-22(P2)
 7965/FF52 : C4 30                      USNG2A:	LDI	'0'			; <zero>'s post <comma>
 7966/FF54 : =>DEFINED                  	IFDEF	SCALLS
 7967/FF54 : (MACRO)                    	 SYSCALL	2
 7967/FF54 : 3F                                  XPPC   P3
 7967/FF55 : 02                                  DB     2
 7968/FF56 : =>FALSE                    	ELSE
 7969/FF56 :                            	 CALL	PUTASC
 7970/FF56 : [7966]                     	ENDIF
 7971/FF56 : BA EB                      	DLD	COUNTR(P2)
 7972/FF58 : 98 23                      	JZ	STINIT
 7973/FF5A : BA EA                      	DLD	-22(P2)
 7974/FF5C : E4 81                      	XRI	0x81
 7975/FF5E : 9C F2                      	JNZ	USNG2A
 7976/FF60 : (MACRO)                    USNG2B:	CALL	USING3
 7976/FF60 : 3F                                  XPPC   P3
 7976/FF61 : DB                                  DB     H(USING3)
 7976/FF62 : 1D                                  DB     L(USING3)
 7977/FF63 : 90 18                      	JMP	STINIT
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 254 - 2024年05月30日 19時01分01秒


 7978/FF65 :                            
 7979/FF65 :                            ; Print floating point number (as string on STACK.)
 7980/FF65 : C2 FD                      PRFNUM:	LD	AEXOFF(P2)		; load actual AEXSTK.L
 7981/FF67 : E4 60                      	XRI	L(AEXSTK)		; is it top of arithmetics stack ?
 7982/FF69 : 9B D6                      	JZ	SV_SPLOAD(P3)		; STACK empty, jump back
 7983/FF6B : E4 60                      	XRI	L(AEXSTK)		; we XOR'ed above
 7984/FF6D : 31                         	XPAL	P1
 7985/FF6E : C3 A2                      	LD	STKPHI(P3)
 7986/FF70 : 35                         	XPAH	P1
 7987/FF71 : C5 FB                      	LD	@-5(P1)			; set P1 below stored number to ASCII string
 7988/FF73 : =>DEFINED                  PRFNM1:	IFDEF	SCALLS
 7989/FF73 : (MACRO)                    	 SYSCALL	2
 7989/FF73 : 3F                                  XPPC   P3
 7989/FF74 : 02                                  DB     2
 7990/FF75 : =>FALSE                    	ELSE
 7991/FF75 :                            	 CALL	PUTASC
 7992/FF75 : [7988]                     	ENDIF
 7993/FF75 : C5 FF                      	LD	@-1(P1)			; decrease P1 and load byte
 7994/FF77 : 9C FA                      	JNZ	PRFNM1			; loop until <null>
 7995/FF79 :                            
 7996/FF79 :                            ; Print a <space> and reset arithmetics stack
 7997/FF79 : C4 20                      PRSPCE:	LDI	' '
 7998/FF7B : =>DEFINED                  	IFDEF	SCALLS
 7999/FF7B : (MACRO)                    	 SYSCALL	2
 7999/FF7B : 3F                                  XPPC   P3
 7999/FF7C : 02                                  DB     2
 8000/FF7D : =>FALSE                    	ELSE
 8001/FF7D :                            	 CALL	PUTASC
 8002/FF7D : [7998]                     	ENDIF
 8003/FF7D :                            
 8004/FF7D :                            ; After printing, top of the arithmetic STACK is reset to default.
 8005/FF7D : C4 60                      STINIT:	LDI	L(AEXSTK)		; load default top of AEXSTK.L
 8006/FF7F : 31                         	XPAL	P1			; temporarily put into P1.L
 8007/FF80 :                            
 8008/FF80 :                            ; Set stack back (also use as stand-alone routine.)
 8009/FF80 : C2 F3                      STBACK:	LD	-13(P2)			; restore pointer P1
 8010/FF82 : 31                         	XPAL	P1
 8011/FF83 : CA FD                      	ST	AEXOFF(P2)		; store default/actual top of AEXSTK.L
 8012/FF85 : C2 F2                      	LD	-14(P2)
 8013/FF87 : 35                         	XPAH	P1
 8014/FF88 : 93 D6                      	JMP	SV_SPLOAD(P3)
 8015/FF8A :                            
 8016/FF8A : =>TRUE                     	IF USE_CASS
 8017/FF8A : (MACRO)                    CSAVE2:	JS	P3,CASW			; execute Cassette Write system call
 8017/FF8A : C4 D1                               LDI    H(CASW-1)
 8017/FF8C : 37                                  XPAH   P3
 8017/FF8D : C4 01                               LDI    L(CASW-1)
 8017/FF8F : 33                                  XPAL   P3
 8017/FF90 : 3F                                  XPPC   P3
 8018/FF91 : (MACRO)                    	LDPI	P3,SPRVSR		; restore P3 to Supervisor
 8018/FF91 : C4 80                               LDI    L(SPRVSR)
 8018/FF93 : 33                                  XPAL   P3
 8018/FF94 : C4 D4                               LDI    H(SPRVSR)
 8018/FF96 : 37                                  XPAH   P3
 8019/FF97 : 93 D6                      	JMP	SV_SPLOAD(P3)		; return to supervisor
 8020/FF99 :                            
 8021/FF99 : C4 5C                      CLOAD2:	LDI	L(AEXSTK)-4		; set buffer address for PRNUM
 8022/FF9B : CA FD                      	ST	AEXOFF(P2)		; store as actual offset to AEXSTK.L
 8023/FF9D : (MACRO)                    	JS	P3,CASR			; execute Cassette Read system call
 8023/FF9D : C4 D1                               LDI    H(CASR-1)
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 255 - 2024年05月30日 19時01分01秒


 8023/FF9F : 37                                  XPAH   P3
 8023/FFA0 : C4 5A                               LDI    L(CASR-1)
 8023/FFA2 : 33                                  XPAL   P3
 8023/FFA3 : 3F                                  XPPC   P3
 8024/FFA4 : 01                         	XAE				; save AC
 8025/FFA5 : (MACRO)                    	LDPI	P3,SPRVSR		; set P3 back to SPRVSR
 8025/FFA5 : C4 80                               LDI    L(SPRVSR)
 8025/FFA7 : 33                                  XPAL   P3
 8025/FFA8 : C4 D4                               LDI    H(SPRVSR)
 8025/FFAA : 37                                  XPAH   P3
 8026/FFAB : 40                         	LDE				; load saved AC
 8027/FFAC : 98 08                      	JZ	CLOAD4			; all OK
 8028/FFAE : C4 BF                      CLOAD3:	LDI	(INCMD + _QMARK)	; set "PROGRAM RUNNING" flag
 8029/FFB0 : CA 7F                      	ST	BASMODE(P2)		; store program / run flag
 8030/FFB2 : C4 90                      	LDI	(M_CASS-M_BASE)		; 'CASS ERROR'
 8031/FFB4 : 93 B4                      	JMP	SV_MSGOUT(P3)
 8032/FFB6 : (MACRO)                    CLOAD4:	CALL	FNDVAR
 8032/FFB6 : 3F                                  XPPC   P3
 8032/FFB7 : E2                                  DB     H(FNDVAR)
 8032/FFB8 : E1                                  DB     L(FNDVAR)
 8033/FFB9 : 98 F3                      	JZ	CLOAD3			; no variable found
 8034/FFBB : 93 D6                      	JMP	SV_SPLOAD(P3)		; return to supervisor
 8035/FFBD :                            
 8036/FFBD :                            ; Determine start of program on current page.
 8037/FFBD : C2 F6                      BOT:	LD	CURPG(P2)		; load page #
 8038/FFBF : 1E                         	RR				; rotate right AC (multiply by 16)
 8039/FFC0 : 1E                         	RR
 8040/FFC1 : 1E                         	RR
 8041/FFC2 : 1E                         	RR
 8042/FFC3 : 01                         	XAE
 8043/FFC4 : BA FD                      	DLD	AEXOFF(P2)		; decrease stored P2.L by 2
 8044/FFC6 : BA FD                      	DLD	AEXOFF(P2)
 8045/FFC8 : 32                         	XPAL	P2
 8046/FFC9 : 01                         	XAE				; save prev P2.L in E
 8047/FFCA : CA 00                      	ST	(P2)			; store START.H on STACK 0
 8048/FFCC : C4 01                      	LDI	1			; program begins at byte 1 of page
 8049/FFCE : CA 01                      	ST	1(P2)			; store START.L on STACK 1
 8050/FFD0 : 40                         	LDE
 8051/FFD1 : 32                         	XPAL	P2
 8052/FFD2 : 93 D6                      	JMP	SV_SPLOAD(P3)
 8053/FFD4 :                            
 8054/FFD4 : C2 DF                      CFINI:	LD	-33(P2)			; get start addr L
 8055/FFD6 : CA F8                      	ST	NUMLO(P2)		; store for PRNUM
 8056/FFD8 : C2 DE                      	LD	-34(P2)			; get start addr H
 8057/FFDA : CA F7                      	ST	NUMHI(P2)		; store for PRNUM
 8058/FFDC : (MACRO)                    	CALL	PRNUM			; print the number
 8058/FFDC : 3F                                  XPPC   P3
 8058/FFDD : D1                                  DB     H(PRNUM)
 8058/FFDE : BA                                  DB     L(PRNUM)
 8059/FFDF : C4 2D                      	LDI	'-'			; print <minus>
 8060/FFE1 : =>DEFINED                  	IFDEF	SCALLS
 8061/FFE1 : (MACRO)                    	 SYSCALL	2
 8061/FFE1 : 3F                                  XPPC   P3
 8061/FFE2 : 02                                  DB     2
 8062/FFE3 : =>FALSE                    	ELSE
 8063/FFE3 :                            	 CALL	PUTASC
 8064/FFE3 : [8060]                     	ENDIF
 8065/FFE3 : C2 DD                      	LD	-35(P2)			; get end addr L
 8066/FFE5 : CA F8                      	ST	NUMLO(P2)		; store for PRNUM
 8067/FFE7 : C2 DC                      	LD	-36(P2)			; get end addr H
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 256 - 2024年05月30日 19時01分01秒


 8068/FFE9 : CA F7                      	ST	NUMHI(P2)		; store for PRNUM
 8069/FFEB : (MACRO)                    	CALL	PRNUM			; print the number
 8069/FFEB : 3F                                  XPPC   P3
 8069/FFEC : D1                                  DB     H(PRNUM)
 8069/FFED : BA                                  DB     L(PRNUM)
 8070/FFEE : (MACRO)                    	CALL	LINE			; print newline
 8070/FFEE : 3F                                  XPPC   P3
 8070/FFEF : E0                                  DB     H(LINE)
 8070/FFF0 : FE                                  DB     L(LINE)
 8071/FFF1 : C4 0A                      	LDI	(M_RDY-M_BASE)		; 'READY'
 8072/FFF3 : 93 B4                      	JMP	SV_MSGOUT(P3)
 8073/FFF5 : [8016]                     	ENDIF
 8074/FFF5 :                            
 8075/FFF5 :                            	; Fill up space to end of ROM.
 8076/FFFF :                            	ORG	(BASE+0x3000) - 1
 8077/FFFF : FF                         	DB	0xFF
 8078/10000 :                           
 8079/10000 :                           	END	RESET
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 257 - 2024年05月30日 19時01分01秒


  Symbol Table (* = unused):
  --------------------------

 ABSWP :                       F025 C |  ABSWP1 :                      F02E C |
 ADD :                         E2B0 C |  ADD1 :                        E2B2 C |
 ADD2 :                        E2CC C |  ADD3 :                        E2D4 C |
 ADD4 :                        E2D5 C |  AEXOFF :          FFFFFFFFFFFFFFFD - |
 AEXSTK :                        60 - |  ALG1 :                        F267 C |
 ALG2 :                        F277 C |  ALGEXP :                      F259 C |
 ALGN1 :                       F1BF C |  ALGN2 :                       F1E9 C |
 ALGN3 :                       F1F1 C |  AND :                         F156 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARERR :                       FCBB C |  ASC :                         EE04 C |
 ASC1 :                        EE17 C |  ASTR1 :                       EE35 C |
 ASTRNG :                      EE1F C |  ATN :                         F8AF C |
 ATN1 :                        F8BA C |  ATN2 :                        F8DE C |
 ATN3 :                        F979 C |  AUTO :                        DA95 C |
 AUTO1 :                       DAA0 C |  AUTO2 :                       DAA2 C |
 AUTO3 :                       DAAC C |  AUTON :                       EB16 C |
 AUTONM :                      EB05 C |  BACK :                        E0B6 C |
 BASE :                        D000 - |  BASMODE :                       7F - |
*BIGENDIAN :                      1 - |  BINDEC :                      F432 C |
 BOT :                         FFBD C |  BRK :                         E492 C |
 BUFOUT :                      E0DF C |  BYE :                         E383 C |
 CALBIT :                        20 - |  CALBITH :                     2000 - |
*CASESENSITIVE :                  0 - |  CASR :                        D15B C |
 CASR1 :                       D175 C |  CASR2 :                       D17E C |
 CASR3 :                       D198 C |  CASR4 :                       D1A1 C |
 CASR5 :                       D1A7 C |  CASRD :                       D0C8 C |
 CASRD1 :                      D0D1 C |  CASRD2 :                      D0DD C |
 CASRD3 :                      D0E5 C |  CASRD4 :                      D0ED C |
 CASRD5 :                      D0FA C |  CASW :                        D102 C |
 CASW1 :                       D122 C |  CASW2 :                       D12B C |
 CASW3 :                       D149 C |  CASW4 :                       D151 C |
 CASWR :                       D0A0 C |  CASWR1 :                      D0B0 C |
 CASWR2 :                      D0B8 C |  CFINI :                       FFD4 C |
 CHPAGE :                      E6F8 C |  CHPGE :                       E708 C |
 CHRNUM :          FFFFFFFFFFFFFFE7 - |  CHRSTR :                      EC07 C |
 CKDLL1 :                      EE85 C |  CKDLL2 :                      EE8F C |
 CKDLLR :                      EE7F C |  CKMODE :                      E5B8 C |
 CKP1 :                        FD04 C |  CKPT :                        FCFE C |
 CLEAR :                       F023 C |  CLOAD :                       DF61 C |
 CLOAD2 :                      FF99 C |  CLOAD3 :                      FFAE C |
 CLOAD4 :                      FFB6 C |  CLRBUF :                      EA20 C |
 CLRSTK :                      E4C6 C |  CMP :                         E5F2 C |
 CMP1 :                        ED95 C |  CMP2 :                        EDA1 C |
 CMP3 :                        EDA9 C |  CMP4 :                        EDB6 C |
 CMPEND :                      EDBC C |  CMPR :                        E652 C |
 CMPR1 :                       ED58 C |  CMPR2 :                       ED64 C |
 CMPR3 :                       ED6A C |  CMPR4 :                       ED72 C |
 CMPRE :                       E3C5 C |  CMPRST :                      ED4C C |
 CMPSTR :                      ED81 C | *CONSTPI :        3.141592653589793 - |
 COUNTR :          FFFFFFFFFFFFFFEB - |  CSAVE :                       DF59 C |
 CSAVE2 :                      FF8A C |  CSPEED_A :                      17 - |
 CSPEED_B :                       1 - |  CSPEED_C :                      78 - |
 CSPEED_D :                       0 - |  CSPEED_E :                      24 - |
 CSPEED_F :                       1 - |  CTRL1 :                       E053 C |
 CTRL2 :                       E07E C |  CTRL3 :                       E092 C |
 CTRL4 :                       E059 C |  CTRL5 :                       E099 C |
 CTRL6 :                       E0BC C |  CTRL7 :                       E0F3 C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 258 - 2024年05月30日 19時01分01秒


 CTRLS :                       E044 C |  CURPG :           FFFFFFFFFFFFFFF6 - |
*DATE :             "2024\-027\-071\-07605\-026\-100\-12030\-026\-105\-091" - |
 DEC :                         D304 C |  DEF1 :                        FE01 C |
 DEF2 :                        FE0B C |  DEF3 :                        FE13 C |
 DEF4 :                        FE1D C |  DEF5 :                        FE2B C |
 DEF6 :                        FE41 C |  DEFERR :                      E5A3 C |
 DEFV1 :                       E520 C |  DEFV2 :                       E526 C |
 DEFV3 :                       E54A C |  DEFVAR :                      E50E C |
 DETPGE :                      E47F C |  DIG10 :                       D220 C |
 DIG13 :                       D231 C |  DIG15 :                       D255 C |
 DIG16 :                       D259 C |  DIG17 :                       D287 C |
 DIG18 :                       D29B C |  DIG19 :                       D2A8 C |
 DIG20 :                       D2BF C |  DIG21 :                       D2FE C |
 DIGIT :                       EAA4 C |  DIGIT1 :                      EAAE C |
 DIGLP :                       D24C C |  DIM :                         DACF C |
 DIMS1 :                       FC86 C |  DIMS2 :                       FCBF C |
 DIMS3 :                       FCE2 C |  DIMS4 :                       FCEC C |
 DIMSN :                       FC79 C |  DMN1 :                        FD54 C |
 DMN2 :                        FD80 C |  DMNSN :                       FD38 C |
 DNE :                         E3B3 C |  DO :                          DA41 C |
 DOLLAR :                      D90F C |  DONE :                        E371 C |
 DOSTAK :                        E0 - |  DOUOFF :          FFFFFFFFFFFFFFFB - |
 DOWN :                        E24E C |  DTA1 :                        E8B8 C |
 DTA2 :                        E8D6 C |  DTA3 :                        E8E0 C |
 DTA4 :                        E8E8 C |  EDIT :                        DA89 C |
 EDIT1 :                       E9C3 C |  EDIT10 :                      EA31 C |
*EDIT11 :                      EA3C C |  EDIT12 :                      EA4A C |
 EDIT13 :                      EA60 C |  EDIT14 :                      EA66 C |
 EDIT15 :                      EA6C C |  EDIT16 :                      EA7E C |
 EDIT17 :                      EA82 C |  EDIT2 :                       E9C8 C |
 EDIT3 :                       E9D2 C |  EDIT4 :                       E9E5 C |
 EDIT5 :                       E9EA C |  EDIT6 :                       E9F0 C |
 EDIT7 :                       EA00 C |  EDIT8 :                       EA06 C |
 EDIT9 :                       EA0C C |  EDITR :                       E9BD C |
 ELS :                         E3D4 C |  ELS1 :                        E3E2 C |
 ELS2 :                        E3EA C | *EMULA :                          1 - |
 ENDPAR :                      D92F C |  ENDPR :                       E404 C |
 ENTER :                       D022 C |  ENTR1 :                       D062 C |
 ENTR2 :                       D078 C |  ENTR3 :                       D07E C |
 ENTR4 :                       D088 C |  ENTR5 :                       D090 C |
 EQU :                         E5DC C |  EREG :            FFFFFFFFFFFFFF80 - |
 ERRNUMH :                       7D - |  ERRNUML :                       7E - |
 EXOR :                        F192 C |  EXP2 :                        F598 C |
 EXP21 :                       F5AB C |  EXP22 :                       F5B1 C |
 EXP23 :                       F5CC C |  EXP24 :                       F5D0 C |
 EXP25 :                       F5DD C |  FABS :                        F1A8 C |
 FACTOR :                      DED9 C |  FADD :                        F13C C |
*FALSE :                          0 - |  FCTR1 :                       DEDE C |
 FCTR10 :                      DF44 C |  FCTR11 :                      DF49 C |
 FCTR2 :                       DEE9 C |  FCTR3 :                       DEF5 C |
 FCTR4 :                       DEFC C |  FCTR5 :                       DF07 C |
 FCTR6 :                       DF13 C |  FCTR7 :                       DF18 C |
 FCTR8 :                       DF21 C |  FCTR9 :                       DF38 C |
 FD10 :                        F739 C |  FD11 :                        F73D C |
 FD12 :                        F758 C |  FD13 :                        F761 C |
 FD14 :                        F765 C |  FD15 :                        F793 C |
 FD16 :                        F7A7 C |  FDEC :                        F3A3 C |
 FDEC1 :                       F435 C |  FDEC2 :                       F499 C |
 FDEC3 :                       F49D C |  FDEC4 :                       F4A9 C |
 FDEND :                       F83E C |  FDIG10 :                      F2BF C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 259 - 2024年05月30日 19時01分01秒


 FDIG11 :                      F3E1 C |  FDIG12 :                      F427 C |
 FDIG13 :                      F2D0 C |  FDIG15 :                      F2F4 C |
 FDIG16 :                      F2F8 C |  FDIG17 :                      F326 C |
 FDIG18 :                      F33A C |  FDIG19 :                      F347 C |
 FDIG20 :                      F35E C |  FDIG21 :                      F39D C |
 FDIGLP :                      F2EB C |  FDIV :                        F078 C |
 FDIV0 :                       F07B C |  FDIV1 :                       F083 C |
 FDIV11 :                      F7B8 C |  FDIV12 :                      F7C3 C |
 FDIV13 :                      F7EB C |  FDIV14 :                      F7F4 C |
 FDIV15 :                      F7F8 C |  FDIV16 :                      F826 C |
 FDIV17 :                      F83A C |  FDIV2 :                       F0AD C |
 FDIV3 :                       F0AF C |  FDIV4 :                       F0CB C |
 FEXP :                        F3AA C |  FEXP1 :                       F3B6 C |
 FEXP2 :                       F3C0 C |  FEXP3 :                       F3C5 C |
 FEXPD :                       F3CE C |  FIX :                         EB2F C |
 FIX1 :                        EB3E C |  FIX2 :                        EB3F C |
 FIX3 :                        EB5D C |  FIX4 :                        EB68 C |
 FIX5 :                        EB6D C |  FLEND :                       FBED C |
 FLOAT2 :                      FBD2 C |  FLSE :                        E65E C |
 FMEND :                       F8A8 C |  FMOD :                        F68A C |
 FMOD1 :                       F695 C |  FMOD10 :                      F718 C |
 FMOD2 :                       F6BE C |  FMOD3 :                       F6C0 C |
 FMOD4 :                       F6CC C |  FMOD5 :                       F6D4 C |
 FMOD6 :                       F6E9 C |  FMOD7 :                       F701 C |
 FMOD8 :                       F70D C |  FMOD9 :                       F70F C |
 FMUL :                        F0E3 C |  FMUL1 :                       F0EE C |
 FMUL11 :                      F845 C |  FMUL12 :                      F850 C |
 FMUL13 :                      F896 C |  FMUL14 :                      F8A0 C |
 FMUL15 :                      F8A4 C |  FMUL2 :                       F113 C |
 FN1 :                         DDEE C |  FN2 :                         DDFB C |
 FN3 :                         DE01 C |  FN4 :                         DE0D C |
 FN5 :                         DE1A C |  FN6 :                         DE24 C |
 FN7 :                         DE2D C |  FNDDEF :                      FDF3 C |
 FNDDTA :                      E963 C |  FNDLB1 :                      E577 C |
 FNDLB2 :                      E583 C |  FNDLB3 :                      E596 C |
 FNDLB4 :                      E598 C |  FNDLBL :                      E569 C |
 FNDN :                        FE81 C |  FNDN1 :                       FE87 C |
 FNDNE :                       FE6F C |  FNDTA :                       E900 C |
 FNDV0 :                       E2E9 C |  FNDV1 :                       E2F6 C |
 FNDV2 :                       E301 C |  FNDV3 :                       E30D C |
 FNDV4 :                       E317 C |  FNDV5 :                       E31D C |
 FNDV6 :                       E325 C |  FNDV7 :                       E338 C |
 FNDV8 :                       E33A C |  FNDV9 :                       E33B C |
 FNDVAR :                      E2E1 C |  FNEG :                        F1AC C |
 FNERR :                       FE35 C |  FNORM :                       FBE5 C |
 FNORM1 :                      FBF4 C |  FNT :                         FE5D C |
 FNUM :                        F29A C |  FNUMND :                      F3D2 C |
 FOR :                         D971 C |  FOR1 :                        D98A C |
 FOR2 :                        D98C C |  FOROFF :          FFFFFFFFFFFFFFFA - |
 FORSTK :                        D4 - |  FREE :                        EED7 C |
 FREE1 :                       EEED C |  FREE2 :                       EEEF C |
 FSTR1 :                       ED24 C |  FSTRNG :                      ED18 C |
 FSUB :                        F139 C |  FZERO :                       F2C8 C |
 GEQ :                         E5F0 C |  GEQU :                        E64E C |
 GETASC :                      D09B C |  GETBYT :                      EDE8 C |
 GETLIN :                      E001 C |  GETLN1 :                      E00B C |
 GETLN2 :                      E022 C |  GOFUNC :                      D4CB C |
 GOSUB :                       DA79 C |  GOSUB1 :                      DA7D C |
 GOTO :                        DA73 C |  GOTO1 :                       DA7F C |
 GRTR :                        E643 C |  GTO :                         E97D C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 260 - 2024年05月30日 19時01分01秒


 GTO1 :                        E983 C |  GTO2 :                        E989 C |
 GTO3 :                        E997 C |  GTO4 :                        E9AD C |
 GTR :                         E5EC C | *HAS64 :                          1 - |
 HCTRLS :                      E063 C |  HDLERR :                      E5AF C |
 HEX :                         EEFA C |  HEX1 :                        EF07 C |
 HEX2 :                        EF15 C |  HEX3 :                        EF1D C |
 HEX4 :                        EF27 C |  HEX5 :                        EF2E C |
 HEX6 :                        EF30 C |  HEX7 :                        EF35 C |
 IF :                          DAB4 C |  IGNORE :                      E408 C |
 IGNRE :                       E38A C |  ILCOFF :          FFFFFFFFFFFFFFF9 - |
 ILCSTK :                        A4 - |  ILSTRT :                      D8B5 C |
 ILTB1 :                       D8A4 C |  ILTB2 :                       D8A9 C |
 ILTBL :                       D8A2 C |  INCMD :                         80 - |
*INCR :                        E036 C |  INDEX :                       DF51 C |
 INPT :                        E02B C |  INPUT :                       DA06 C |
 INPUT1 :                      DA0D C |  INPUT2 :                      DA1E C |
 INPUT3 :                      DA20 C |  INPUT4 :                      DA22 C |
 INPUT5 :                      DA29 C |  INS1 :                        E21B C |
 INS2 :                        E22B C |  INS3 :                        E237 C |
 INSRT :                       E209 C |  INSTR :                       E92A C |
 INSTR1 :                      E931 C |  INT :                         F202 C |
 INT1 :                        F203 C |  INT2 :                        F204 C |
 INT3 :                        F20F C |  INT4 :                        F229 C |
*INTERNAL :                       1 - |  ISTR1 :                       E911 C |
 ISTRNG :                      E90A C |  JMPBIT :                        80 - |
 JMPBITH :                     8000 - |  LAD1 :                        FD25 C |
 LADVAR :                      FD0E C |  LDDTA :                       E8A6 C |
 LDPNT :                       E504 C |  LDVAR :                       E815 C |
 LDVER :                       E83B C |  LEFT1 :                       EBA5 C |
 LEFT2 :                       EBB5 C |  LEFT3 :                       EBBB C |
 LEFTST :                      EB99 C |  LEN :                         EE57 C |
 LEN1 :                        EE60 C |  LEN2 :                        EE66 C |
 LEN3 :                        EE6C C |  LEN4 :                        EE71 C |
 LEQ :                         E5E8 C |  LEQU :                        E63A C |
 LESS :                        E632 C |  LET :                         D906 C |
 LFSTR1 :                      EC7B C |  LFSTR2 :                      EC82 C |
 LFSTR3 :                      EC92 C |  LFSTR4 :                      EC98 C |
 LFTSTR :                      EC6C C |  LG2 :                         F4B6 C |
 LGERR :                       F4DC C |  LINE :                        E0FE C |
 LINK :                        DA4F C |  LIST :                        D944 C |
 LIST1 :                       D951 C |  LIST2 :                       D955 C |
 LIST3 :                       D957 C |  LIST4 :                       D95B C |
*LISTON :                         1 - |  LKPAGE :                      E6DD C |
 LKPGE :                       E6E7 C |  LKVAR :                       D523 C |
 LN2 :                         F4C6 C |  LNUM :                        D67F C |
 LNUM1 :                       D692 C |  LOD1 :                        FC15 C |
 LOD2 :                        FC21 C |  LOD3 :                        FC3E C |
 LODVAR :                      FC0F C |  LOG2 :                        F4D8 C |
 LOG21 :                       F4E0 C |  LSS :                         E5E4 C |
 LST1 :                        E67E C |  LST2 :                        E68A C |
 LST3 :                        E696 C |  LST4 :                        E69D C |
 LST5 :                        E6A0 C |  LST6 :                        E6B0 C |
 LST7 :                        E6B6 C |  LST8 :                        E6BC C |
 LST9 :                        E6CA C |  LSTR1 :                       EE49 C |
 LSTR2 :                       EE4F C |  LSTRNG :                      EE39 C |
 LVTST1 :                      D517 C |  LVTST2 :                      D51D C |
 LVTST3 :                      D539 C |  LVUNTL :                      E48C C |
*MACEXP :                         7 - |  MC :                          E9B9 C |
 MD :                          F04D C |  MD1 :                         F063 C |
 MD2 :                         F068 C |  MD3 :                         F072 C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 261 - 2024年05月30日 19時01分01秒


 MDEND :                       F12B C |  MDSGN :                       F133 C |
 MEM1 :                        D600 C |  MEM2 :                        D604 C |
 MEM3 :                        D610 C |  MEM4 :                        D617 C |
 MEMSIZ :                      D5F3 C |  MESG :                        D655 C |
 MESG1 :                       D667 C |  MESG2 :                       D679 C |
 MID1 :                        EB78 C |  MID2 :                        EB84 C |
 MID3 :                        EB8A C |  MIDST :                       EB75 C |
 MIDSTR :                      EC41 C | *MOMCPU :                         0 - |
*MOMCPUNAME :               "SC/MP" - |  MORE :                        EAC2 C |
 MOVE :                        E244 C |  MOVESR :                      E3B0 C |
 MOVSTR :                      ECE4 C |  MSGOFF :          FFFFFFFFFFFFFF82 - |
 MSGOUT :                      D435 C |  MSTR1 :                       EC4E C |
 MSTR2 :                       EC5A C |  MSTR3 :                       EC60 C |
 MVSTR1 :                      ECF8 C |  M_AREA :                      D6A1 C |
 M_ARG :                       D6A5 C |  M_BASE :                      D71D - |
 M_BRK :                       D71D C |  M_CASS :                      D6AD C |
 M_CHAR :                      D6B1 C |  M_DATA :                      D6BB C |
 M_DEF :                       D6B5 C |  M_DIM :                       D6C1 C |
 M_DIV0 :                      D6C4 C |  M_ENDP :                      D6C9 C |
 M_ENDQ :                      D6CD C |  M_ERR :                       D722 C |
 M_FOR :                       D6D1 C |  M_FREE :                      D72C C |
 M_HEX :                       D6D4 C |  M_NEST :                      D6D7 C |
 M_NEXT :                      D6DB C |  M_NOGO :                      D6DF C |
 M_OVRF :                      D6E3 C | *M_RAM :                       D6EB C |
 M_RDIM :                      D6BF C |  M_RDY :                       D727 C |
 M_RTRN :                      D6EE C |  M_SNTX :                      D6F4 C |
 M_STMT :                      D6FA C |  M_UNTL :                      D703 C |
 M_VALU :                      D708 C |  M_VAR :                       D70D C |
 M_VRST :                      D715 C |  NEG :                         DAE7 C |
 NEGEXP :                      F3D8 C |  NEGSKP :                      F430 C |
 NEQ :                         E5E0 C |  NEQU :                        E629 C |
*NESTMAX :                      100 - |  NEW :                         D961 C |
 NEW1 :                        D969 C |  NEW2 :                        D96B C |
 NEWPGM :                      F00D C |  NEXT :                        E42F C |
 NEXT1 :                       E432 C |  NEXT2 :                       E44B C |
 NEXT3 :                       E450 C |  NEXT4 :                       E454 C |
 NEXTG :                       D992 C |  NODTA :                       E8F2 C |
 NOMSPC :                      E0EE C |  NORM :                        F1C4 C |
 NORM1 :                       F1CE C |  NOT :                         F182 C |
 NUMEND :                      EABB C |  NUMERR :                      EA9E C |
 NUMHI :           FFFFFFFFFFFFFFF7 - |  NUMLO :           FFFFFFFFFFFFFFF8 - |
 NUMTST :                      EA8D C |  NUPAGE :                      F001 C |
 NUPGE1 :                      F007 C |  NUPGE2 :                      F009 C |
 NXT :                         E40E C |  NXT1 :                        E412 C |
 NXT2 :                        E418 C |  NXT3 :                        E41C C |
 NXTDTA :                      E8B2 C |  NXTV :                        E84D C |
 NXTV1 :                       E87E C |  NXTV2 :                       E88C C |
 NXTV3 :                       E893 C |  NXTVAR :                      E7B0 C |
 ON :                          DA5D C |  ON1 :                         DA6A C |
 ONE :                         E716 C |  OR :                          F16C C |
 OUTCH :                       E03A C | *P1HIGH :          FFFFFFFFFFFFFFF0 - |
*P1LOW :           FFFFFFFFFFFFFFF1 - |  PAGE :                        D920 C |
 PAGE0 :                       D91D C |  PAGES :           FFFFFFFFFFFFFF84 - |
 PD1 :                         FD96 C |  PEXP :                        D30B C |
 PEXP1 :                       D317 C |  PEXP2 :                       D321 C |
 PEXP3 :                       D326 C |  PEXPD :                       D32F C |
 PFNUM :                       D1FB C |  PFNUMD :                      D333 C |
 PGE :                         FDE0 C |  PGTOPH :          FFFFFFFFFFFFFF85 - |
 PGTOPL :          FFFFFFFFFFFFFF86 - |  PI :                          FAA0 C |
 PI2 :                         F9A0 C |  PNORM :                       D1D6 C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 262 - 2024年05月30日 19時01分01秒


 POKE :                        DAC0 C |  POP1 :                        E1C7 C |
 POP2 :                        E1C8 C |  POP3 :                        E1E6 C |
 POP4 :                        E1F3 C |  POP5 :                        E1F9 C |
 POPAE :                       E1BD C |  POPDLR :                      FD90 C |
 POPSTR :                      ED3C C |  PRCHAR :                      EE9D C |
 PREX1 :                       DB46 C |  PREX10 :                      DB8B C |
 PREX2 :                       DB4F C |  PREX3 :                       DB58 C |
 PREX4 :                       DB5F C |  PREX5 :                       DB68 C |
 PREX6 :                       DB6D C |  PREX7 :                       DB76 C |
 PREX8 :                       DB87 C |  PREX9 :                       DB89 C |
 PREXP :                       DB41 C |  PRFNM1 :                      FF73 C |
 PRFNUM :                      FF65 C |  PRINT :                       DAED C |
 PRINT0 :                      D931 C |  PRNT1 :                       DAF5 C |
 PRNT2 :                       DAFE C |  PRNT3 :                       DB03 C |
 PRNT4 :                       DB06 C |  PRNT5 :                       DB0A C |
 PRNT6 :                       DB13 C |  PRNT7 :                       DB18 C |
 PRNUM :                       D1BA C | *PRSPCE :                      FF79 C |
 PRSTR :                       E971 C |  PRSTRG :                      E5D0 C |
 PSH :                         FDE2 C |  PSHSWP :                      F721 C |
 PSTR1 :                       FDB4 C |  PSTR2 :                       FDC3 C |
 PSTRNG :                      FDAA C | *PTEND :                       D346 C |
 PTNUM :                       D340 C |  PUTASC :                      D097 C |
 PUTBYT :                      EDCC C |  PUTS1 :                       E94C C |
 PUTS2 :                       E958 C |  PUTST :                       EC19 C |
 PUTST1 :                      EC23 C |  PUTST2 :                      EC2F C |
 PUTSTR :                      E945 C |  RAMBAS :          FFFFFFFFFFFFFF83 - |
 RAMBASE :                     7000 - | *RAMSTK :                        F6 - |
 RDCHAR :                        21 - |  READ :                        D9A8 C |
 READ1 :                       D9AC C |  READ2 :                       D9BB C |
 READ3 :                       D9CA C |  READ4 :                       D9CD C |
 READ5 :                       D9D5 C |  READ6 :                       D9E5 C |
 READ7 :                       D9E7 C |  READ8 :                       D9F0 C |
 READ9 :                       D9F4 C |  REL1 :                        DCA3 C |
 REL2 :                        DCAA C |  REL3 :                        DCB1 C |
 REL4 :                        DCB8 C |  REL5 :                        DCBF C |
*RELAXED :                        0 - |  RELEXP :                      DC9A C |
 RELSTR :                      DC72 C |  RELXPR :                      DC98 C |
 RESET :                       D000 C |  RESTOR :                      D9F6 C |
 RESTR :                       DC89 C |  RESTR1 :                      DA02 C |
 RESTRT :                      D421 C |  RETURN :                      DA85 C |
 REX1 :                        DCD3 C |  REX2 :                        DCD6 C |
 REX3 :                        DCD8 C |  REX4 :                        DCE5 C |
 REX5 :                        DCF2 C |  REX6 :                        DD01 C |
 REXPN :                       DD5B C |  REXPN1 :                      DD5D C |
 REXPR :                       DCC6 C |  RF1 :                         DD99 C |
 RF10 :                        DE45 C |  RF11 :                        DE54 C |
 RF12 :                        DE63 C |  RF13 :                        DE6E C |
 RF14 :                        DE73 C |  RF15 :                        DE7E C |
 RF16 :                        DE85 C |  RF17 :                        DE90 C |
 RF18 :                        DE9B C |  RF19 :                        DEB0 C |
 RF2 :                         DDA2 C |  RF20 :                        DECE C |
 RF21 :                        DED5 C |  RF3 :                         DDAB C |
 RF4 :                         DDB6 C |  RF5 :                         DDC1 C |
 RF6 :                         DDD0 C |  RF7 :                         DDDF C |
 RF8 :                         DE2F C |  RF9 :                         DE3A C |
 RFACTR :                      DD79 C |  RGHSTR :                      EC9E C |
 RGHTST :                      EBD3 C |  RGSTR1 :                      ECB8 C |
 RGSTR2 :                      ECBE C |  RGSTR3 :                      ECD9 C |
 RIGHT1 :                      EBDF C |  RIGHT2 :                      EBE7 C |
 RIGHT3 :                      EBF5 C |  RIGHT4 :                      EBFB C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 263 - 2024年05月30日 19時01分01秒


 RINDEX :                      DF4F C |  RND :                         FACC C |
 RND1 :                        FADB C |  RND2 :                        FB12 C |
 RNDF :            FFFFFFFFFFFFFFE6 - |  RNDX :            FFFFFFFFFFFFFFE5 - |
 RNDY :            FFFFFFFFFFFFFFE4 - |  RNUM :                        DD7B C |
 RNUM1 :                       DD88 C |  RNUM2 :                       DD92 C |
 RNUM3 :                       DD95 C |  RSTR :                        E4D4 C |
 RSTR1 :                       E4DE C |  RSTR2 :                       E4EB C |
 RT1 :                         DD12 C |  RT2 :                         DD1F C |
 RT3 :                         DD2C C |  RT4 :                         DD3B C |
 RT5 :                         DD4A C |  RTERM :                       DD10 C |
 RTERRN :                      D4A8 C |  RTFUNC :                      D4DC C |
 RTNEST :                      D4A6 C |  RTRN :                        DD78 C |
 RUBEND :                      E0AB C |  RUN :                         D9A0 C |
 RUN1 :                        D9A6 C |  SAV :                         E350 C |
 SAV1 :                        E35E C |  SAVEDO :                      E469 C |
 SAVFOR :                      E72B C |  SBROFF :          FFFFFFFFFFFFFFFC - |
 SBRSTK :                        F0 - |  SCALL :                       D3FF C |
 SCALL1 :                      D41F C |  SCALLS :                      D01E C |
 SCAN :                        E108 C |  SCAN1 :                       E13E C |
 SCAN2 :                       E155 C |  SCAN3 :                       E157 C |
 SCAN4 :                       E15D C |  SCAN5 :                       E167 C |
 SCAN6 :                       E176 C |  SCAN7 :                       E17C C |
 SCAN8 :                       E184 C |  SCAND :                       E14A C |
 SCANR :                       E12A C |  SCNRR :                       E1B3 C |
 SETZ :                        E61F C |  SFOR1 :                       E73A C |
 SFOR2 :                       E74D C |  SFOR3 :                       E750 C |
 SFOR4 :                       E752 C |  SGN :                         FB20 C |
 SGN1 :                        FB33 C |  SGN2 :                        FB39 C |
 SGN3 :                        FB3F C |  SHFTL :                       E09B C |
 SHFTR :                       E0CD C |  SIN :                         F9C2 C |
 SIN1 :                        F9CD C |  SIN2 :                        F9EA C |
 SIN4 :                        FA0E C |  SIN5 :                        FA1C C |
 SIN6 :                        FA2D C |  SIN7 :                        FA97 C |
 SNGL :                        DD70 C |  SNTX :                        E3F8 C |
 SPC :                         E5C2 C |  SPC1 :                        E5C6 C |
 SPEXEC :                      D47D C |  SPLINE :                      D4B1 C |
 SPLOAD :                      D457 C |  SPLOD2 :                      D4C9 C |
 SPRNUM :                      D1B2 C |  SPRTN :                       D4B9 C |
 SPRTN1 :                      D4BD C |  SPRVSR :                      D480 C |
 SPTEST :                      D45F C |  SPTST1 :                      D4AF C |
 SPTST2 :                      D4EA C |  SPTST3 :                      D53D C |
 SQRT :                        FB43 C |  SQRT1 :                       FB4B C |
 SQRT2 :                       FB6F C |  SQRT3 :                       FB7B C |
 SSCAN :                       E115 C |  SSCAN1 :                      E128 C |
 SSKP1 :                       E19B C |  SSKP2 :                       E1A9 C |
 STACK :                       F28E C |  STAT :                        D939 C |
 STAT0 :                       D936 C |  STATUS :                      FDDD C |
 STBACK :                      FF80 C |  STBCK :                       E674 C |
 STFLD :                       FC51 C |  STINIT :                      FF7D C |
 STKBASE :                     7C00 - |  STKIBUF :                      3B6 - |
 STKMID :                        80 - |  STKPHI :          FFFFFFFFFFFFFFA2 - |
 STKTOP :                       C00 - |  STPBCK :                      F4AE C |
 STPNT :                       E4F4 C |  STPNT1 :                      E4FC C |
 STRE1 :                       E664 C |  STREND :                      ED02 C |
 STREX1 :                      DB94 C |  STREX2 :                      DB9B C |
 STREXP :                      DB92 C |  STRF :                        DB9D C |
 STRF1 :                       DBA2 C |  STRF10 :                      DC63 C |
 STRF2 :                       DBAB C |  STRF3 :                       DBC4 C |
 STRF4 :                       DBDD C |  STRF5 :                       DBFD C |
 STRF6 :                       DC1D C |  STRF7 :                       DC36 C |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 264 - 2024年05月30日 19時01分01秒


 STRF8 :                       DC4F C |  STRF9 :                       DC5C C |
 STRNG :                       EDFA C |  STRPNT :                      ED42 C |
 STRT :                        E4BC C |  STVAR :                       E78A C |
 SUBOFF :          FFFFFFFFFFFFFFE3 - |  SUBSTK :                        1E - |
 SV_BASE :                     D400 - |  SV_LINE :                       30 - |
 SV_MSGOUT :       FFFFFFFFFFFFFFB4 - |  SV_RESTRT :       FFFFFFFFFFFFFFA0 - |
 SV_RTERRN :                     27 - |  SV_RTFUNC :                     5B - |
 SV_RTNEST :                     25 - |  SV_RTRN :                       38 - |
 SV_RTRN1 :                      3C - |  SV_SPLOAD :       FFFFFFFFFFFFFFD6 - |
 SV_VALERR :                     6B - |  SWAP :                        F035 C |
 SWAP1 :                       F039 C |  SWP1 :                        F727 C |
 SWPM :                        F986 C |  SWPMUL :                      F982 C |
 SYNTAX :                      D942 C |  SYNTX :                       E400 C |
 SYSRTN :                      D4AD C | *S_FLAG0 :                        1 - |
*S_SENSEA :                      10 - | *S_SENSEB :                      20 - |
 TAB :                         FDCB C |  TAB1 :                        FDD3 C |
 TAN :                         F9B2 C |  TEN :                         FABA C |
 TESTB6 :                      D506 C |  TESTLP :                      D4F0 C |
 TESTN :                       D53F C |  THEN :                        E3A2 C |
*TIME :               "19\-026\-103\-12601\-027\-120\-12201\-025\-089\-110" - |
 TOKENS :                      D73D C |  TOP :                         EEA3 C |
 TOP1 :                        EEAE C |  TOP2 :                        EEBA C |
 TOP3 :                        EEC1 C | *TRUE :                           1 - |
 TSTBIT :                        40 - |  TSTBITH :                     4000 - |
 TSTN1 :                       D543 C |  TSTN10 :                      D58D C |
 TSTN11 :                      D5AB C |  TSTN2 :                       D552 C |
 TSTN3 :                       D554 C |  TSTN4 :                       D55E C |
 TSTN5 :                       D56F C |  TSTN6 :                       D57A C |
 TSTN7 :                       D57C C |  TSTN8 :                       D584 C |
 TSTN9 :                       D5D8 C |  T_ABS :                         AC - |
 T_AND :                         A3 - |  T_ASC :                         BD - |
 T_ATN :                         AD - |  T_AUTO :                        80 - |
 T_BYE :                         81 - |  T_CHR :                         C5 - |
 T_CLEAR :                       82 - |  T_CLOAD :                       83 - |
 T_COS :                         AE - |  T_CSAVE :                       84 - |
 T_DATA :                        8A - |  T_DEF :                         8B - |
 T_DIM :                         8C - |  T_DIV :                         A4 - |
 T_DO :                          8D - |  T_EDIT :                        85 - |
 T_ELSE :                        8E - |  T_END :                         8F - |
 T_EXOR :                        A5 - |  T_EXP :                         AF - |
 T_FN :                          B0 - |  T_FOR :                         90 - |
 T_FREE :                        BE - |  T_GE :                          AA - |
 T_GOSUB :                       91 - |  T_GOTO :                        92 - |
 T_IF :                          93 - |  T_INPUT :                       94 - |
 T_INT :                         B1 - |  T_LAST :                        89 - |
 T_LB :                          B2 - |  T_LE :                          A9 - |
 T_LEFT :                        C6 - |  T_LEN :                         BF - |
 T_LET :                         A2 - |  T_LG :                          B3 - |
 T_LINK :                        95 - |  T_LIST :                        86 - |
 T_LN :                          B4 - |  T_MID :                         C7 - |
 T_MOD :                         A6 - |  T_NE :                          AB - |
 T_NEW :                         87 - |  T_NEXT :                        96 - |
 T_NOT :                         B5 - |  T_ON :                          97 - |
 T_OR :                          A7 - |  T_PAGE :                        98 - |
 T_PEEK :                        A8 - |  T_PI :                          B6 - |
 T_POKE :                        99 - |  T_POS :                         C0 - |
 T_PR :                          9B - |  T_PRINT :                       9A - |
 T_READ :                        9C - |  T_REM :                         9D - |
 T_RESTORE :                     9E - |  T_RETURN :                      9F - |
 T_RIGHT :                       C8 - |  T_RND :                         B7 - |
 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 265 - 2024年05月30日 19時01分01秒


 T_RUN :                         88 - |  T_SGN :                         B8 - |
 T_SIN :                         B9 - |  T_SPC :                         C9 - |
 T_SQR :                         BA - |  T_STAR :                        CF - |
 T_STAT :                        A0 - |  T_STEP :                        C2 - |
 T_STR :                         CA - |  T_TAB :                         CB - |
 T_TAN :                         BB - |  T_THEN :                        C3 - |
 T_TO :                          C4 - |  T_TOP :                         C1 - |
 T_UNTIL :                       A1 - |  T_USING :                       CC - |
 T_VAL :                         BC - |  T_VER :                         CD - |
 T_VERS :                        89 - |  T_VERT :                        CE - |
 UFRACS :          FFFFFFFFFFFFFFE1 - |  UNTIL :                       DA47 C |
 UNTL :                        E496 C |  UNTL1 :                       E4A0 C |
 UP :                          E264 C |  UP1 :                         E270 C |
 UP2 :                         E295 C |  USE_CASS :                       2 - |
 USING :                       FE9D C |  USING2 :                      FEDB C |
 USING3 :                      DB1D C |  USNG1 :                       FEA3 C |
 USNG2 :                       FEAF C |  USNG21 :                      FEFC C |
 USNG22 :                      FF08 C |  USNG23 :                      FF0F C |
 USNG24 :                      FF19 C |  USNG25 :                      FF1D C |
 USNG26 :                      FF25 C |  USNG27 :                      FF35 C |
 USNG28 :                      FF3B C |  USNG29 :                      FF3E C |
 USNG2A :                      FF52 C |  USNG2B :                      FF60 C |
 USNG3 :                       FEC1 C |  USNG31 :                      DB2D C |
 USNG32 :                      DB37 C |  USNG4 :                       FECD C |
 USNG5 :                       FED7 C |  UTOTAL :          FFFFFFFFFFFFFFE2 - |
 VALER1 :                      D58B C |  VALER2 :                      D521 C |
 VALERR :                      D4EC C |  VALSTR :                      FBBB C |
 VAR1 :                        E7C8 C |  VAR2 :                        E7D2 C |
 VAR3 :                        E7DE C |  VAR4 :                        E7ED C |
 VAR5 :                        E7FC C |  VAR6 :                        E7FF C |
 VARERR :                      E5AB C |  VARFND :                      E7B6 C |
 VARSBUF :                      100 - |  VER1 :                        EF5F C |
 VERMSG :                      D003 C |  VERS :                        EF51 C |
*VERSION :                     142F - |  VERSTR :                      D013 C |
 VERT :                        F23F C |  VERT1 :                       F241 C |
 VERT2 :                       F24B C |  VERT3 :                       F24F C |
 VSTRNG :                      FDA2 C |  WRCHAR :                        20 - |
 XCHPNT :                      E91E C |  XFER :                        E396 C |
 XFER1 :                       E39C C |  ZERO :                        D229 C |
 _BS :                            8 - |  _CR :                            D - |
*_CTLC :                          3 - |  _CTLK :                          B - |
 _CTLL :                          C - |  _CTLO :                          F - |
 _CTLR :                         12 - |  _CTLX :                         18 - |
 _FF :                            C - |  _HTAB :                          9 - |
 _LF :                            A - |  _PRMPT :                       '>' - |
 _QMARK :                       '?' - |

   1042 symbols
     30 unused symbols

 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 266 - 2024年05月30日 19時01分01秒


  Defined Macros:
  ---------------

CALL                                  | DO                                   
GOTO                                  | ILCALL                               
ILRTRN                                | JS                                   
LDPI                                  | MESG                                 
MESGCR                                | RTRN                                 
SYSCALL                               | TOKEN                                
TSTNUM                                | TSTSTR                               
TSTVAR                                |

     15 macros

 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 267 - 2024年05月30日 19時01分01秒


  Defined Functions:
  ------------------

H                                     | L                                    

 AS V1.42 Beta [Bld 269] - Source File NIBLFP.asm - Page 268 - 2024年05月30日 19時01分01秒


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.09 seconds assembly time

   8080 lines source file
  15287 lines incl. macro expansions
      2 passes
      0 errors
     27 warnings
